Search.setIndex({"titles": ["aim2dat Documentation", "AiiDA Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_data.gaussian_cube_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_data.surface_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows._workflow_builder_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.chargemol.calcjobs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.chargemol</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.chargemol.parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.auxiliary_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.band_structure_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.calcjobs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.cell_opt_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.combined_work_chains</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_inputs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_opt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_scf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.cube_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.el_properties_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.geo_opt_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.partial_charges_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.pdos_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.planar_fields_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.surface_opt_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.work_chain_specs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.critic2.calcjobs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.critic2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.critic2.parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib.enum_calcjob</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib.enum_parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.workflow_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.aiida</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.ase_atoms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.ase_surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.dscribe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.graphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.hdf5</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.import_opt_dependencies</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.mp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.mp_openapi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.optimade</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.oqmd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.pandas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.phonopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.pymatgen</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.pyxtal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.seekpath</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.spglib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.discretization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.fingerprint</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.function_comparison</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.hull</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.smearing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cif</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k.bands_dos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k.restart</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k.stdout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.critic2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.fhi_aims</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.phonopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.qe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.xmgrace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.yaml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.zeo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.cell_grid_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.kernels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.transformers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.band_structure_dos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.partial_charges</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.partial_rdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.phase</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.planar_fields</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.simple_plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.spectroscopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.thermal_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.brillouin_zone_2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.dscribe_descriptors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.ffprint_order_p</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.fragmentation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.graphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.planes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.prdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.warren_cowley_order_parameters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation.add_functional_group</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation.add_structure</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation.decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.mixin</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.stability</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_comparison</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_coordination</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_manipulation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_point_groups</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_prdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_space_groups</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_super_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.structure_collection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.structure_importer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.structure_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.surface_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.chem_formula</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.dict_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.element_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.maths</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.print</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.space_groups</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.units</span></code>", "Changelog", "Example List", "Creating a discretized grid to analyse functions", "Comparing two functions on a discretized grid", "Plotting the band structure and projected density of states (pDOS) from CP2K output-files", "Plotting the band structure and projected density of states (pDOS) from FHI-aims output files", "Plotting the band structure, projected density of states (pDOS) and thermal properties from phonopy output-files", "Plotting the band structure and projected density of states (pDOS) from Quantum ESPRESSO output-files", "Plotting the band structure and projected density of states (pDOS) from Materials Project", "Plotting atomic partial charges from Critic2 output-files", "Plotting planar fields from Critic2 output files", "Using the <code class=\"docutils literal notranslate\"><span class=\"pre\">SimplePlot</span></code> class as a flexible plotting framework", "How to use the plots package to plot a x-ray absorption spectrum", "Calculating the coordination numbers for different atomic sites", "Querying the structure pool for the Cs-Te binary system", "Calculating the F-Fingerprint to compare crystal structures", "Function Analysis", "Running high-throughput calculations using CP2K", "High-throughput Workflows", "Handling complex workflows using the workflow builders", "aim2dat Documentation", "Linux operating systems", "Windows operating systems", "Overview and Package Dependencies", "Machine Learning", "Scikit-learn integration", "Plots", "Common features", "Plotting with the <code class=\"docutils literal notranslate\"><span class=\"pre\">SimplePlot</span></code> class", "Subplots and grids", "Handling multiple structures at once", "Structural Analysis", "Representation of molecules and crystals", "Interfaces to online databases and random crystal generation", "Creating surfaces from bulk crystals", "Overview"], "terms": {"The": [0, 1, 2, 4, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 58, 59, 60, 62, 71, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 128, 129, 130, 134, 136, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170], "ha": [0, 1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 130, 136, 146, 148, 150, 153, 156, 158, 160, 167, 169, 170], "been": [0, 1, 2, 4, 6, 8, 10, 11, 18, 19, 21, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 67, 68, 150, 154, 155, 156, 160], "move": [0, 6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 136], "http": [0, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 124, 132, 150], "github": [0, 156], "io": [0, 64, 109, 112, 136, 140, 141, 142, 143, 145, 146, 147, 151, 163], "pleas": [0, 83, 105, 108, 109, 112, 152, 155, 156], "refer": [0, 1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 73, 85, 86, 106, 108, 109, 112, 149, 152, 160], "thi": [0, 1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 58, 61, 62, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 105, 108, 109, 110, 112, 123, 124, 125, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 170], "link": [0, 1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 163], "futur": [0, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 110, 112, 125], "page": [0, 109, 124, 153, 154, 159, 161], "soon": [0, 105, 108, 150], "remov": [0, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 85, 86, 91, 92, 105, 108, 109, 110, 112, 124, 125, 146, 147, 150, 155, 169], "input": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 38, 39, 67, 74, 77, 78, 79, 83, 84, 85, 86, 91, 92, 93, 122, 129, 132, 135, 136, 139, 141, 143, 146, 148, 153, 160, 163, 166, 167, 168, 169], "output": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 43, 65, 66, 67, 69, 70, 71, 73, 74, 77, 83, 94, 97, 101, 109, 112, 125, 128, 129, 135, 136, 137, 144, 153, 156, 162, 166, 168, 170], "paramet": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 38, 39, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 138, 140, 141, 143, 145, 146, 149, 153, 160, 161, 165, 168, 169, 170], "all": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 36, 39, 65, 73, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 103, 106, 108, 109, 110, 112, 114, 116, 123, 124, 125, 126, 130, 135, 136, 141, 143, 145, 146, 147, 149, 150, 154, 155, 158, 159, 160, 164, 166, 167, 168, 169, 170], "work": [1, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 25, 26, 27, 29, 38, 39, 61, 83, 85, 86, 136, 137, 154, 155, 156, 158, 159, 166, 167], "chain": [1, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 25, 26, 27, 29, 38, 39, 138, 154, 155, 156], "calcul": [1, 6, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 39, 43, 59, 60, 62, 67, 68, 71, 73, 74, 79, 83, 85, 86, 87, 89, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 114, 117, 119, 121, 123, 125, 132, 136, 137, 139, 141, 143, 145, 150, 152, 154, 155, 156, 159, 160, 161, 166, 168, 170], "job": [1, 6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 67, 68, 83, 97, 101, 153, 156], "calcjob": [1, 7, 8, 23, 24, 31, 32, 33, 34, 154], "chargemolcalcul": [1, 6, 25], "sourc": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 150, 156, 157], "softwar": [1, 6, 7, 8, 11, 23, 30, 31, 32, 35], "packag": [1, 6, 7, 8, 11, 23, 30, 31, 32, 35, 43, 55, 64, 83, 97, 112, 136, 137, 140, 141, 142, 143, 145, 146, 149, 150, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 170], "charge_density_filenam": 1, "option": [1, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 46, 65, 67, 69, 71, 77, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 129, 130, 134, 141, 143, 145, 152, 166], "name": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 36, 73, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 112, 123, 130, 134, 140, 141, 143, 147, 148, 154, 155, 158, 163, 166, 168], "cube": [1, 2, 18, 153], "file": [1, 2, 4, 6, 11, 18, 30, 33, 34, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 112, 115, 123, 136, 137, 139, 144, 149, 152, 153, 155, 156, 159, 162, 163, 166, 168, 170], "contain": [1, 2, 6, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 33, 38, 39, 58, 62, 66, 67, 68, 69, 71, 72, 73, 74, 76, 83, 84, 85, 86, 87, 89, 97, 101, 103, 104, 106, 108, 109, 110, 112, 123, 124, 125, 126, 130, 132, 134, 135, 138, 140, 141, 143, 145, 148, 150, 153, 155, 160, 166, 168, 170], "valenc": [1, 9, 85, 86, 87, 140, 141, 143, 145], "densiti": [1, 26, 27, 66, 67, 71, 73, 74, 83, 85, 86, 97, 101, 109, 124, 137, 146, 153, 156, 161, 162], "system": [1, 12, 21, 86, 89, 109, 124, 125, 134, 137, 140, 142, 143, 154, 159, 169, 170], "charge_density_fold": 1, "requir": [1, 8, 24, 29, 32, 34, 152], "folder": [1, 6, 8, 11, 24, 30, 32, 33, 34, 66, 67, 68, 71, 73, 74, 75, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 143, 155, 156], "carg": 1, "code": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 34, 67, 154, 156, 162], "us": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 47, 49, 58, 61, 62, 73, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 105, 106, 108, 109, 110, 112, 123, 124, 125, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "i": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 38, 39, 58, 59, 62, 63, 67, 68, 71, 76, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 103, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 128, 130, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "unless": [1, 2, 4], "remote_fold": [1, 13], "specifi": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 62, 63, 73, 86, 89, 99, 100, 101, 105, 106, 108, 109, 110, 112, 124, 125, 138, 142, 146, 148, 149, 150, 152, 166, 168], "which": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 33, 39, 58, 62, 83, 85, 86, 97, 101, 105, 106, 108, 109, 110, 112, 125, 132, 136, 138, 145, 146, 150, 152, 155, 156, 160, 163, 164, 166, 169, 170], "mean": [1, 6, 11, 30, 33, 125, 138, 145, 160, 169], "an": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 62, 75, 79, 83, 85, 86, 97, 99, 101, 102, 105, 106, 108, 109, 110, 112, 121, 123, 124, 125, 138, 140, 141, 143, 146, 147, 149, 150, 153, 154, 155, 156, 160, 161, 163, 164, 166, 167, 168, 169, 170], "exist": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 86, 89, 121], "being": [1, 2, 4, 8, 24, 32, 34, 67, 69, 86, 88, 168], "import": [1, 6, 11, 30, 33, 39, 40, 45, 60, 62, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 112, 123, 124, 125, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 155, 156, 160, 163, 165, 166, 168, 169, 170], "actual": [1, 8, 24, 32, 34, 150, 152, 166], "run": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 38, 39, 67, 68, 150, 154, 155, 156, 160], "kind_info": 1, "list": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 58, 60, 61, 62, 67, 68, 71, 73, 75, 76, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 112, 115, 116, 121, 123, 124, 125, 126, 128, 129, 132, 134, 135, 138, 140, 142, 143, 145, 146, 148, 154, 155, 160, 165, 166, 168, 169], "atom": [1, 2, 4, 10, 12, 13, 18, 19, 22, 25, 27, 41, 66, 67, 71, 73, 74, 79, 83, 85, 86, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 116, 117, 119, 123, 124, 125, 130, 136, 137, 140, 141, 143, 146, 150, 153, 156, 159, 161, 162, 166, 168], "number": [1, 2, 4, 9, 10, 12, 18, 19, 21, 22, 25, 26, 27, 38, 73, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 104, 105, 106, 108, 109, 110, 112, 114, 123, 124, 125, 126, 128, 130, 132, 134, 136, 137, 140, 141, 143, 145, 150, 153, 155, 160, 161, 163, 165, 166, 168, 169, 170], "core": [1, 14, 15, 17, 29, 83, 97, 101, 109, 112, 123, 155, 159], "electron": [1, 9, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 85, 86, 87, 109, 124, 145, 146, 153, 156, 162], "metadata": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 83], "namespac": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "port": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39], "call_link_label": 1, "label": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 59, 60, 62, 73, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 106, 108, 109, 110, 112, 123, 125, 126, 130, 136, 139, 143, 146, 148, 149, 150, 153, 162, 163, 164, 166, 168, 170], "call": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 138, 148, 153, 155, 164, 166, 167, 168, 170], "anoth": [1, 2, 4, 39, 116, 135, 141, 143, 166, 168], "comput": [1, 2, 4, 59, 154, 160], "when": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 83, 85, 86, 97, 101, 154, 166], "local": [1, 141, 143], "set": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 73, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 109, 110, 112, 123, 124, 125, 126, 128, 129, 130, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 147, 149, 150, 152, 153, 156, 162, 166, 168, 169, 170], "should": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 58, 62, 79, 83, 84, 85, 86, 98, 101, 103, 109, 110, 112, 125, 151, 154, 156, 159, 163, 166, 168], "descript": [1, 2, 4, 109, 123, 126, 140, 141, 142, 144, 153, 155, 161, 163], "node": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 85, 86, 87, 89, 109, 112, 123, 126, 170], "dry_run": 1, "true": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 61, 65, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 103, 109, 110, 112, 123, 124, 125, 126, 128, 134, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 165, 166, 168, 169, 170], "prepar": [1, 6, 11, 30, 33, 86], "submiss": [1, 6, 30, 38], "launch": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "account": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 84, 85, 86], "queue": [1, 39, 155], "remot": 1, "additional_retrieve_list": 1, "rel": [1, 2, 4, 83, 85, 86, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 149, 160], "path": [1, 2, 4, 6, 8, 10, 11, 24, 30, 32, 33, 34, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 109, 112, 123, 129, 139, 140, 141, 142, 143, 155, 159, 163], "retriev": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 79, 109, 112, 129, 130, 144, 153, 156, 159, 166], "addit": [1, 2, 4, 12, 13, 22, 28, 73, 83, 86, 89, 92, 109, 112, 123, 138, 140, 142, 143, 145, 147, 152, 155, 156, 159, 166, 168, 169], "what": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "plugin": [1, 3, 6, 11, 30, 33, 154, 155], "append_text": 1, "specif": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 33, 39, 86, 109, 112, 136, 148, 153, 155, 160, 162, 163, 164, 165, 168, 169, 170], "append": [1, 109, 112, 123, 124, 146, 166], "text": [1, 2, 4, 86, 90], "go": 1, "schedul": [1, 6, 11, 30, 33], "script": [1, 6, 11, 30, 33], "just": [1, 85, 86, 141, 155], "after": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 28, 30, 33, 38, 158], "execut": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 156], "custom_scheduler_command": 1, "possibli": [1, 160], "multilin": 1, "string": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 62, 63, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 106, 108, 109, 110, 112, 123, 124, 128, 134, 136, 138, 148, 150, 156, 163, 166, 168, 169], "command": [1, 6, 11, 18, 30, 33, 156, 157, 159], "user": [1, 2, 4, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 39, 83, 109, 110, 112, 125, 154, 155, 160, 163, 167], "want": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 150, 163], "manual": [1, 163], "differ": [1, 8, 13, 24, 32, 34, 58, 61, 62, 63, 73, 79, 83, 85, 86, 98, 100, 101, 103, 109, 110, 112, 125, 130, 137, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170], "respect": [1, 86, 89, 93, 99, 100, 101, 105, 106, 108, 109, 110, 112, 124, 125, 136, 140, 141, 143, 149, 150, 166, 167, 168, 170], "prepend_text": 1, "posit": [1, 2, 4, 12, 13, 22, 76, 85, 86, 91, 92, 105, 106, 108, 109, 110, 112, 117, 123, 125, 136, 146, 149, 153, 165, 166, 168, 170], "where": [1, 8, 10, 12, 18, 19, 21, 22, 24, 25, 26, 27, 32, 34, 150, 160, 163], "insert": 1, "befor": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 85, 86, 128, 138, 141, 143, 146, 156, 160, 166, 169, 170], "ani": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 146, 154, 155, 160], "non": [1, 4, 85, 86, 109, 110, 112, 125, 140, 142, 143, 149, 168, 170], "environment_vari": 1, "dictionari": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 65, 66, 67, 68, 69, 71, 73, 74, 76, 83, 85, 86, 87, 88, 101, 103, 104, 109, 110, 112, 123, 124, 125, 126, 128, 129, 136, 139, 140, 141, 143, 144, 145, 148, 155, 166, 168, 170], "custom": [1, 24, 37, 75, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 123, 132, 138, 153, 160, 164], "environ": [1, 83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 136, 144, 157, 159], "variabl": [1, 9, 10, 12, 18, 19, 21, 22, 25, 26, 27, 38, 39, 79, 83, 85, 86, 89, 92, 97, 101, 109, 110, 124, 166], "environment_variables_double_quot": 1, "If": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 73, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 106, 108, 109, 110, 112, 123, 124, 125, 128, 130, 153, 155, 158, 166, 167, 168, 169], "doubl": 1, "quot": 1, "instead": [1, 2, 4, 39, 73, 83, 105, 108, 109, 112, 123, 124, 136, 166, 168], "singl": [1, 2, 4, 79, 106, 108, 125, 140, 143, 155, 166, 167, 168], "escap": 1, "import_sys_environ": 1, "load": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 71, 73, 77, 140, 141, 142, 143, 151, 164], "input_filenam": 1, "filenam": 1, "written": [1, 155, 166, 168], "max_memory_kb": 1, "maximum": [1, 10, 13, 18, 19, 21, 25, 26, 27, 28, 38, 58, 61, 73, 79, 83, 85, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 124, 125, 138, 140, 141, 143], "memori": [1, 59, 60, 62, 168], "kilobyt": 1, "ask": 1, "max_wallclock_second": 1, "wallclock": 1, "second": [1, 2, 38, 58, 59, 60, 62, 85, 86, 91, 125, 138, 141, 143, 150, 163, 165], "mpirun_extra_param": 1, "extra": [1, 2, 4, 109, 112, 123, 124, 144, 168], "param": [1, 83], "pass": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 58, 62, 85, 86, 109, 110, 112, 124, 125, 143, 150, 155, 166, 168, 170], "mpirun": 1, "equival": [1, 65, 85, 86, 125, 166, 170], "one": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 106, 108, 109, 110, 112, 123, 124, 125, 135, 138, 140, 141, 142, 143, 149, 153, 155, 163, 164, 166, 167, 168, 169, 170], "provid": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 124, 139, 159, 167], "mpirun_command": 1, "exampl": [1, 83, 128, 139, 140, 141, 142, 144, 145, 146, 150, 156, 160, 170], "np": [1, 2, 4, 58, 59, 60, 62, 63, 83, 84, 85, 86, 97, 101, 109, 123, 132, 139, 148, 152], "8": [1, 79, 83, 86, 91, 97, 101, 106, 108, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 155, 156, 160, 164, 166, 168, 169], "extra_param": 1, "0": [1, 4, 9, 10, 12, 18, 19, 21, 22, 25, 26, 27, 38, 61, 63, 73, 79, 83, 85, 86, 87, 89, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 124, 125, 126, 128, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 160, 163, 164, 165, 166, 168, 170], "1": [1, 4, 9, 57, 63, 77, 79, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 105, 106, 108, 109, 110, 112, 124, 125, 126, 128, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 160, 161, 163, 164, 165, 166, 168, 169, 170], "exec": 1, "x": [1, 33, 34, 58, 59, 60, 61, 62, 63, 76, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 112, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 152, 155, 162, 163, 164], "output_filenam": 1, "content": [1, 166], "stdout": [1, 64, 67, 72], "parser_nam": 1, "parser": [1, 6, 7, 11, 23, 30, 31, 33, 34, 136, 153, 156], "can": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 36, 39, 58, 62, 63, 84, 85, 86, 89, 109, 110, 112, 124, 125, 126, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "none": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 59, 62, 63, 73, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 102, 106, 108, 109, 110, 112, 116, 121, 123, 124, 125, 126, 128, 129, 130, 136, 142, 143, 146, 148, 149, 160, 163, 166, 168, 170], "avail": [1, 58, 62, 85, 86, 135, 152, 153, 163], "need": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 58, 62, 73, 82, 85, 86, 109, 112, 123, 124, 138, 139, 140, 141, 142, 143, 145, 153, 158, 159, 163, 166, 168], "prepend": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "prioriti": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27], "queu": 1, "qo": 1, "qualiti": [1, 156], "servic": 1, "queue_nam": 1, "rerunn": 1, "determin": [1, 9, 10, 12, 18, 19, 21, 22, 25, 26, 27, 39, 61, 83, 85, 86, 89, 109, 110, 112, 118, 120, 123, 125, 126, 128, 136, 149, 150, 155, 168, 170], "requeu": 1, "rerun": 1, "resourc": [1, 160], "like": [1, 58, 62, 83, 101, 104, 109, 123, 145, 148, 150, 156, 161, 162, 166], "cpu": 1, "etc": [1, 153, 165], "depend": [1, 141, 143, 145, 155, 157, 164], "look": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 143, 164, 169], "document": [1, 6, 11, 30, 33, 109, 112, 153, 154, 155, 159, 163, 168], "more": [1, 2, 4, 109, 124, 136, 139, 140, 141, 142, 144, 150, 152, 154, 155, 156, 158, 160, 161, 164, 165, 166, 167, 168], "detail": [1, 70, 86, 89, 109, 110, 112, 125, 134, 136, 139, 140, 141, 142, 144, 150, 152, 154, 155, 156, 159, 160, 161, 163, 167, 168, 170], "scheduler_stderr": 1, "stderr": 1, "scheduler_stdout": 1, "stash": 1, "direct": [1, 2, 4, 83, 85, 86, 91, 106, 108, 109, 110, 112, 125, 126, 136, 138, 143, 156, 168, 170], "complet": [1, 8, 10, 12, 18, 19, 21, 22, 24, 25, 26, 27, 32, 34, 39, 109, 112, 148, 153, 155], "source_list": 1, "sequenc": [1, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 84], "filepath": 1, "repres": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 58, 62, 109, 112, 123, 150, 160, 168], "directori": [1, 2, 4, 10, 12, 18, 19, 21, 22, 25, 26, 27, 148], "stash_mod": 1, "mode": [1, 75, 83, 97, 101], "perform": [1, 8, 13, 24, 32, 34, 58, 62, 84, 105, 106, 108, 109, 110, 112, 125, 138, 153, 155, 156, 166, 168], "valu": [1, 2, 4, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 58, 59, 60, 61, 62, 63, 67, 69, 71, 76, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 129, 130, 132, 135, 136, 138, 139, 149, 152, 153, 155, 160, 163, 164, 168], "common": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 170], "datastructur": [1, 6, 11, 30, 33], "stashmod": 1, "target_bas": 1, "base": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 44, 58, 59, 60, 62, 65, 77, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 103, 105, 106, 108, 109, 110, 112, 124, 125, 126, 135, 136, 140, 141, 143, 149, 150, 151, 152, 155, 156, 159, 160, 161, 162, 163, 166, 170], "locat": [1, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "stashd": 1, "For": [1, 73, 109, 112, 140, 142, 143, 157, 160, 166, 168, 170], "copi": [1, 6, 11, 30, 33, 109, 112, 123, 125, 138, 167], "absolut": [1, 2, 4, 8, 24, 32, 33, 34, 101, 102, 106, 108, 152, 160], "submit_script_filenam": 1, "withmpi": 1, "mpi": 1, "store_proven": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "fals": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 34, 39, 65, 71, 75, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 102, 103, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 128, 134, 141, 143, 145, 146, 147, 148, 150, 151, 160, 163, 166, 168, 169, 170], "proven": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 154, 156], "store": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 45, 59, 62, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 112, 123, 126, 136, 138, 139, 140, 142, 143, 144, 145, 146, 148, 150, 160, 163, 164, 165, 166, 167, 168, 170], "databas": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 48, 49, 50, 51, 109, 123, 124, 126, 144, 156, 159, 166, 167, 170], "monitor": [1, 6, 11, 30, 33], "add": [1, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 39, 65, 75, 83, 85, 86, 89, 91, 92, 93, 105, 106, 108, 109, 110, 123, 124, 136, 145, 150, 153, 160, 168, 170], "function": [1, 2, 4, 6, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 25, 26, 27, 30, 39, 40, 41, 52, 54, 57, 59, 60, 62, 72, 79, 80, 83, 87, 88, 90, 91, 93, 94, 109, 111, 123, 127, 136, 137, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171], "inspect": 1, "while": [1, 2, 4, 10, 12, 18, 19, 21, 22, 25, 26, 27, 155, 166], "decid": 1, "prematur": [1, 153], "termin": [1, 4, 6, 11, 13, 30, 33, 86, 93, 109, 126, 158, 170], "path_atomic_dens": 1, "absolt": 1, "result": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 70, 86, 93, 106, 108, 109, 110, 112, 125, 140, 154, 155, 156, 166, 168], "alreadi": [1, 2, 4, 8, 24, 32, 34, 151, 156, 168, 169, 170], "without": [1, 8, 24, 32, 34, 155, 160], "normal": [1, 43, 83, 85, 86, 97, 101, 109, 126, 132, 138, 170], "engin": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 100, 101, 155, 159], "recreat": 1, "proce": 1, "straight": [1, 140, 141, 143, 150, 158, 170], "step": [1, 10, 12, 18, 19, 21, 22, 24, 25, 26, 27, 138, 143, 146, 150, 156, 159, 160], "remotedata": 1, "had": 1, "through": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 112], "defin": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 39, 67, 69, 79, 82, 83, 85, 86, 97, 99, 100, 101, 104, 105, 106, 108, 109, 110, 112, 124, 125, 136, 141, 145, 146, 149, 150, 152, 153, 155, 160, 161, 165, 166, 168, 170], "ar": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 39, 58, 59, 62, 67, 69, 71, 74, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 104, 105, 106, 108, 109, 110, 112, 123, 124, 125, 128, 130, 131, 136, 138, 140, 141, 143, 145, 146, 148, 149, 150, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170], "pars": [1, 6, 8, 11, 24, 30, 32, 33, 34, 67, 69, 75, 109, 112, 128, 134, 136, 140, 141, 142, 143, 145, 150], "attach": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 105, 106, 108], "usual": [1, 160, 163, 167, 170], "spin_density_filenam": 1, "spin": [1, 71, 74, 85, 86, 141, 143, 168], "output_ddec3_popul": 1, "ddec3": 1, "popul": [1, 2, 4, 86, 87, 145], "output_ddec6_popul": 1, "ddec6": 1, "output_paramet": 1, "necessari": [1, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 134, 140, 168], "remote_stash": 1, "daemon": [1, 6, 11, 30, 33, 155], "By": [1, 6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 168], "default": [1, 2, 4, 6, 9, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 59, 60, 62, 63, 71, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 109, 110, 112, 123, 124, 125, 126, 143, 147, 148, 149, 163], "ad": [1, 58, 83, 85, 86, 91, 92, 105, 106, 108, 109, 126, 136, 153, 166, 170], "them": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 65, 109, 112, 139, 143, 145, 146, 149, 150, 151], "calcinfo": [1, 6, 11, 30, 33], "retrieve_list": 1, "cp2kcalcul": [1, 11, 13, 29], "from": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 36, 38, 39, 43, 50, 61, 66, 67, 68, 71, 73, 74, 83, 84, 85, 86, 89, 90, 93, 99, 100, 101, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 128, 129, 130, 132, 134, 136, 137, 138, 139, 147, 148, 149, 151, 152, 155, 156, 159, 161, 162, 163, 164, 165, 166, 168, 169], "offici": [1, 11], "parent_calc_fold": 1, "previous": 1, "ran": [1, 153], "restart": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 64, 67, 72], "structur": [1, 2, 4, 9, 10, 13, 19, 29, 33, 36, 38, 40, 43, 45, 50, 65, 66, 67, 68, 71, 73, 74, 75, 76, 78, 79, 83, 84, 85, 86, 89, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 136, 137, 145, 146, 148, 149, 153, 154, 155, 156, 159, 160, 162, 163, 170, 171], "main": [1, 155, 156], "output_band": [1, 73], "band": [1, 10, 19, 66, 67, 71, 73, 74, 76, 85, 86, 93, 109, 124, 137, 153, 156, 162, 163], "output_cub": 1, "output_eigenvalu": 1, "eigenvalu": [1, 9, 66, 67, 71, 73, 74, 85, 86, 140, 141, 142, 143, 153], "output_hirshfeld_popul": 1, "final": [1, 79, 109, 124, 140, 144, 150, 160], "hirshfeld": [1, 153], "charg": [1, 2, 24, 25, 27, 86, 87, 109, 112, 137, 153, 162], "output_kind_info": 1, "kind": [1, 2, 4, 36, 66, 67, 73, 79, 83, 85, 86, 98, 101, 103, 109, 110, 112, 123, 125, 136, 140, 143, 149, 155, 168], "inform": [1, 2, 6, 9, 11, 24, 30, 33, 67, 68, 74, 83, 85, 86, 109, 110, 112, 123, 124, 125, 133, 134, 136, 140, 141, 143, 145, 150, 153, 155, 167, 168, 169, 170], "includ": [1, 24, 39, 61, 83, 85, 86, 89, 109, 112, 124, 125, 140, 141, 142, 143, 148, 149, 153, 156, 159, 166, 170], "each": [1, 2, 24, 33, 58, 59, 61, 62, 66, 67, 71, 73, 74, 83, 85, 86, 87, 93, 98, 101, 103, 109, 110, 112, 124, 125, 128, 138, 145, 146, 149, 152, 155, 156, 160, 161, 163, 164, 166, 168, 170], "output_motion_step_info": 1, "optim": [1, 12, 13, 16, 22, 67, 68, 79, 153, 155, 160], "molecular": [1, 99, 101, 105, 109, 116, 123, 124, 154, 156, 160, 168], "dynam": 1, "simul": 1, "output_mulliken_popul": 1, "mulliken": [1, 153], "output_pdo": 1, "project": [1, 26, 48, 49, 66, 67, 71, 73, 74, 85, 86, 109, 124, 137, 146, 153, 156, 159, 162, 169], "state": [1, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 66, 67, 71, 73, 74, 85, 86, 106, 108, 109, 124, 137, 150, 153, 156, 162], "output_structur": 1, "relax": [1, 13, 109, 124, 153], "workchain": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 153, 154], "findscfparametersworkchain": [1, 21], "find": [1, 13, 19, 21, 25, 26, 99, 101, 102, 125, 128, 136, 150, 153, 166, 169], "mix": [1, 9, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 150, 168], "converg": [1, 10, 13, 18, 19, 21, 25, 26, 27, 28, 83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 153, 170], "kohn": [1, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 153], "sham": [1, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 153], "equat": [1, 9, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 98, 101, 109, 110, 112, 125, 153], "always_add_unocc_st": 1, "alwai": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 136, 141, 143, 164], "some": [1, 2, 4, 147, 153, 154, 159], "unoccupi": [1, 9, 21, 85, 86, 153], "even": 1, "smear": [1, 9, 62, 64, 79, 83, 85, 86, 92, 98, 101, 109, 110, 112, 125, 140, 143, 148], "clean_workdir": 1, "clean": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27], "end": [1, 99, 101, 148], "custom_scf_method": 1, "enable_rok": 1, "restrict": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 101, 102, 150], "open": [1, 2, 10, 12, 18, 19, 21, 22, 25, 26, 27, 51, 75, 109, 124, 139, 152, 156, 158, 159, 169], "shell": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 83, 101, 104], "unrestrict": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27], "calcualt": [1, 43], "factor_unocc_st": [1, 9], "factor": [1, 9, 79, 109, 110, 112, 124, 125, 160], "orbit": [1, 71, 85, 86, 141, 143, 153, 162], "handler_overrid": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27], "map": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 83], "kei": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 65, 85, 86, 88, 109, 112, 123, 124, 125, 129, 136, 140, 141, 143, 144, 150, 160, 164, 166, 168, 170], "handler": [1, 10, 12, 14, 18, 19, 21, 22, 25, 26, 27], "enabl": [1, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "toggl": 1, "origin": [1, 2, 85, 86, 92, 109, 110, 112, 125, 134, 150, 161, 166, 168], "declar": 1, "max_iter": 1, "iter": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 112, 149], "finish": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 146, 153], "successfulli": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27], "numerical_p": 1, "basis_fil": 1, "basi": [1, 83, 85, 86, 97, 101, 134, 141, 143, 151, 154, 166, 168], "basis_set": 1, "speci": 1, "cutoff_valu": 1, "cut": [1, 79, 83, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 125], "off": [1, 79, 83, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 125, 163, 168], "grid": [1, 19, 43, 58, 59, 60, 62, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 106, 108, 137, 148, 152, 160, 163], "kpoints_ref_dist": 1, "distanc": [1, 60, 62, 63, 79, 81, 82, 83, 86, 88, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 117, 125, 132, 149, 150, 151, 152, 161, 166, 168], "between": [1, 4, 38, 60, 62, 63, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 117, 124, 125, 132, 143, 146, 147, 149, 152, 153, 155, 163, 166, 167, 168], "two": [1, 4, 38, 59, 60, 62, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 125, 128, 129, 132, 137, 140, 141, 142, 143, 147, 149, 150, 151, 152, 153, 154, 155, 156, 162, 166, 168, 170], "k": [1, 10, 19, 66, 67, 71, 73, 74, 76, 85, 86, 94, 95, 140, 141, 142, 143, 144, 150, 161], "point": [1, 2, 4, 6, 11, 19, 30, 33, 61, 73, 76, 85, 86, 91, 99, 101, 106, 108, 109, 110, 112, 118, 125, 132, 134, 138, 140, 142, 143, 144, 148, 150, 153, 155, 164, 170], "reciproc": [1, 83, 85, 86, 97, 101], "space": [1, 65, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 109, 110, 112, 120, 124, 125, 126, 132, 134, 136, 150, 160, 163, 168, 170], "pseudo_fil": 1, "pseudopotenti": [1, 9], "xc_function": [1, 9], "exchang": [1, 9, 168], "correl": [1, 9, 60, 62, 152], "scf_extended_system": 1, "appli": [1, 63, 85, 86, 109, 110, 112, 125, 126, 140, 150, 154, 163, 166, 169], "larger": [1, 99, 101, 109, 126, 136, 150, 156, 166, 170], "scf": [1, 10, 12, 17, 18, 19, 21, 22, 25, 26, 27, 153], "cycl": [1, 10, 18, 19, 25, 27, 153], "extend": [1, 99, 155], "scf_method": 1, "method": [1, 61, 63, 96, 97, 99, 100, 101, 105, 106, 107, 108, 113, 114, 136, 138, 139, 146, 148, 149, 150, 152, 155, 156, 160, 161, 166, 167], "density_mix": 1, "orbital_transform": 1, "structural_p": 1, "scf_paramet": [1, 9, 13], "initi": [1, 2, 4, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 28, 79, 106, 108, 109, 124, 125, 138, 146, 154, 155, 156, 166, 167, 170], "system_charact": 1, "charact": [1, 21, 146], "possibl": [1, 2, 4, 83, 109, 124, 138, 168], "metal": 1, "insul": 1, "In": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 58, 59, 62, 67, 68, 85, 86, 87, 106, 108, 109, 110, 124, 138, 140, 141, 143, 146, 148, 150, 153, 155, 157, 160, 163, 165, 166, 167, 168, 169, 170], "case": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 59, 62, 67, 68, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 106, 108, 109, 110, 124, 136, 137, 138, 139, 140, 141, 143, 146, 148, 150, 155, 157, 163, 164, 166, 168, 170], "never": 1, "run_time_stat": 1, "time": [1, 38, 109, 124, 150, 151, 155, 160, 164, 168], "geooptworkchain": [1, 22], "adjust_scf_paramet": 1, "custom_opt_method": 1, "optimz": 1, "initial_opt_paramet": 1, "optimization_p": 1, "eps_symmetri": 1, "toler": [1, 61, 79, 83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 124, 125, 126, 128, 149, 150, 170], "group": [1, 38, 39, 65, 76, 79, 85, 86, 87, 89, 105, 106, 108, 109, 110, 112, 118, 120, 123, 124, 125, 126, 130, 134, 136, 145, 150, 160, 166, 168, 170], "keep_space_group": 1, "constrain": [1, 79, 109, 110, 112, 123, 125, 126, 155], "via": [1, 58, 62, 79, 109, 110, 112, 123, 124, 125, 130, 136, 138, 143, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 168, 169], "spglib": [1, 47, 79, 109, 110, 112, 125, 126, 134, 136, 150, 159, 168, 170], "max_dr": 1, "criterion": 1, "geometri": [1, 12, 22, 43, 83, 97, 101, 136], "chang": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 62, 105, 116, 136, 138, 141, 143, 149, 150, 156, 160, 163, 164, 166, 167, 168], "max_forc": 1, "forc": [1, 73, 79, 109, 112, 153], "compon": [1, 83], "rms_dr": 1, "root": [1, 156], "squar": [1, 128, 166], "rm": 1, "rms_forc": 1, "space_group_info": 1, "keep_spacegroup": 1, "celloptworkchain": [1, 12], "unit": [1, 2, 4, 8, 12, 13, 24, 32, 34, 39, 64, 85, 86, 88, 89, 90, 92, 93, 105, 106, 108, 109, 110, 112, 116, 123, 124, 125, 131, 136, 140, 142, 143, 151, 153, 168, 170], "cell": [1, 2, 4, 12, 13, 26, 73, 79, 85, 86, 105, 106, 108, 109, 110, 112, 116, 123, 124, 125, 126, 136, 138, 140, 142, 143, 146, 151, 153, 161, 166, 168, 170], "period": [1, 4, 12, 43, 83, 97, 99, 101, 109, 123, 126, 146, 149, 161, 168, 170], "cell_symmetri": 1, "symmetri": [1, 65, 73, 85, 86, 109, 110, 112, 118, 125, 134, 136, 143, 145, 150, 168], "dure": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 79, 160, 168], "keep_angl": 1, "lattic": [1, 125, 134, 155, 160], "angl": [1, 79, 109, 110, 112, 117, 125, 132, 155, 166, 168], "keep_symmetri": 1, "pressure_toler": 1, "pressur": [1, 153], "achiev": [1, 160], "ref_cell_scaling_factor": 1, "scale": [1, 4, 63, 79, 83, 85, 86, 91, 92, 97, 101, 102, 109, 110, 112, 116, 123, 125, 130, 140, 142, 143, 147, 160, 168], "cell_ref": 1, "bandstructureworkchain": [1, 10], "adjust": [1, 136, 140, 141, 143, 145, 162, 164], "clycl": 1, "path_paramet": 1, "seekpath": [1, 29, 38, 47, 155], "seekpath_paramet": 1, "argument": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 62, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 123, 125, 126, 138, 150, 163, 164, 166, 168, 169, 170], "analysi": [1, 96, 109, 110, 112, 120, 125, 136, 146, 155, 156, 171], "conv_structur": 1, "convent": [1, 109, 124, 151, 153, 170], "gener": [1, 8, 9, 24, 29, 32, 34, 39, 73, 76, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 124, 126, 127, 136, 138, 139, 150, 152, 154, 155, 156, 159, 160, 163, 164, 167, 168], "explicit_kpoint": 1, "explicit": 1, "kpoint": [1, 76, 85, 86, 140, 141, 143, 144], "primitive_structur": 1, "primit": [1, 109, 110, 112, 124, 125, 151, 170], "eigenvaluesworkchain": [1, 19], "pdosworkchain": [1, 26], "maximum_cell_length": 1, "minimum_cell_length": 1, "resolve_atom": 1, "wfn_cube_list": 1, "data": [1, 2, 3, 4, 6, 8, 9, 11, 24, 30, 32, 33, 34, 38, 39, 60, 61, 62, 74, 76, 77, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 112, 123, 124, 126, 139, 143, 144, 147, 150, 152, 154, 156, 159, 162, 163, 165, 166, 167, 168, 170], "wfn_n_homo": 1, "print": [1, 2, 4, 18, 19, 83, 125, 140, 141, 143, 144, 146, 150, 151, 152, 155, 160, 164, 166, 168, 169, 170], "certain": [1, 2, 4, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 39, 85, 86, 109, 112, 124, 126, 132, 143, 145, 163, 169, 170], "occupi": [1, 33, 85, 86], "wfn_n_lumo": 1, "partialchargesworkchain": [1, 25], "partial": [1, 24, 25, 27, 83, 86, 87, 88, 101, 103, 137, 151, 153, 161, 162, 168], "item": [1, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 123, 146, 163, 165, 168], "line": [1, 2, 76, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 139, 141, 143, 148, 150, 163, 166, 170], "store_cub": 1, "whether": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 28, 30, 33, 36, 39, 58, 61, 62, 65, 71, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 102, 103, 109, 110, 112, 123, 124, 125, 126, 128, 134, 150, 155, 160, 163, 166, 168, 170], "onli": [1, 2, 4, 33, 39, 61, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 109, 110, 112, 124, 125, 126, 128, 136, 138, 148, 150, 153, 160, 163, 166, 169], "support": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 67, 69, 71, 74, 75, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 105, 106, 108, 109, 110, 112, 123, 125, 128, 130, 136, 138, 143, 147, 155, 165, 166, 169], "output_bader_popul": 1, "bader": [1, 153], "output_plan": 1, "plane": [1, 70, 101, 109, 126, 132, 170], "cubeworkchain": [1, 18], "cube_typ": 1, "planarfieldsworkchain": [1, 27], "planar": [1, 27, 86, 90, 101, 102, 136, 137, 153, 162], "field": [1, 2, 4, 27, 65, 86, 90, 137, 153, 162], "field_typ": 1, "type": [1, 2, 4, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 58, 61, 62, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 126, 130, 138, 147, 149, 153, 154, 155, 161, 163, 164, 166, 168], "up": [1, 13, 20, 76, 85, 86, 90, 109, 110, 112, 125, 136, 140, 141, 143, 144, 168], "now": [1, 76, 136, 138, 140, 141, 142, 143, 144, 145, 146, 150, 151, 160, 164, 166, 169], "deformation_dens": 1, "elf": 1, "plane_vector": 1, "vector": [1, 4, 85, 86, 101, 102, 106, 108, 109, 110, 112, 123, 125, 132, 134, 138, 160, 161, 166, 168], "given": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 58, 65, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 106, 108, 109, 110, 123, 124, 126, 132, 134, 138, 140, 141, 142, 143, 144, 145, 153, 154, 155, 156, 159, 160, 163, 165, 166, 168, 169, 170], "crystallograph": [1, 134], "coordin": [1, 4, 44, 83, 86, 88, 90, 99, 100, 101, 102, 105, 106, 108, 109, 110, 112, 114, 123, 125, 136, 137, 161, 168], "angstrom": [1, 2, 4, 83, 86, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 125, 135], "boundari": [1, 83, 97, 101, 109, 123, 126, 146, 168, 170], "condit": [1, 10, 12, 18, 19, 21, 22, 25, 26, 27, 83, 97, 101, 109, 123, 126, 146, 153, 168, 170], "deform": [1, 146], "total_dens": 1, "total": [1, 71, 73, 74, 85, 86, 89, 93, 98, 101, 140, 141, 142, 143, 150, 152], "electronicpropertiesworkchain": [1, 13, 20], "properti": [1, 73, 79, 101, 130, 136, 137, 143, 147, 148, 150, 153, 155, 156, 160, 162, 164, 165, 166, 168, 169, 170], "about": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 112, 123, 168], "forward": 1, "e": [1, 58, 62, 63, 79, 83, 85, 86, 87, 89, 98, 101, 103, 109, 110, 112, 124, 125, 128, 134, 138, 145, 149, 151, 152, 153, 156, 160, 161, 162, 163, 164, 166, 168, 169, 170], "g": [1, 62, 79, 83, 85, 86, 87, 89, 97, 98, 101, 103, 109, 110, 112, 124, 125, 128, 134, 138, 145, 149, 151, 152, 153, 156, 160, 161, 162, 164, 166, 168, 169, 170], "wore": 1, "workflow": [1, 5, 12, 16, 21, 22, 37, 38, 39, 86, 93, 156, 159, 160, 169, 171], "calc_band_structur": 1, "calc_eigenvalu": 1, "calc_partial_charg": 1, "calc_pdo": 1, "pdo": [1, 66, 67, 71, 74, 85, 86, 137, 153, 162], "custom_protocol": 1, "protocol": [1, 20, 39], "standard": [1, 9, 24, 38, 67, 69, 70, 73, 83, 97, 101, 109, 110, 112, 125, 138, 140, 141, 143, 155, 160], "run_cell_optim": 1, "bader_popul": 1, "band_structur": [1, 66, 67, 71, 74, 76, 140, 141, 142, 143, 144, 153], "crysal": 1, "ddec6_popul": 1, "eigenvalue_info": 1, "general_info": 1, "hirshfeld_popul": 1, "mulliken_popul": 1, "optimized_structur": [1, 38, 86, 89, 109, 123], "crystal": [1, 13, 65, 79, 83, 84, 86, 89, 99, 100, 101, 109, 112, 124, 126, 134, 137, 153, 155, 156, 159, 160, 166, 167], "surfaceoptworkchain": [1, 13, 28], "slab": [1, 4, 13, 28, 38, 86, 93, 109, 126, 153, 170], "size": [1, 13, 28, 39, 79, 83, 84, 85, 86, 91, 98, 101, 103, 109, 110, 112, 124, 125, 126, 138, 145, 148, 155, 160, 170], "bulk_refer": 1, "energi": [1, 58, 62, 73, 85, 86, 89, 93, 94, 111, 125, 135, 136, 138, 140, 141, 142, 143, 144, 150, 162, 163], "bulk": [1, 86, 93, 94, 109, 126, 160], "preopt_numerical_p": 1, "pre": [1, 136, 141, 153, 155, 156], "preopt_optimization_p": 1, "slab_conv": 1, "criteria": [1, 13, 28, 150], "choos": [1, 12, 17, 22, 143, 150], "threshold": [1, 83, 85, 86, 97, 99, 100, 101, 102, 105, 106, 108, 109, 110, 112, 125, 146, 150, 153], "surfac": [1, 4, 28, 38, 42, 86, 109, 127, 153, 155, 162, 167], "format": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 77, 83, 86, 89, 97, 101, 109, 111, 112, 125, 128, 130, 136, 150, 153, 155, 162, 166], "maximum_slab_s": 1, "vacuum": [1, 109, 126, 170], "bottom": [1, 4, 85, 86, 91, 92, 109, 126, 146, 147, 170], "top": [1, 4, 85, 86, 91, 92, 109, 126, 153, 161, 170], "minimum_slab_s": 1, "plan": [1, 157], "vacuum_factor": [1, 109, 126, 170], "last": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 138, 148, 150, 167, 168, 170], "primitive_slab": 1, "unrelax": 1, "critic2calcul": [1, 25, 27, 30], "element": [1, 4, 43, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 101, 103, 105, 106, 108, 109, 110, 112, 116, 123, 124, 125, 128, 130, 136, 140, 141, 143, 145, 147, 148, 149, 150, 151, 160, 161, 163, 166, 168, 169, 170], "enumlibcalcul": [1, 33], "implement": [1, 2, 4, 6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 34, 63, 83, 97, 101, 105, 106, 109, 110, 112, 116, 123, 124, 125, 126, 129, 136, 138, 149, 150, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170], "enum": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 34], "librari": [1, 33, 34, 47, 52, 53, 56, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 124, 134, 135, 137, 144, 147, 148, 150, 153, 154, 156, 157, 158, 159, 160, 163, 167], "concentration_restrict": [1, 33], "concentr": [1, 83, 109, 110, 124, 150, 160, 161], "enumer": 1, "have": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 67, 68, 83, 85, 86, 109, 110, 112, 124, 125, 126, 128, 136, 138, 141, 143, 145, 150, 151, 153, 154, 155, 156, 163, 164, 166, 168, 169, 170], "follow": [1, 9, 10, 12, 18, 19, 21, 22, 25, 26, 27, 130, 138, 139, 147, 148, 153, 155, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170], "shape": [1, 2, 58, 61, 62, 83, 86, 91, 138], "numerator1": 1, "numerator2": 1, "denomin": 1, "limit": [1, 2, 4, 58, 76, 109, 110, 124], "rang": [1, 58, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 124, 138, 140, 141, 143, 155, 156, 162, 163], "elements_to_enumer": [1, 33], "consist": [1, 83, 85, 86, 148, 150, 155, 161, 165, 166, 168, 169], "well": [1, 66, 67, 71, 74, 83, 85, 86, 109, 112, 128, 134, 136, 141, 143, 155, 156, 163, 165, 166, 168, 169], "site": [1, 33, 65, 85, 86, 98, 101, 103, 105, 106, 108, 109, 110, 112, 114, 125, 136, 137, 150, 155, 166, 168, 170], "place": [1, 12, 22, 160], "ep": 1, "small": 1, "real": [1, 83, 97, 101], "epsilon": 1, "compar": [1, 59, 60, 62, 85, 86, 88, 89, 90, 93, 109, 110, 124, 125, 136, 137, 149, 152, 156, 160, 162, 168], "avoid": [1, 146, 167], "finit": 1, "precis": [1, 138, 139, 153], "error": [1, 10, 12, 14, 18, 19, 21, 22, 25, 26, 27, 39, 60, 62, 106, 108, 109, 110, 123, 153, 154], "max_cell_s": 1, "super": [1, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 125, 153], "parent": [1, 2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39], "min_cell_s": 1, "minimum": [1, 58, 61, 73, 85, 86, 109, 110, 124, 125, 138, 143], "path_to_makestr": 1, "makestr": [1, 33], "py": [1, 33, 83, 140, 150, 155, 170], "sites_to_enumer": [1, 33], "ni1": [1, 79, 83, 98, 101, 103, 109, 110, 112, 123, 125], "ca0": 1, "also": [1, 2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 85, 86, 138, 140, 141, 142, 143, 146, 147, 148, 150, 151, 152, 154, 155, 156, 160, 165, 166, 167, 168, 169, 170], "structures_hard_cutoff": 1, "creat": [1, 2, 4, 6, 9, 10, 11, 12, 13, 15, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 44, 58, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 109, 112, 121, 123, 124, 126, 128, 129, 137, 140, 141, 143, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168], "rais": [1, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 58, 62, 106, 108, 109, 123, 130, 170], "No": [1, 150, 153], "cutoff": [1, 83, 97, 101], "structures_to_return": 1, "indic": [1, 4, 10, 12, 18, 19, 21, 22, 25, 26, 27, 58, 62, 85, 86, 106, 108, 109, 110, 112, 125, 126, 139, 143, 166, 170], "return": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 43, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 138, 139, 141, 150, 155, 160, 166, 168, 169, 170], "aiida": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 47, 75, 85, 86, 87, 89, 90, 109, 112, 123, 126, 136, 153, 155, 156, 157, 158, 159, 166], "gaussian": [2, 63, 79, 83, 85, 86, 92, 97, 98, 101, 109, 110, 112, 125, 132, 138, 140, 148], "gaussiancubedata": 2, "kwarg": [2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 58, 59, 60, 62, 75, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 115, 120, 125, 170], "orm": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 85, 86, 87, 109, 112, 123, 166, 170], "object": [2, 4, 5, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 41, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 112, 123, 124, 125, 136, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 155, 160, 164, 166, 167, 169, 170], "overview": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 59, 60, 62, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 123, 124, 125, 126, 135, 150, 154, 160, 161, 168, 169], "atomic_charg": 2, "atomic_numb": 2, "atomic_posit": 2, "bohr": 2, "backend": [2, 4, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 123, 125, 136, 143, 147, 148, 150, 156, 164, 168], "get": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 36, 38, 61, 79, 83, 109, 112, 115, 123, 134, 150, 154, 166], "entiti": [2, 4], "backend_ent": [2, 4], "comment": 2, "creator": [2, 4], "doe": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 86, 89, 138, 168], "ctime": [2, 4], "dset_id": 2, "identifi": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 85, 86, 109, 123, 150, 153, 166, 168], "id": [2, 4, 109, 124, 168], "is_stor": [2, 4], "is_valid_cach": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "hook": [2, 4], "exclud": [2, 4, 39, 84, 99, 101, 109, 123, 124, 150], "consid": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 79, 83, 84, 85, 86, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 125, 149, 160], "valid": [2, 4, 33, 122, 125, 130], "cach": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 170], "logger": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "configur": [2, 4, 83, 150, 159], "mtime": [2, 4], "node_typ": [2, 4, 9, 38], "pk": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 155, 170], "primari": [2, 4, 39, 85, 86, 109, 112, 123], "process_typ": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "process": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 36, 39, 79, 80, 83, 125, 146, 155, 156, 160, 166], "describ": [2, 4, 83, 139, 149, 152, 156, 160, 162, 166], "titl": [2, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 143, 145, 148, 163], "uuid": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 85, 86, 109, 112, 123, 155, 170], "collect": [2, 4, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 58, 62, 109, 110, 112, 123, 125, 126, 150, 166, 169, 170], "class_node_typ": [2, 4], "sub": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 136, 140, 141, 142, 143, 145, 146, 149, 150, 152, 156, 164], "clone": [2, 4], "convert": [2, 4, 128, 135, 138], "object_format": [2, 4], "arg": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 85, 86, 89, 92, 110, 120], "structuredata": [2, 4, 11, 13, 24, 26, 109, 112, 123, 166], "python": [2, 4, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 43, 55, 83, 97, 101, 109, 112, 129, 150, 154, 155, 156, 158, 159, 160, 161, 166, 168, 169, 170], "entry_point": [2, 4, 155], "entri": [2, 4, 6, 11, 30, 33, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 124, 125, 155, 163, 169], "associ": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "export": [2, 4, 109, 112, 150, 155, 168], "fileformat": [2, 4], "overwrit": [2, 4, 101, 102, 109, 123, 170], "save": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "match": [2, 4, 65, 79, 125, 128, 155, 169], "filter": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 150, 166], "get_collect": [2, 4], "get_cont": 2, "get_cube_data": 2, "get_descript": [2, 4], "get_export_format": [2, 4], "get_structur": [2, 109, 123, 166], "underli": [2, 39, 109, 126, 167], "importfil": [2, 4], "fname": [2, 4], "importstr": [2, 4], "inputstr": [2, 4], "other": [2, 4, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 128, 138, 141, 143, 146, 150, 160, 161, 162, 163], "instanc": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 83, 86, 89, 138, 146, 167], "attribut": [2, 4, 6, 8, 10, 12, 18, 19, 21, 22, 30, 32, 33, 34, 58, 62, 82, 84, 86, 89, 109, 110, 124, 136, 138, 140, 141, 142, 143, 145, 148, 149, 150, 160, 164, 168, 169, 170], "open_cub": 2, "set_from_fil": 2, "file_obj": 2, "set_sourc": [2, 4], "its": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 83, 85, 86, 97, 101, 109, 125, 126, 134, 143, 145, 154, 157, 160, 166, 168], "repositori": [2, 4, 6, 11, 30, 33, 156], "store_al": [2, 4], "togeth": [2, 4], "storagebackend": [2, 4], "backendentitytyp": [2, 4], "datetim": [2, 4], "str": [2, 4, 6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 38, 39, 58, 59, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 115, 116, 123, 124, 125, 126, 128, 129, 130, 134, 135], "int": [2, 4, 6, 9, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 58, 63, 73, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 112, 114, 116, 123, 124, 125, 126, 129, 130, 134, 148], "guarante": [2, 4], "uniqu": [2, 4, 39, 164], "amongst": [2, 4], "same": [2, 4, 6, 8, 11, 24, 30, 32, 33, 34, 67, 68, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 103, 109, 110, 112, 116, 125, 126, 136, 140, 141, 143, 148, 150, 151, 155, 160, 163, 164, 165, 166, 168], "": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 59, 62, 75, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 106, 108, 109, 110, 112, 123, 125, 140, 141, 143, 144, 150, 155, 156, 160, 161, 163, 166, 168, 170], "bool": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 61, 62, 65, 71, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 102, 103, 105, 106, 108, 109, 110, 112, 116, 123, 124, 125, 126, 128, 134, 148, 168], "assum": [2, 4, 85, 86, 106, 108, 153], "_valid_cache_kei": [2, 4], "explicitli": [2, 4], "subclass": [2, 4], "overrid": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "logic": [2, 4, 8, 10, 12, 18, 19, 21, 22, 24, 25, 26, 27, 32, 155], "probabl": [2, 4, 150], "log": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "princip": [2, 4, 85, 86, 140, 141, 143], "db_name": [2, 4], "db_uri": [2, 4], "uri": [2, 4], "perman": [2, 4], "version": [2, 4, 6, 11, 30, 33, 83, 109, 110, 112, 124, 125, 141, 150, 155, 158, 159, 170], "source_md5": [2, 4], "md5": [2, 4], "checksum": [2, 4], "human": [2, 4], "readabl": [2, 4], "free": [2, 4, 94], "form": [2, 4, 83, 132], "licens": [2, 4], "see": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 63, 83, 132, 150, 151, 152, 153, 155, 166], "_valid": [2, 4], "represent": [2, 4, 106, 108, 128, 138, 139, 159, 161, 166, 169], "nodecollect": [2, 4], "deprec": [2, 4, 155], "here": [2, 4, 8, 24, 32, 109, 124, 139, 140, 141, 143, 149, 150, 152, 153, 154, 155, 156, 160, 161, 162, 163, 170], "backward": [2, 4], "compat": [2, 4, 109, 124], "warn": [2, 4, 150], "nodebas": [2, 4], "unstor": [2, 4, 10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "collectiontyp": [2, 4], "access": [2, 4, 125, 148, 150, 168, 169], "importlib_metadata": [2, 4], "entrypoint": [2, 4], "isn": [2, 4], "t": [2, 4, 58, 62, 138, 144, 163, 169], "known": [2, 4, 138], "present": [2, 4, 59, 62, 109, 112, 123, 163, 168], "try": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 128, 150, 156, 163], "extens": [2, 4, 152, 156, 164, 168], "found": [2, 4, 125, 129, 150, 153, 155, 156, 160, 161, 163, 170], "_exportcont": [2, 4], "classmethod": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 109, 112, 135], "current": [2, 4, 39, 138, 152, 153, 155, 156, 169], "profil": [2, 4, 155], "A": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 83, 85, 86, 106, 108, 136, 139, 140, 141, 142, 143, 144, 152, 154, 155, 156, 160, 163, 166, 168], "conent": 2, "arrai": [2, 4, 58, 59, 60, 62, 63, 81, 82, 83, 85, 86, 90, 97, 101, 109, 123, 132, 138, 139, 140, 142, 143, 148, 152], "length": [2, 79, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 105, 106, 108, 109, 112, 135, 146, 165, 166, 168], "constructor": [2, 4], "sinc": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 145, 150, 170], "v3": [2, 4, 155], "handl": [2, 6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 46, 115, 123, 129, 154, 156, 159], "cannot": [2, 4, 6, 11, 30, 33], "anymor": [2, 4, 160], "success": [2, 4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "storag": [2, 4, 153, 154, 166], "those": [2, 4, 10, 12, 18, 19, 21, 22, 25, 26, 27, 163], "automat": [2, 4, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 145, 154, 156, 170], "remain": [2, 4, 125, 168], "incom": [2, 4], "linkswil": [2, 4], "gaussian_cube_data": [3, 64], "surface_data": [3, 64], "surfacedata": [4, 13, 86, 93, 109, 126, 170], "aperiodic_dir": 4, "2": [4, 57, 61, 77, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 101, 109, 110, 112, 125, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 160, 163, 164, 165, 166, 168, 169, 170], "miller_indic": [4, 86, 93, 109, 126, 170], "bottom_terminating_structur": 4, "miller": [4, 109, 126, 170], "facet": [4, 86, 93, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 170], "repeating_structur": [4, 170], "repeat": [4, 170], "surface_area": [4, 86, 93], "area": [4, 60, 62, 83, 86, 91, 93, 97, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 132, 146, 152], "top_terminating_structur": 4, "top_terminating_structure_nsym": 4, "symmetr": [4, 109, 126, 170], "set_bottom_terminating_structur": 4, "is_cartesian": [4, 109, 112, 123, 168, 170], "set_repeating_structur": 4, "translational_vector": 4, "set_top_terminating_structur": 4, "set_top_terminating_structure_nsym": 4, "nest": [4, 67, 68, 73, 76, 83, 85, 86, 87, 90, 109, 112, 123, 129, 132, 136, 140, 142, 143, 163, 168], "either": [4, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 109, 112, 123, 138, 152, 153, 168], "cartesian": [4, 109, 112, 123, 168], "3x3": [4, 85, 86, 109, 123], "translat": [4, 109, 112, 134, 170], "shift": [4, 9, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 138, 139, 140, 141, 143, 163], "layer": [4, 170], "util": [5, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 35, 37, 64, 72, 80, 136, 143, 160, 168], "builder": [5, 6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 86, 93], "savekei": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "thing": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "bundl": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "member": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 123, 150], "calc_id": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "empti": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 62], "were": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 136], "wa": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 83, 138, 150, 151, 170], "processnod": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "itself": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 109, 112, 146, 168], "runner": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "correspond": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 58, 59, 62, 79, 85, 86, 92, 109, 110, 112, 125, 126, 134, 136, 138, 140, 141, 143, 146, 148, 149, 150, 152, 162, 164, 166, 168], "build_process_typ": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "decode_input_arg": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "encod": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "decod": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "thei": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 136, 151, 166], "came": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "spec": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 34, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "outlin": [6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33], "encode_input_arg": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "mai": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 125, 141, 143, 160, 163, 169, 170], "exit_cod": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "exit": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 29, 30, 32, 33, 34], "processspec": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "exposed_input": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "process_class": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "agglomer": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "gather": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "expos": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "under": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 150], "exposed_output": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "emit": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "get_build": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "get_exit_status": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "exit_code_label": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "statu": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 155], "integ": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 153, 155, 165, 166], "get_import": [6, 11, 30, 33], "entry_point_nam": [6, 11, 30, 33], "calcjobimport": [6, 11, 30, 33], "get_or_create_db_record": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "happen": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "get_parent_calc": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "get_provenance_inputs_iter": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "get_state_class": [6, 11, 30, 33], "constant": [6, 9, 11, 30, 33, 85, 86], "init": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "check": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 28, 30, 33, 36, 58, 62, 65, 83, 106, 108, 128, 136, 138, 150, 156, 164, 169], "kill": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "msg": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "children": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "load_instance_st": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "saved_st": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "load_context": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_creat": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_ent": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "from_stat": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "enter": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "new": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 83, 86, 89, 105, 106, 108, 109, 123, 125, 136, 150, 154, 155, 156, 158, 163, 166, 168, 169], "checkpoint": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "updat": [6, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 25, 26, 27, 28, 30, 33, 83, 136, 150], "latest": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 150, 153, 155], "timestamp": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_except": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "exc_info": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "except": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 110, 170], "report": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 156], "stack": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "trace": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 154], "info": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_finish": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_output_emit": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "output_port": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_paus": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "paus": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "so": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 61, 83, 150, 153, 158, 160, 163, 169], "on_plai": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "unpaus": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "on_termin": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "cleanup": [6, 11, 30, 33], "delet": [6, 11, 30, 33, 109, 110, 112, 116, 125, 166, 168], "calul": [6, 11, 30, 33], "out": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 85, 86, 92, 145, 148, 150, 153, 163, 166], "out_mani": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "out_dict": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "multipl": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 75, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 123, 125, 126, 138, 145, 152, 155, 167, 169, 170], "retrieved_temporary_fold": [6, 8, 11, 24, 30, 32, 33, 34], "existing_exit_cod": [6, 11, 30, 33], "parse_retrieved_output": [6, 11, 30, 33], "parse_scheduler_output": [6, 11, 30, 33], "prepare_for_submiss": [6, 11, 30, 33], "presubmit": [6, 11, 30, 33], "readi": [6, 11, 30, 33, 146, 156], "cluster": [6, 11, 30, 33, 99, 101], "messag": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "dbloghandl": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "save_instance_st": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "out_stat": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "save_context": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "set_statu": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "we": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 153, 155, 156, 160, 163, 164, 165, 166, 167, 168, 169, 170], "reflect": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 132], "proxi": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "spec_metadata": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "spec_opt": [6, 11, 30, 33], "submit": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 39, 155, 156], "static": [6, 11, 13, 30, 33], "immedi": [6, 11, 30, 33], "update_output": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "single_output_linknam": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "link_label_retriev": [6, 11, 30, 33], "plumpi": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "attributesfrozendict": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "becaus": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 150, 153], "ensur": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 106, 108, 160], "extendeddict": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "attributedict": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "calcjobnod": [6, 8, 11, 24, 30, 32, 33, 34], "could": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 106, 108, 153, 160, 170], "made": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "order": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 83, 86, 87, 98, 101, 104, 128, 145, 150, 153, 160, 161, 163, 166, 167, 168, 169, 170], "would": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 79, 83, 98, 101, 103, 109, 110, 112, 125], "metaclass": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "bug": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 136, 156], "org": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 124, 132, 150], "issue20659": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "dict": [6, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 65, 66, 67, 68, 69, 70, 71, 73, 74, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 103, 104, 109, 110, 112, 115, 121, 123, 124, 125, 126, 128, 129, 134, 166], "serial": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "exitcodesnamespac": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "getitem": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "getattr": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "oper": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 65, 77, 78, 134, 159, 168], "exitcod": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34], "addition": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 110, 112, 125, 141, 145, 150, 162, 163, 165, 166, 169], "tupl": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 62, 76, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 101, 103, 106, 108, 109, 110, 112, 116, 121, 123, 124, 125, 126, 134, 136, 148, 166, 168], "whose": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 140], "portnamespac": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "search": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 79, 83, 99, 101, 102, 106, 108, 109, 110, 112, 125, 126, 160], "lower": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 61], "ly": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "take": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 79, 85, 86, 87, 149, 150, 156, 160, 170], "preced": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "processbuild": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "attributeerror": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 170], "least": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 109, 123, 167], "howev": [6, 11, 30, 33, 150, 155, 163, 166, 168], "overridden": [6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33], "inputport": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "hashabl": [6, 11, 30, 33], "process_st": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "wait": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 38, 109, 124], "allow": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 60, 62, 109, 123, 136, 138, 148, 155, 156, 161, 169], "modifi": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 145], "make": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 125, 146, 150, 154, 158, 159, 160, 169, 170], "sure": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 158], "_node": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "otherwis": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 85, 86, 125, 136, 160, 168], "invalidates_cach": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "keyword": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 123, 138, 141, 150, 163, 166, 168, 169, 170], "effect": [6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 149], "mutablemap": [6, 11, 30, 33], "persist": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "loadsavecontext": [6, 11, 30, 33], "tracebacktyp": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "sy": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "traceback": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 170], "done": [6, 10, 11, 12, 18, 19, 21, 22, 25, 26, 27, 30, 33, 141, 143, 157, 158, 160], "seal": [6, 11, 30, 33], "put": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 85, 86, 87], "insid": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "onc": [6, 11, 30, 33, 39, 79, 83, 125, 146, 150, 154, 160, 163], "temporari": [6, 11, 30, 33], "sandboxfold": [6, 11, 30, 33], "write": [6, 11, 30, 33, 65, 67, 72, 75, 78, 115, 151, 159, 163], "caller": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "stop": [6, 11, 30, 33, 153], "invok": [6, 11, 30, 33], "Then": [6, 11, 30, 33, 158], "upload": [6, 11, 30, 33], "transport": [6, 11, 30, 33], "task": [6, 11, 13, 30, 33, 39, 84, 110, 125, 153, 160, 166], "start": [6, 11, 30, 33, 38, 39, 155, 158, 164, 165, 170], "dry": [6, 11, 30, 33], "process_spec": [6, 11, 30, 33], "trigger": [6, 11, 30, 33], "skip": [6, 11, 30, 33], "It": [6, 8, 11, 24, 30, 32, 33, 34, 109, 123, 138, 150, 154, 156, 158, 160, 163, 166, 168, 170], "construct": [6, 11, 30, 33, 106, 108, 125, 170], "tell": [6, 11, 30, 33], "caus": [6, 11, 30, 33, 170], "noth": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33], "self": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 39, 83, 110, 170], "framework": [7, 23, 31, 35, 136, 137, 160, 161, 162, 164], "chargemolpars": 8, "preconfigur": [8, 24, 32, 34], "regist": [8, 24, 32, 34], "get_outputs_for_pars": [8, 24, 32, 34], "link_label": [8, 24, 32, 34], "receiv": [8, 24, 32, 169], "parse_from_nod": [8, 24, 32, 34], "directli": [8, 10, 12, 18, 19, 21, 22, 24, 25, 26, 27, 32, 34, 125, 141, 143, 152, 156, 157, 161, 168, 170], "folderdata": [8, 24, 32, 34], "mark": [8, 24, 32, 34, 110, 112, 148], "pass_to_pars": [8, 24, 32, 34], "modificationnotallow": [8, 24, 32, 34], "calcfunctionnod": [8, 24, 32, 34], "still": [8, 24, 32, 34, 85, 150, 168], "disabl": [8, 24, 32, 34], "imposs": [8, 24, 32, 34], "afterward": [8, 24, 32, 34, 138], "expect": [8, 24, 32, 34, 132, 138, 139, 163, 165, 166, 168], "produc": [8, 24, 32, 34, 156, 159, 163, 169], "test": [8, 24, 32, 34, 84, 91, 139, 144, 147, 148, 155, 156, 159, 163, 164, 165, 166, 170], "mock": [8, 24, 32, 34], "re": [8, 24, 32, 34], "retrieved_temporary_list": [8, 24, 32, 34], "auxiliari": [9, 20, 28, 39, 40], "calc_nr_explicit_electron": 9, "nelectron": 9, "calculate_added_mo": 9, "3": [9, 57, 83, 85, 86, 87, 95, 97, 101, 104, 109, 110, 112, 124, 125, 128, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 158, 160, 163, 164, 165, 166, 168, 169, 170], "return_n_electron": 9, "temperatur": [9, 73, 94], "formula": [9, 65, 86, 89, 93, 109, 110, 112, 124, 128, 136, 150, 166, 168, 169], "max": [9, 83, 97, 101, 138, 139, 152], "10": [9, 38, 39, 59, 60, 62, 73, 79, 81, 82, 83, 85, 86, 95, 97, 98, 101, 103, 104, 109, 110, 112, 124, 125, 126, 130, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 155, 160, 161, 163, 166, 168, 169, 170], "electronic_temperatur": 9, "1000": [9, 73, 94, 109, 124, 148, 150], "float": [9, 38, 58, 59, 60, 61, 62, 63, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 116, 121, 124, 125, 126, 128, 129, 130, 132, 135, 149, 155, 163], "empir": 9, "added_mo": 9, "create_aiida_nod": [9, 38], "aiida_nod": [9, 38, 109, 123], "estimate_comp_resourc": 9, "resources_dict": 9, "coeff": 9, "exp": [9, 83, 97, 101, 148], "12": [9, 85, 86, 138, 141, 143, 144, 145, 146, 148, 150, 155, 166, 168], "estim": [9, 83, 160, 161], "ntask": 9, "nelec": 9, "give": [9, 79, 125, 147, 160, 161, 165, 166, 168, 169, 170], "num_mpiprocs_per_machin": 9, "coeffici": 9, "lead": [9, 83, 138, 141, 143], "term": 9, "expon": 9, "return_rec_space_eigenvalu": 9, "cp2k_output": 9, "calcfunt": 9, "summar": 9, "1st": 9, "brillouin": [9, 95], "zone": [9, 95], "return_runtime_stat": 9, "calcjob_output_paramet": 9, "runtim": [9, 39], "statist": 9, "return_scf_paramet": 9, "return_work_chain_info": 9, "set_xc_funct": 9, "input_dict": 9, "paramt": 9, "parmat": 9, "base_core_work_chain": [10, 18, 19, 21, 25, 26, 27], "_basecoreworkchain": [10, 18, 19, 21, 25, 26, 27], "ctx": [10, 12, 13, 18, 19, 20, 21, 22, 25, 26, 27, 28], "context": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "loop": [10, 12, 18, 19, 21, 22, 25, 26, 27, 38, 167], "check_scf_converg": [10, 12, 18, 19, 21, 22, 25, 26, 27], "calc": [10, 12, 18, 19, 21, 22, 25, 26, 27], "convergenc": [10, 12, 18, 19, 21, 22, 25, 26, 27], "increment": [10, 12, 18, 19, 21, 22, 25, 26, 27], "get_output": [10, 12, 18, 19, 21, 22, 25, 26, 27], "get_process_handl": [10, 12, 18, 19, 21, 22, 25, 26, 27], "get_process_handlers_by_prior": [10, 12, 18, 19, 21, 22, 25, 26, 27], "taken": [10, 12, 18, 19, 21, 22, 25, 26, 27, 84, 149], "initialize_scf_paramet": [10, 12, 18, 19, 21, 22, 25, 26, 27], "inspect_process": [10, 12, 18, 19, 21, 22, 25, 26, 27], "analys": [10, 12, 18, 19, 21, 22, 25, 26, 27, 85, 86, 94, 118, 137, 152, 156, 162, 163, 164, 166, 168, 169], "previou": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 85, 86, 140, 141, 142, 143, 150, 162], "is_process_handl": [10, 12, 18, 19, 21, 22, 25, 26, 27], "process_handler_nam": [10, 12, 18, 19, 21, 22, 25, 26, 27], "on_exit": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "on_run": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "on_wait": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "await": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "post_process": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "run_process": [10, 12, 18, 19, 21, 22, 25, 26, 27], "next": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 39, 140, 141, 143, 155, 158], "setup": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 83, 97, 101], "flow": [10, 12, 18, 19, 21, 22, 25, 26, 27], "baserestartworkchain": [10, 12, 18, 19, 21, 22, 25, 26, 27], "setup_input": [10, 12, 18, 19, 21, 22, 25, 26, 27], "setup_wc_specific_input": [10, 12, 18, 19, 21, 22, 25, 26, 27], "should_run_process": [10, 12, 18, 19, 21, 22, 25, 26, 27], "switch_to_atomic_scf_guess": [10, 18, 19, 25, 27], "switch": [10, 12, 18, 19, 21, 22, 25, 26, 27, 143, 147, 163, 168], "guess": [10, 18, 19, 25, 27], "do": [10, 18, 19, 24, 25, 27, 58, 59, 62, 85, 86, 138, 139, 141, 142, 143, 150, 152, 158, 160, 169], "switch_to_broyden_mix": [10, 12, 18, 19, 21, 22, 25, 26, 27], "broyden": [10, 12, 18, 19, 21, 22, 25, 26, 27], "scheme": [10, 12, 18, 19, 21, 22, 25, 26, 27, 153], "numer": [10, 12, 18, 19, 21, 22, 25, 26, 27, 29, 85, 86, 101, 102, 109, 126, 153, 159, 160, 170], "instabl": [10, 12, 18, 19, 21, 22, 25, 26, 27], "pulai": [10, 12, 18, 19, 21, 22, 25, 26, 27], "switch_to_open_shell_k": [10, 12, 18, 19, 21, 22, 25, 26, 27], "turn": [10, 12, 18, 19, 21, 22, 25, 26, 27], "odd": [10, 12, 18, 19, 21, 22, 25, 26, 27, 153], "to_context": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "wc_specific_post_process": [10, 12, 18, 19, 21, 22, 25, 26, 27], "workchainnod": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "note": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 76, 105, 108, 136, 150, 160], "intern": [10, 12, 18, 19, 21, 22, 25, 26, 27, 58, 59, 60, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 115, 124, 125, 134, 136, 138, 139, 153, 164, 166, 168, 169], "level": [10, 12, 18, 19, 21, 22, 25, 26, 27, 85, 86, 140], "calcfunct": [10, 12, 18, 19, 21, 22, 25, 26, 27, 38, 155], "lose": [10, 12, 18, 19, 21, 22, 25, 26, 27], "functiontyp": [10, 12, 18, 19, 21, 22, 25, 26, 27], "abort": [10, 12, 18, 19, 21, 22, 25, 26, 27], "fail": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 39, 150, 153, 170], "unhandl": [10, 12, 18, 19, 21, 22, 25, 26, 27], "failur": [10, 12, 18, 19, 21, 22, 25, 26, 27], "relaunch": [10, 12, 18, 19, 21, 22, 25, 26, 27], "twice": [10, 12, 18, 19, 21, 22, 25, 26, 27], "row": [10, 12, 18, 19, 21, 22, 25, 26, 27, 59, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 148, 163, 165], "matrix": [10, 12, 18, 19, 21, 22, 25, 26, 27, 43, 83, 97, 101, 109, 124, 132, 134, 153], "action": [10, 12, 18, 19, 21, 22, 25, 26, 27], "ye": [10, 12, 18, 19, 21, 22, 25, 26, 27], "boolean": [10, 12, 18, 19, 21, 22, 25, 26, 27, 148, 166, 168], "abc": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 58, 62, 109, 110, 112, 125], "tocontext": [10, 12, 18, 19, 21, 22, 25, 26, 27], "long": [10, 18, 19, 21, 25, 26, 27], "yet": [10, 18, 19, 21, 25, 26, 27, 39, 71, 74, 109, 123, 143], "exceed": [10, 13, 18, 19, 21, 25, 26, 27, 28], "workchainspec": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "conveni": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 163, 166], "syntact": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "sugar": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "interstep": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27], "assign": [10, 12, 13, 18, 19, 21, 22, 25, 26, 27, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 166, 168], "bandsdata": [11, 24, 85, 86], "xydata": [11, 24], "base_opt_work_chain": [12, 22], "_baseoptimizationworkchain": [12, 22], "initialize_opt_paramet": [12, 22], "opt_post_process": [12, 22], "resubmit_unconverged_geometri": [12, 22], "resubmit": [12, 22], "unconverg": [12, 22], "tighter": [12, 22], "resubmit_unfinished_calcul": [12, 22], "walltim": [12, 22, 153], "hit": [12, 22], "interrupt": [12, 22], "set_additional_optimization_p": [12, 22], "holder": [12, 22], "stress": 12, "tensor": [12, 161], "analyst": 12, "algorithm": [12, 22, 149, 170], "advanc": 13, "combin": [13, 82, 85, 86, 139, 140, 141, 142, 143, 145, 155, 160, 161, 162], "basic": [13, 148, 164], "enable_persist": 13, "dft_cell_opt": 13, "electronic_structur": 13, "find_scf_paramet": 13, "post": [13, 25, 27, 156], "routin": [13, 17, 106, 153, 156, 159], "run_el_prop_wc": 13, "task_label": [13, 20, 39], "work_chain": [13, 39], "extra_input": 13, "set_input_paramet": 13, "work_chain_build": 13, "input_kei": 13, "child": 13, "should_run_cell_opt": 13, "find_scf_p": [13, 153], "findscfparamet": 13, "geo_opt": [13, 153], "geoopt": 13, "geo_preopt": 13, "inspect_find_scf_p_result": 13, "inspect_geo_opt_result": 13, "should_run_add_calc": 13, "should_run_slab_conv": 13, "fulfil": [13, 28], "bandstructurewc": 13, "celloptwc": 13, "eigenvalueswc": 13, "findscfparameterswc": 13, "geooptwc": 13, "pdoswc": 13, "partialchargeswc": 13, "cwd": [15, 16, 17, 20, 106, 116], "full": [19, 134, 168], "statement": 19, "elprop_setup": 20, "set_ctx_parameters_from_protocol": 20, "protocol_dict": 20, "general_paramet": 20, "auxiliary_funct": 23, "band_structure_work_chain": 23, "cell_opt_work_chain": 23, "combined_work_chain": 23, "core_work_chain_handl": 23, "core_work_chain_input": 23, "core_work_chain_opt": 23, "core_work_chain_scf": 23, "cube_work_chain": 23, "eigenvalues_work_chain": 23, "el_properties_util": 23, "find_scf_p_work_chain": 23, "geo_opt_work_chain": 23, "partial_charges_work_chain": 23, "pdos_work_chain": 23, "planar_fields_work_chain": 23, "surface_opt_util": 23, "work_chain_spec": 23, "cp2kpartialchargespars": 24, "_cp2kbasepars": 24, "design": [24, 153, 154, 155, 164, 168], "extra_output_funct": 24, "_parse_gaussian_cub": 24, "parser_typ": [24, 67, 69], "partial_charg": [24, 67, 69, 86, 145, 153], "cp2kstandardpars": 24, "_parse_pdo": 24, "cp2ktrajectorypars": 24, "motion": 24, "trajectori": [24, 67, 69], "gcubedata": 24, "setup_external_partial_charge_analysi": 25, "extern": [25, 27, 46, 96, 107, 108, 109, 110, 112, 125, 136, 166], "deriv": [26, 161], "2d": [27, 58, 59, 62, 95, 152], "setup_critic2_calcul": 27, "surfopt_setup": 28, "surfopt_should_run_add_calc": 28, "surfopt_should_run_slab_conv": 28, "update_surf_slab": 28, "create_surface_slab": [28, 38, 170], "core_work_chain_exit_cod": 29, "numerical_p_spec": 29, "seekpath_p_spec": 29, "structural_p_spec": 29, "critic2pars": 32, "validate_elements_to_enumer": 33, "_": [33, 128, 148], "validate_input": 33, "elements_to_emnumer": 33, "validate_makestr_path": 33, "validate_sites_to_enumer": 33, "validate_structur": 33, "fraction": [33, 83, 128, 146, 160], "occup": [33, 66, 67, 71, 74, 85, 86, 140, 141, 143], "enumlibpars": 34, "poscar": 34, "strucuredata": 34, "enum_calcjob": 35, "enum_pars": 35, "enumlibcalcjob": 36, "check_kind": 36, "kind_nam": 36, "get_kindnam": 36, "to_enumer": 36, "workflow_build": [37, 64, 155], "sever": [38, 39, 67, 68, 106, 108, 109, 110, 112, 123, 125, 129, 131, 147, 148, 149, 153, 155, 156, 159, 160, 162, 163, 164, 166, 167, 169], "concatenate_workflow_result": 38, "workflow_results1": 38, "workflow_results2": 38, "map_result1": 38, "map_result2": 38, "parent_nod": [38, 39, 155], "concaten": [38, 59, 62], "panda": [38, 39, 47, 83, 86, 89, 93, 109, 123, 150, 155, 159, 166], "frame": [38, 39, 86, 89, 93, 109, 123, 150, 166], "datafram": [38, 39, 83, 86, 89, 93, 109, 123, 125, 150, 155, 166], "first": [38, 58, 59, 60, 62, 85, 86, 125, 136, 138, 139, 141, 143, 144, 145, 146, 149, 150, 151, 155, 158, 160, 164, 165, 166, 168, 170], "connect": [38, 150, 169], "both": [38, 85, 86, 109, 126, 138, 150, 151, 152, 153, 155, 166, 168], "nr_layer": [38, 109, 126, 170], "get_results_cp2k_legacy_wc": 38, "aiida_group_label": 38, "depreci": [38, 85, 86, 89, 92, 105, 108, 109, 110, 112, 125, 136, 150], "electronicproperti": 38, "obtain_value_from_aiida_nod": 38, "obtain": [38, 79, 85, 86, 109, 110, 112, 124, 125, 130, 140, 149, 150, 166, 167, 168, 170], "seekpath_structure_analysi": 38, "wrap": [38, 105, 106, 108, 109, 112, 123, 152, 167, 168], "workflow_queu": 38, "maxrun_workflow": 38, "running_workflows_list": 38, "waiting_tim": 38, "helper": [38, 84], "control": [38, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 136, 155, 163, 166, 170], "simultan": 38, "parallel": [38, 83, 125, 160, 166], "minut": 38, "workflowbuild": [39, 154, 155, 156], "workflowprotocolerror": 39, "incomplet": 39, "inconsist": 39, "with_traceback": [39, 110], "tb": [39, 110], "__traceback__": [39, 110], "multipleworkflowbuild": [39, 154, 156], "aiida_group": 39, "graph_attribut": [39, 155], "graph_attr": [39, 155], "6": [39, 57, 83, 95, 97, 101, 128, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 155, 160, 163, 166, 168, 169, 170], "use_uuid": [39, 109, 112, 123], "_baseworkflowbuild": 39, "manag": [39, 154, 155, 156, 159], "worklfow": 39, "graphiz": 39, "graph": [39, 47, 101, 159], "task_queu": 39, "user_input": [39, 155], "add_parent_nod": [39, 155], "add_to_task_queu": [39, 155], "run_typ": [39, 155], "adopt_input_nodes_from_workflow": 39, "execute_task_queu": [39, 155], "interv": [39, 150, 155], "node_id": 39, "seri": 39, "consecut": [39, 155, 160], "from_fil": [39, 109, 112, 136, 149, 155, 168], "file_nam": [39, 65, 66, 67, 69, 70, 71, 74, 77], "generate_input": [39, 155], "generate_provenance_graph": [39, 155], "parent_node_index": 39, "import_parent_nodes_from_aiida_db": 39, "group_label": [39, 109, 123, 126, 130, 166, 170], "import_parent_nodes_from_pandas_df": 39, "data_fram": [39, 86, 89, 93, 109, 123], "extract": [39, 65, 83, 86, 93, 142, 153, 156], "column": [39, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 123, 138, 163, 165, 166], "reset_task_queu": 39, "reset": [39, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 165], "return_process_nod": [39, 155], "return_result": [39, 155], "return_runtim": 39, "return_workflow_st": [39, 155], "unformat": 39, "run_task": [39, 155], "set_user_input": [39, 155], "input_port": 39, "submit_task": [39, 155], "to_fil": [39, 109, 112, 136, 155, 168], "upper": [39, 61], "bound": 39, "yaml": [39, 64, 72, 73, 139, 142, 152, 155, 159], "tool": [39, 154], "visual": [39, 58, 62, 138, 139, 140, 141, 142, 143, 145, 146, 150, 151, 156, 159], "structure_nod": [39, 109, 112], "aiida_uuid": 39, "univers": 39, "themselv": 39, "styler": 39, "complex": [39, 145], "completed_task": [39, 155], "failed_task": [39, 155], "running_task": [39, 155], "determine_workflow_st": [39, 155], "ones": 39, "returnedbuild": 39, "proc_nod": 39, "aiidacod": 39, "wrapper": [41, 47, 54, 57, 97, 125, 153], "ase": [41, 109, 112, 123, 130, 134, 135, 136, 151, 166, 168, 170], "Ase": 42, "interfac": [42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 86, 91, 109, 112, 124, 136, 142, 147, 150, 155, 156, 157, 159, 160, 162, 163, 164, 166, 167], "calc_acsf_descriptor": 43, "r_cut": [43, 83, 97, 101], "g2_param": [43, 83, 97, 101], "g3_param": [43, 83, 97, 101], "g4_param": [43, 83, 97, 101], "g5_param": [43, 83, 97, 101], "spars": [43, 83, 97, 101], "dscribe_n_job": [43, 83, 97, 101], "dscribe_only_physical_cor": [43, 83, 97, 101], "acsf": [43, 83, 97, 101, 161], "descriptor": [43, 83, 97, 101, 161], "calc_interaction_matrix": 43, "matrix_typ": [43, 83, 97, 101], "n_atoms_max": [43, 83, 97, 101], "enforce_r": [43, 83, 97, 101], "permut": [43, 83, 97, 101], "sigma": [43, 63, 83, 85, 86, 92, 97, 98, 101, 109, 110, 112, 119, 125, 132, 138, 140, 150, 160], "seed": [43, 83, 97, 101], "ewald_accuraci": [43, 83, 97, 101], "ewald_w": [43, 83, 97, 101], "ewald_r_cut": [43, 83, 97, 101], "ewald_g_cut": [43, 83, 97, 101], "ewald_a": [43, 83, 97, 101], "interact": [43, 83, 97, 101, 143, 150, 156, 161, 163], "calc_mbtr_descriptor": 43, "weight": [43, 79, 83, 97, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125], "normalize_gaussian": [43, 83, 97, 101], "mbtr": [43, 83, 97, 101, 161], "calc_soap_descriptor": 43, "n_max": [43, 83, 97, 101], "l_max": [43, 83, 97, 101], "rbf": [43, 83, 97, 101], "compress": [43, 83, 97, 101], "averag": [43, 83, 86, 87, 97, 101], "soap": [43, 83, 97, 101, 161], "return_descriptor": 43, "obj": 43, "networkx": [44, 100, 101, 159], "graphviz": [44, 100, 101, 155, 159], "h5py": [45, 159], "third": [47, 150], "parti": 47, "ase_atom": [47, 109, 112, 123], "ase_surfac": 47, "dscribe": [47, 83, 97, 101, 159, 161], "hdf5": [47, 109, 123, 159, 166], "import_opt_depend": 47, "mp": [47, 144, 150, 169], "mp_openapi": 47, "optimad": [47, 109, 124, 169], "oqmd": [47, 150, 169], "phonopi": [47, 64, 72, 94, 137, 156, 159, 162], "pymatgen": [47, 109, 112, 123, 124, 150, 159], "pyxtal": [47, 109, 124, 159], "materi": [48, 49, 51, 79, 86, 89, 109, 124, 137, 151, 156, 159, 162, 168, 169], "onlin": [48, 49, 50, 109, 124, 144, 150, 156, 159, 166, 167], "openapi": [49, 109, 124], "queri": [50, 109, 123, 124, 137, 154, 166, 169], "quantum": [51, 74, 85, 86, 109, 124, 136, 137, 140, 141, 142, 144, 146, 156, 159, 162, 169], "nr_of_space_group": 55, "space_group_limit": 55, "centrosymmetric_pg": 57, "m": [57, 157, 168], "mmm": 57, "4": [57, 83, 85, 86, 87, 95, 97, 101, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 160, 163, 164, 165, 166, 168, 169, 170], "3m": 57, "discretizedaxi": [58, 62, 138, 139, 152], "axis_typ": [58, 62, 139, 152], "axi": [58, 62, 63, 76, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 139, 140, 152, 162, 164], "1d": [58, 62, 83, 97, 101], "plot": [58, 59, 62, 64, 76, 136, 137, 139, 150, 151, 152, 155, 156, 159, 165, 171], "y": [58, 59, 60, 61, 62, 63, 76, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 132, 136, 138, 139, 140, 143, 144, 147, 148, 152, 155, 163, 164], "discretization_method": [58, 62, 138, 139, 152], "is_empti": [58, 62], "dimens": [58, 62, 73, 109, 124], "numpi": [58, 59, 60, 62, 63, 81, 82, 83, 138, 139, 140, 142, 143, 148, 152, 156, 159, 160], "discretize_axi": [58, 62, 138, 139, 152], "transpos": [58, 62], "merg": [58, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 129, 163, 166], "valueerror": [58, 62, 106, 108, 130], "callabl": [58, 62, 109, 110, 112, 125], "chosen": [58, 62, 83, 97, 101, 138, 143, 145, 155], "accept": [58, 62], "_available_discretization_method": [58, 62], "discretizedgrid": [58, 60, 62, 138, 139], "plot_grid": [58, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 138, 139], "create_grid": [58, 62, 138, 139, 152], "limit_arrai": 58, "input_arrai": 58, "min_valu": [58, 61, 109, 110, 124], "max_valu": [58, 61, 109, 110, 124], "cover": [58, 138, 162], "index": [58, 85, 86, 93, 105, 106, 108, 109, 110, 112, 123, 125, 143, 166, 170], "input_list": 58, "spectra": [59, 60, 62, 86, 92, 148, 162], "functiondiscretizationfingerprint": [59, 62], "doi": [59, 60, 62, 81, 82, 83, 97, 98, 101, 103, 104, 109, 110, 112, 125, 130, 136, 139, 146, 149, 150, 151, 152, 155, 160, 161, 170], "1038": [59, 60, 62, 139, 152, 170], "s41597": [59, 60, 62, 139, 152], "022": [59, 60, 62, 139, 152], "01754": [59, 60, 62, 139, 152], "z": [59, 60, 62, 86, 90, 132, 138, 139, 144, 152, 155], "calculate_fingerprint": [59, 62, 139], "x_valu": [59, 60, 61, 62, 76, 86, 91, 92, 148], "y_valu": [59, 60, 62, 76, 86, 91, 92, 148], "compare_fingerprint": [59, 62, 139], "label_1": [59, 60, 62, 85, 86, 87], "label_2": [59, 60, 62, 85, 86, 87], "plot_fingerprint": [59, 62, 139], "discret": [59, 60, 62, 64, 83, 97, 101, 125, 137, 148, 152, 156], "interpret": [59, 62, 160], "dataset": [59, 60, 62, 63, 84, 86, 89, 141, 143, 145, 147], "individu": [59, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 101, 103, 109, 110, 112, 125, 145, 147, 150, 155, 160, 164, 165, 168], "similar": [59, 60, 62, 125, 139, 140, 141, 142, 143, 151, 166, 168], "measur": [59, 62, 125, 139], "matplotlib": [59, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 136, 139, 147, 148, 150, 156, 159, 163], "pyplot": [59, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 139, 148], "figur": [59, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 145, 148, 163], "plt": [59, 62, 139, 148], "analyz": [60, 62, 109, 125, 150, 152, 154], "functionanalysi": [60, 62, 152], "allowed_distance_method": [60, 62, 152], "calculate_correl": [60, 62, 152], "label1": [60, 62], "label2": [60, 62], "pearson": [60, 62, 152], "calculate_discrete_fingerprint": [60, 62, 152], "fingerprint": [60, 62, 64, 81, 82, 83, 86, 88, 98, 109, 110, 112, 119, 125, 137, 139, 150, 160, 161, 162, 168], "calculate_dist": [60, 62, 109, 110, 112, 117, 125, 136, 152, 166, 168], "compare_area": [60, 62, 152], "enclos": [60, 62], "compare_functions_by_discrete_fingerprint": [60, 62, 152], "import_data": [60, 62, 152], "data_label": [60, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 144, 145, 146, 148, 163, 164, 165], "euclidian": [60, 62, 152], "metric": [60, 62, 64, 80, 81, 160], "ab": [60, 62, 156], "ratio": [60, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 162, 163, 164, 169], "a1": [60, 62], "a2": [60, 62], "get_convex_hul": 61, "lower_hul": 61, "upper_hul": 61, "001": [61, 83, 97, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 143, 149, 150], "convex": [61, 86, 89, 125, 150], "n": [61, 83, 97, 101, 109, 112, 132, 145, 149, 155, 168], "dimension": [61, 132, 156], "scipi": [61, 159], "far": [61, 153, 160, 163], "npoint": [61, 73], "ndim": 61, "part": [61, 85, 86, 101, 102, 138, 154, 168], "below": [61, 85, 86, 153, 159, 166, 168], "zero": [61, 85, 86, 109, 124, 126], "abov": [61, 138, 170], "get_minimum_maximum_point": 61, "modul": [62, 67, 109, 131, 144, 168, 170], "function_comparison": [62, 64], "hull": [62, 64, 86, 89, 125, 150], "apply_smear": 63, "sampling_width": 63, "5": [63, 83, 85, 86, 87, 95, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 110, 112, 124, 125, 126, 128, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 160, 163, 164, 165, 166, 168, 169, 170], "radiu": [63, 109, 110, 112, 125, 130, 132, 149], "sampl": [63, 83], "width": [63, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 138, 147, 163], "adjac": 63, "kernel": [63, 64, 80, 83, 160], "available_smearing_method": 63, "aiida_data": 64, "aiida_workflow": [64, 136, 155], "fct": [64, 138, 139, 152, 156], "cp2k": [64, 72, 136, 137, 154, 155, 156, 162, 163], "bands_do": [64, 67, 72], "cif": [64, 72], "critic2": [64, 72, 136, 137, 153, 156, 162], "fhi_aim": [64, 72, 136, 141], "qe": [64, 72, 136, 143, 146], "xmgrace": [64, 72], "zeo": [64, 72, 109, 112, 136], "ml": [64, 156, 159, 161], "cell_grid_search": [64, 80, 160], "transform": [64, 79, 80, 81, 86, 92, 170], "strct": [64, 79, 83, 84, 86, 89, 136, 144, 146, 149, 150, 151, 156, 160, 166, 167, 168, 169, 170], "ext_analysi": [64, 109, 146, 166, 168], "decor": [64, 75, 101, 108, 109, 168], "ext_manipul": [64, 109, 136, 168], "add_structur": [64, 105, 108, 109], "strct_io": [64, 109], "chem_formula": [64, 109, 110, 112, 124, 131, 136, 168], "dict_tool": [64, 131, 136], "element_properti": [64, 131, 136, 168], "math": [64, 131], "space_group": [64, 86, 89, 131, 150, 168], "read": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 85, 86, 109, 112, 115, 123, 140, 141, 143, 146, 159], "read_fil": 65, "extract_structur": 65, "strct_check_chem_formula": 65, "strct_get_sym_op_from_sg": 65, "chemic": [65, 83, 86, 89, 93, 97, 101, 109, 110, 112, 124, 128, 130, 136, 162, 169], "read_atom_proj_density_of_st": [66, 67, 71, 73, 74, 136, 140, 141, 142, 143], "folder_path": [66, 67, 68, 71, 74], "read_band_structur": [66, 67, 71, 73, 74, 76, 140, 141, 142, 143, 163], "read_optimized_structur": [67, 68, 136], "ouput": [67, 68, 74], "farm": [67, 68], "read_restart_structur": [67, 68, 136], "read_stdout": [67, 69, 70, 136, 145], "quantiti": [67, 69, 89, 128, 136, 154, 156], "read_plan": [70, 146], "fhi": [71, 137, 156, 162], "aim": [71, 137, 156, 162, 167], "soc": [71, 141], "load_raw": [71, 141], "coupl": [71, 141], "activ": [71, 143, 157], "appendix": 71, "raw": [71, 141], "polar": [71, 74, 83, 85, 86, 143], "th": [71, 74], "read_total_density_of_st": [71, 73, 74, 136, 141, 142, 143], "parameter_file_nam": 73, "mesh": [73, 142], "100": [73, 83, 97, 101, 144, 145, 170], "force_sets_file_nam": [73, 142], "force_constants_file_nam": 73, "phonopy_kwarg": 73, "phonon": [73, 159, 162], "force_constants_filenam": 73, "ceonstant": 73, "path_label": [73, 85, 86, 140, 141, 142, 143, 144], "high": [73, 85, 86, 143, 150, 156, 159, 160, 166, 167, 169, 171], "reference_cel": [73, 85, 86], "read_qha_properti": 73, "calculation_fold": 73, "thermal_properties_file_nam": 73, "ev_file_nam": 73, "std_output_file_nam": 73, "t_min": 73, "t_max": 73, "t_step": 73, "quasi": [73, 94], "harmon": [73, 83, 94, 97, 101], "approxim": 73, "volum": [73, 94, 109, 112, 124, 161, 166, 168], "thermal": [73, 94, 137, 162], "qha": 73, "read_thermal_properti": 73, "espresso": [74, 137, 140, 141, 142, 144, 146, 156, 162], "read_input_structur": [74, 146], "ibrav": 74, "fulli": 74, "custom_open": 75, "r": [75, 128, 144, 146], "distinguish": [75, 79, 83, 98, 101, 103, 109, 110, 112, 125, 143, 145, 168], "class": [75, 80, 96, 117, 133, 134, 137, 138, 140, 141, 142, 143, 144, 148, 149, 150, 151, 152, 153, 156, 160, 161, 165, 167, 168, 169, 170], "singlefiledata": 75, "read_multipl": 75, "pattern": [75, 140, 141, 143], "is_read_strct_method": 75, "preset_kwarg": 75, "read_structur": [75, 109, 112], "file_path": [76, 77, 78, 109, 112, 115, 123], "read_xmgrace_fil": 76, "fili": 76, "veri": [76, 140, 141, 142, 143, 148, 156, 168], "xy": [76, 85, 86], "color": [76, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 141, 143, 147, 163, 164, 165], "todo": [76, 85, 86, 160], "increas": [76, 109, 110, 112, 125, 156, 160], "tick_label": 76, "po": [76, 150], "accord": [77, 83], "ruamel": [77, 159], "load_yaml_fil": 77, "typ": [77, 145], "safe": 77, "store_in_yaml_fil": 77, "write_to_fil": 78, "struct_dict": [78, 146], "fit": [79, 83, 160], "crystallin": [79, 85, 86, 105, 116, 123, 154, 156, 160, 168], "cellgridsearch": [79, 160], "length_scaling_factor": [79, 160], "angle_scaling_factor": [79, 160], "9": [79, 86, 87, 138, 139, 140, 141, 142, 143, 145, 147, 148, 150, 155, 158, 160, 166, 168, 169], "symprec": [79, 109, 110, 112, 125, 126, 170], "005": [79, 83, 85, 86, 98, 101, 103, 109, 110, 112, 125, 126, 150, 170], "angle_toler": [79, 109, 110, 112, 125, 126, 170], "hall_numb": [79, 109, 110, 112, 125, 126, 134, 168, 170], "ffprint_r_max": 79, "ffprint_delta_bin": 79, "ffprint_sigma": 79, "05": [79, 83, 97, 98, 101, 102, 109, 110, 112, 125, 138, 160], "ffprint_use_weight": 79, "ffprint_distinguish_kind": 79, "target_valu": 79, "brute": 79, "approach": [79, 149], "maintain": [79, 136, 156, 160, 170], "comparison": [79, 113, 125, 128, 139, 146, 148, 160, 166], "hall": [79, 109, 110, 112, 125, 126, 134], "symbol": [79, 83, 86, 89, 93, 97, 101, 105, 106, 108, 109, 110, 112, 123, 125, 126, 130, 134, 166, 168], "bin": [79, 83, 84, 86, 88, 98, 101, 103, 109, 110, 112, 124, 125, 138, 157, 160], "descrit": [79, 83, 98, 101, 103, 109, 110, 112, 125], "pair": [79, 83, 86, 88, 97, 101, 106, 108, 109, 110, 112, 125, 143, 150, 151, 161], "ni0": [79, 83, 98, 101, 103, 109, 110, 112, 123, 125], "target": [79, 83, 84, 106, 108, 150, 160], "score": [79, 160], "model": [79, 81, 82, 156, 161], "set_model": [79, 160], "search_spac": 79, "vari": [79, 106, 108], "get_optimized_structur": 79, "lowest": [79, 85, 86, 139], "return_initial_scor": [79, 160], "return_search_spac": 79, "set_initial_structur": [79, 160], "function_nam": 79, "scikit": [79, 81, 82, 83, 84, 156, 159, 160], "learn": [79, 80, 81, 82, 83, 84, 156, 159, 171], "predict": 79, "set_target_structur": 79, "variat": 79, "max_scor": 79, "best": 79, "max_param": 79, "featur": [79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 140, 141, 142, 143, 144, 154, 155, 159, 161, 162, 165, 166, 168], "machin": [80, 84, 153, 156, 159, 171], "krr_ffprint_cosin": [81, 161], "cosin": [81, 82, 125, 151, 152, 161], "f": [81, 82, 83, 86, 88, 98, 109, 110, 112, 119, 125, 137, 141, 143, 146, 150, 152, 155, 160, 161, 162, 168], "1063": [81, 82, 83, 97, 101, 109, 110, 112, 125, 150, 151, 155, 160, 161], "3079326": [81, 82, 109, 110, 112, 125, 150, 151, 160, 161], "krr_ffprint_laplac": [81, 160, 161], "gamma": [81, 141, 142, 143, 144, 153], "laplacian": [81, 161], "ffprint_cosin": [82, 161], "fprint1": 82, "fprint2": 82, "To": [82, 140, 142, 143, 145, 149, 150, 156, 158, 159, 166, 167, 168, 169], "structureffprinttransform": [82, 83, 160, 161], "add_head": [82, 83, 160], "molecul": [83, 99, 100, 101, 106, 108, 109, 110, 112, 123, 125, 136, 146, 156, 166], "structureacsftransform": [83, 161], "7": [83, 85, 86, 87, 95, 97, 101, 109, 110, 112, 125, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 160, 163, 166, 168, 169, 170], "n_proc": [83, 125, 150, 160, 166], "chunksiz": [83, 125, 160, 166], "50": [83, 125, 142, 145, 150, 155], "verbos": [83, 125, 150, 160, 166], "_basedscribetransform": 83, "3553717": [83, 97, 101, 161], "eta": [83, 97, 101], "r_": [83, 97, 101], "kappa": [83, 97, 101], "triplet": [83, 97, 101], "zeta": [83, 97, 101], "lambda": [83, 97, 101], "dens": [83, 97, 101], "physicsl": [83, 97, 101], "hand": [83, 125, 144], "progress": [83, 85, 125, 159, 166], "bar": [83, 86, 87, 91, 125, 145, 147, 159, 166], "precomputed_properti": [83, 160], "precomput": [83, 160], "add_precomputed_properti": 83, "structure_oper": [83, 160], "clear_precomputed_properti": 83, "clear": 83, "fit_transform": 83, "fit_param": 83, "get_feature_names_out": 83, "input_featur": 83, "get_metadata_rout": 83, "rout": 83, "get_param": 83, "deep": 83, "precompute_parameter_spac": [83, 160], "param_grid": 83, "reus": [83, 109, 112, 160], "later": [83, 91, 109, 112, 146, 160], "set_output": 83, "set_param": 83, "structureoper": [83, 96, 110, 125, 136, 149, 150, 151, 160, 167], "structurecollect": [83, 84, 86, 89, 109, 110, 112, 117, 123, 124, 125, 126, 149, 150, 151, 160, 167, 168, 169, 170], "n_sampl": 83, "n_featur": 83, "n_output": 83, "unsupervis": 83, "x_new": 83, "ndarrai": 83, "n_features_new": 83, "guid": [83, 156], "how": [83, 86, 87, 137, 141, 143, 144, 152, 156, 159, 160, 162, 168], "mechan": 83, "metadatarequest": 83, "encapsul": 83, "subobject": 83, "sphx_glr_auto_examples_miscellaneous_plot_set_output": 83, "api": [83, 109, 124, 150], "unchang": [83, 168], "simpl": [83, 137, 150, 162, 164], "pipelin": [83, 156, 160, 161], "latter": [83, 155, 166], "__": [83, 155], "structurechemordertransform": [83, 161], "r_max": [83, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 117, 119, 121, 125, 150, 160, 166, 168], "15": [83, 98, 101, 102, 105, 106, 108, 125, 138, 140, 141, 143, 145, 146, 147, 150, 155, 160, 166, 168, 170], "max_shel": [83, 101, 104], "_basestructuretransform": 83, "warren": [83, 101, 104, 161], "cowlei": [83, 101, 104, 161], "1103": [83, 97, 101, 103, 104, 161], "physrevb": [83, 97, 101, 103, 104, 161], "96": [83, 101, 104, 138, 145, 161], "024104": [83, 101, 104, 161], "neighbour": [83, 99, 100, 101, 104, 105, 106, 108, 109, 110, 112, 125, 149, 161], "evalu": [83, 101, 104, 160], "structurecompositiontransform": [83, 161], "distinguish_kind": [83, 98, 101, 103, 109, 110, 112, 119, 125, 160], "structurecoordinationtransform": [83, 161], "minimum_dist": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 149], "min_dist_delta": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 125], "n_nearest_neighbour": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 125, 149], "econ_toler": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 125, 149], "econ_conv_threshold": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 125, 149], "voronoi_weight_typ": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 125, 149], "rel_solid_angl": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 149], "voronoi_weight_threshold": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 114, 125, 149], "feature_typ": 83, "nrs_avg": [83, 149], "nrs_stdev": [83, 149], "nrs_max": [83, 149], "nrs_min": [83, 149], "distance_avg": [83, 149], "distance_stdev": [83, 149], "distance_max": [83, 149], "distance_min": [83, 149], "nearest": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 149], "n_neighbour": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125], "econ": [83, 99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 149], "okeeffe_weight_threshold": [83, 99, 101, 105, 106, 108, 109, 110, 112, 114, 125], "indirect": [83, 85, 86, 109, 110, 112, 125], "okeeff": [83, 109, 110, 112, 125], "structuredensitytransform": [83, 161], "delta_bin": [83, 98, 101, 103, 109, 110, 112, 119, 125, 150, 160], "use_weight": [83, 125, 151], "composit": [83, 84, 86, 89, 109, 123, 124, 125, 150, 162, 169], "ffprint": [83, 160], "structurembtrtransform": [83, 161], "inverse_dist": [83, 97, 101], "min": [83, 97, 101, 138, 139, 152], "l2": [83, 97, 101], "1088": [83, 97, 101, 161], "2632": [83, 97, 101, 161], "2153": [83, 97, 101, 161], "aca005": [83, 97, 101, 161], "n_atom": [83, 97, 101], "valle_oganov": [83, 97, 101], "structurematrixtransform": [83, 161], "coulomb": [83, 97, 101], "eigenspectrum": [83, 97, 101], "1e": [83, 97, 101], "matric": [83, 97, 101, 161], "1002": [83, 97, 101, 161], "qua": [83, 97, 101, 161], "24917": [83, 97, 101, 161], "ewald_sum": [83, 97, 101], "sine": [83, 97, 101], "sorted_l2": [83, 97, 101], "random": [83, 97, 101, 106, 108, 109, 124, 136, 152, 159, 160], "standar": [83, 97, 101], "deviat": [83, 97, 101, 138], "distribut": [83, 85, 86, 88, 92, 97, 101, 103, 138, 147, 150, 151, 160, 161, 162, 165, 168], "nois": [83, 97, 101], "attibut": [83, 97, 101], "accuraci": [83, 97, 101], "ewald": [83, 97, 101], "sum": [83, 85, 86, 87, 97, 101, 103, 106, 108, 109, 110, 112, 125, 136, 140, 141, 143, 145, 149, 152], "structureprdftransform": [83, 161], "radial": [83, 86, 88, 97, 101, 103, 151, 161, 162, 168], "89": [83, 101, 103, 138, 145, 155, 161], "205118": [83, 101, 103, 161], "structuresoaptransform": [83, 161], "gto": [83, 97, 101], "species_weight": [83, 97, 101], "87": [83, 97, 101, 138, 144, 145, 150, 161], "184115": [83, 97, 101, 161], "degre": [83, 97, 101], "spheric": [83, 97, 101], "polynomi": [83, 97, 101], "over": [83, 97, 101, 103, 109, 110, 112, 125, 140, 141, 143, 147], "center": [83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 106, 108, 132, 148], "interest": [83, 97, 101], "inner": [83, 97, 101], "outer": [83, 97, 101], "train_test_split_cryst": [84, 160], "structure_collect": [84, 86, 89, 109, 126, 150, 160], "target_attribut": [84, 160], "train_siz": [84, 160], "test_siz": [84, 160], "target_bin": [84, 160], "composition_bin": [84, 160], "exclude_label": 84, "return_structure_collect": [84, 160], "split": [84, 145, 150], "train": [84, 156], "strafi": 84, "scalar": [84, 86, 90], "histogram": [84, 150, 160], "train_test_split": [84, 160], "subset_train": 84, "subset_test": 84, "target_train": 84, "target_test": 84, "separ": [85, 148, 164, 170], "bandstructuredosplot": [85, 86, 140, 141, 142, 143, 162], "show_legend": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 145, 148, 150, 151, 163], "subplot_hspac": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 148, 163], "subplot_wspac": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 148, 163, 165], "subplot_nrow": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 145, 146, 147, 148, 163, 165], "subplot_ncol": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 145, 146, 147, 148, 163, 165], "subplot_sharex": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "subplot_sharei": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "subplot_gridspec": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 147, 163, 165], "pdos_plot_typ": [85, 86], "tdos_plot_typ": [85, 86], "fill": [85, 86, 91], "dos_comp_threshold": [85, 86], "47": [85, 86, 95, 138, 141, 144, 145, 170], "smearing_method": [85, 86, 92, 148], "smearing_delta": [85, 86, 92, 140, 143, 148], "smearing_sigma": [85, 86, 92, 140, 143, 148], "sum_pdo": [85, 86, 140, 141, 143], "per_atom": [85, 86], "base_plot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 136], "_baseplot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "base_mixin": [85, 86, 91, 92], "_hlinemixin": [85, 86, 91], "_vlinemixin": [85, 86, 91, 92], "base_band_structur": [85, 86], "_basebandstructur": [85, 86], "base_do": [85, 86], "_basedensityofst": [85, 86], "detect_equivalent_kind": [85, 86], "tdo": [85, 86, 141, 142, 143], "custom_alpha": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "alpha": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "opac": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "custom_color": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "custom_linestyl": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 141, 163], "style": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 141, 143, 156, 163], "custom_linewidth": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "custom_mark": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "marker": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "custom_xticklabel": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "tick": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 158, 163], "custom_xtick": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "custom_yticklabel": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "custom_ytick": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "equal_aspect_ratio": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "equal": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163, 168], "aspect": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "legend_bbox_to_anchor": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 148, 150, 163], "box": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 158, 163], "anchor": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "legend_loc": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 148, 163], "legend": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 145, 163], "legend_ncol": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "legend_sort_entri": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "sort": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "draw": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "show_colorbar": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146], "show": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 137, 138, 139, 140, 142, 143, 144, 145, 148, 156, 163, 165, 167], "colorbar": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "show_grid": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "show_plot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 144, 145, 148, 163], "store_path": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 143, 145, 148, 163], "store_plot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 143, 145, 148, 163], "style_sheet": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 148, 163], "sheet": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "subplot_adjust": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "subplots_adjust": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "subplot_align_ylabel": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 136, 163], "align": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 138, 163], "vertic": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 132, 150, 163], "subplot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 136, 145, 147, 162, 163, 164], "subplot_share_colorbar": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "subplot_share_legend": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "share": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 136, 150, 155, 163, 164], "subplot_sup_titl": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "whole": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 143, 163], "subplot_sup_x_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "subplot_sup_y_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "subplot_tight_layout": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 145, 163], "tight": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 150, 163], "layout": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "horizont": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 163], "x_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 142, 145, 146, 148, 163, 164], "shown": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 123, 138, 166, 168], "x_rang": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 143, 146, 148, 163], "y_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 142, 146, 148, 150, 151, 163, 164], "y_rang": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 143, 144, 146, 148, 163], "add_hlin": [85, 86, 91, 147], "x_min": [85, 86, 91, 147], "x_max": [85, 86, 91, 147], "line_styl": [85, 86, 91, 92], "foreground": [85, 86, 91, 92, 155], "subplot_assign": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 147, 148, 165], "add_vlin": [85, 86, 91, 92, 147], "y_min": [85, 86, 91, 92, 147], "y_max": [85, 86, 91, 92, 147], "analyse_band": [85, 86, 143], "band_idx": [85, 86], "auto_set_axis_properti": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "set_x_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "set_y_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 146, 163], "auto": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "calculate_band_gap": [85, 86, 143], "vbm_band_idx": [85, 86, 143], "gap": [85, 86, 93, 143], "calculate_energy_diff_at_kpoint": [85, 86, 143], "band_idx1": [85, 86], "band_idx2": [85, 86], "calculate_smallest_direct_energy_diff": [85, 86, 143], "smallest": [85, 86, 109, 110, 112, 125, 143], "calculate_smallest_energy_diff": [85, 86, 143], "create_default_gridspec": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 147, 148, 165], "nrow": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 165], "ncol": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 165], "nplot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 165], "height": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 147, 163], "center_last_row": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 165], "import_band_structur": [85, 86, 140, 141, 142, 143, 144, 163], "unit_i": [85, 86, 140, 141, 143, 144], "align_to_vbm": [85, 86, 140], "import_from_aiida_bandsdata": [85, 86], "bandsdata_nod": [85, 86], "import_from_aiida_xydata": [85, 86], "pdosdata": [85, 86], "shift_do": [85, 86, 140, 141, 143], "use_smear": [85, 86, 140, 143], "sum_kind": [85, 86, 140, 141, 142, 143], "sum_principal_qn": [85, 86, 140, 141, 142, 143], "sum_azimuth_qn": [85, 86], "sum_magnetic_qn": [85, 86, 140, 141, 142, 143], "custom_kind_dict": [85, 86, 87, 145], "import_projected_do": [85, 86, 140, 141, 142, 143], "unit_x": [85, 86, 92], "import_total_do": [85, 86, 141, 142, 143], "plot_titl": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 145], "plot_nam": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 143], "remove_additional_plot_el": [85, 86, 91, 92, 147, 148], "reset_gridspec": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 148, 165], "gridspec": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "return_data_label": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "set_reference_cel": [85, 86, 140, 142, 143], "shift_band": [85, 86, 141, 143], "energy_shift": [85, 86], "shift_bands_and_do": [85, 86, 143], "shift_bands_and_dos_to_vbm": [85, 86, 140], "vbm": [85, 86, 143], "plotli": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 143, 147, 148, 150, 156, 159, 163], "linefil": [85, 86], "lorentzian": [85, 86, 92], "front": [85, 86, 91, 92], "band_min": [85, 86], "band_max": [85, 86], "With": [85, 86], "highest": [85, 86, 139, 143], "conduct": [85, 86, 168], "ev": [85, 86, 92, 93, 125, 135, 140, 141, 143, 148, 150, 163], "within": [85, 86, 109, 112, 143, 155, 166, 168, 169], "degener": [85, 86], "down": [85, 86, 90, 168], "channel": [85, 86], "\u01f9one": [85, 86, 168], "band_gap": [85, 86, 89], "natur": [85, 86, 128, 136], "direct_gap": [85, 86, 143], "605352729999999": [85, 86], "direct_gap_kpoint": [85, 86, 143], "indirect_gap": [85, 86, 143], "6067583699999997": [85, 86], "vbm_kpoint": [85, 86, 143], "vbm_energi": [85, 86, 143], "cbm_kpoint": [85, 86, 143], "41447368": [85, 86], "cbm_energi": [85, 86, 143], "cbm_band_idx": [85, 86, 143], "degeneraci": [85, 86], "energy_diff": [85, 86], "7729889100000005": [85, 86], "kpoint_min": [85, 86, 143], "25": [85, 86, 105, 106, 108, 138, 142, 143, 145, 150, 155, 160], "75": [85, 86, 95, 138, 142, 145, 151, 160, 166, 168, 170], "kpoint_max": [85, 86, 143], "nkpoint": [85, 86], "neigenvalu": [85, 86], "nspin": [85, 86], "azimuth": [85, 86, 136], "magnet": [85, 86, 109, 112, 140, 141, 143, 168], "tri": [85, 86, 136], "additionallli": [85, 86], "png": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 143], "fig": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "graph_object": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "distort": [85, 86], "consequ": [85, 86], "therebi": [85, 86], "segment": [85, 86, 132], "accordingli": [85, 86, 140, 142, 143, 150], "bandstructureplot": [85, 86, 140, 141, 142, 143, 144, 162, 163], "dosplot": [85, 86, 140, 141, 142, 143, 162], "bandstructur": [85, 86, 140, 141, 142, 143], "bandstructuredensityofst": [85, 86], "densityofst": [85, 86], "partialchargesplot": [86, 87, 145, 162], "solid": [86, 87, 88, 132, 141, 143], "pc_plot_typ": [86, 87, 145], "scatter": [86, 87, 89, 91, 145, 147, 150], "pc_plot_ord": [86, 87, 145], "import_from_aiida_list": [86, 87], "pcdata": [86, 87], "plot_label": [86, 87, 91, 93, 135, 145, 147], "import_partial_charg": [86, 87, 145], "valence_electron": [86, 87, 145], "ax": [86, 87], "h": [86, 87, 128, 145, 146, 166, 168], "o": [86, 87, 128, 144, 149, 150, 159, 166, 168], "partialrdfplot": [86, 88, 151, 162], "dash": [86, 88, 141, 143, 155], "dot": [86, 88, 141, 143], "dashdot": [86, 88], "x_unit": [86, 88, 151], "import_ffingerprint": [86, 88, 151], "phaseplot": [86, 89, 150, 162], "plot_typ": [86, 89, 90, 93, 150], "plot_properti": [86, 89, 93, 94, 150], "formation_energi": [86, 89, 125, 150], "show_crystal_system": [86, 89, 150], "show_convex_hul": [86, 89, 150], "show_lower_hul": [86, 89], "show_upper_hul": [86, 89], "top_label": [86, 89], "hist_bin_s": [86, 89], "binari": [86, 89, 125, 137, 154, 169], "ternari": [86, 89], "stabil": [86, 89, 125, 150, 160, 162], "phase": [86, 93, 109, 110, 124, 150, 156, 170], "add_data_point": [86, 89], "datapoint": [86, 89], "import_from_pandas_df": [86, 89, 93, 109, 123, 150], "structure_column": [86, 89, 109, 123], "import_from_structure_collect": [86, 89], "direct_band_gap": [86, 89, 150], "c": [86, 89, 109, 124, 128, 132, 137, 145, 149, 154, 166, 168, 169], "sb": [86, 89, 149, 169], "planarfieldplot": [86, 90, 162], "show_x_label": [86, 90, 93], "show_y_label": [86, 90, 93], "coordinates_unit": [86, 90], "norm": [86, 90, 146, 152], "values_unit": [86, 90], "import_field": [86, 90, 146], "flip_lr": [86, 90, 146], "flip_ud": [86, 90, 146], "text_label": [86, 90, 146], "import_from_aiida_arraydata": [86, 90], "planedata": [86, 90], "flip": [86, 90], "left": [86, 90, 146, 148], "right": [86, 90, 148], "simpleplot": [86, 91, 137, 162, 163, 165], "flexibl": [86, 91, 137, 139, 162, 164, 165], "import_bar_data_set": [86, 91, 147, 164, 165], "import_scatter_data_set": [86, 91, 147, 164, 165], "y_values_2": [86, 91], "face_color": [86, 91], "line_width": [86, 91], "marker_face_color": [86, 91], "marker_edge_width": [86, 91], "use_fil": [86, 91], "use_fill_between": [86, 91], "transpar": [86, 91], "face": [86, 91], "deta": [86, 91], "spectrumplot": [86, 92, 148, 162], "detect_peak": [86, 92, 148], "smooth_spectra": [86, 92, 148], "plot_original_spectra": [86, 92, 148], "plot_unit_x": [86, 92], "_peakdetectionmixin": [86, 92], "_smearingmixin": [86, 92], "rai": [86, 92, 137, 162], "absorpt": [86, 92, 137, 162], "detect": [86, 92, 125, 160], "peak": [86, 92], "broaden": [86, 92], "peak_color": [86, 92], "peak_dist": [86, 92], "peak_height": [86, 92], "peak_line_styl": [86, 92], "peak_max_factor": [86, 92], "peak_plateau_s": [86, 92], "peak_promin": [86, 92], "peak_rel_height": [86, 92], "peak_threshold": [86, 92], "peak_width": [86, 92], "peak_wlen": [86, 92], "peak_y_min": [86, 92], "import_spectrum": [86, 92, 148], "spectrum": [86, 92, 137, 162], "surfaceplot": [86, 93, 162], "area_unit": [86, 93], "energy_unit": [86, 93], "plot_el": [86, 93], "chem_potenti": [86, 93], "surface_energi": [86, 93], "potenti": [86, 93], "bulk_phas": [86, 93], "elemental_phas": [86, 93], "excess_atom": [86, 93], "add_surface_facet": [86, 93], "total_energi": [86, 93], "termination_label": [86, 93], "ter_labeling_schem": [86, 93], "extract_electronic_properti": [86, 93], "set_bulk_phas": [86, 93], "set_elemental_phas": [86, 93], "nr_atom": [86, 93, 150, 166], "indici": [86, 93, 145], "ioniz": [86, 93], "phasediagram": [86, 89], "stage": 91, "qhaplot": 94, "volume_temperatur": 94, "thermal_expans": 94, "selected_temperatur": 94, "200": [94, 155], "400": [94, 153], "600": [94, 153], "800": [94, 150], "import_qha_properti": 94, "bulk_modulus_temperatur": 94, "helmholtz_volum": 94, "moduli": 94, "expans": 94, "helmholtz": 94, "thermalpropertiesplot": 94, "free_energi": 94, "entropi": 94, "heat_capac": 94, "kj": 94, "mol": 94, "c_v": 94, "j": [94, 98, 101], "import_thermal_properti": 94, "heat": 94, "capac": [94, 168], "c_rect_lg": 95, "13": [95, 136, 138, 143, 145, 146, 150, 155, 166, 168], "18": [95, 138, 143, 145, 150, 152, 155, 166], "22": [95, 138, 143, 145, 150, 166], "26": [95, 136, 138, 145, 150, 155], "35": [95, 136, 138, 145, 150, 160], "36": [95, 136, 138, 145, 150, 155], "48": [95, 138, 145, 155], "p_hex_lg": 95, "66": [95, 138, 144, 145], "67": [95, 138, 144, 145], "69": [95, 138, 145, 168], "71": [95, 138, 145], "72": [95, 138, 145], "73": [95, 136, 138, 145, 155], "76": [95, 138, 145], "77": [95, 138, 145], "78": [95, 138, 144, 145, 155], "80": [95, 145], "p_obl_lg": 95, "p_rect_lg": 95, "p_squ_lg": 95, "p_trig_lg": 95, "65": [95, 136, 138, 145, 150, 160], "68": [95, 138, 145, 155], "70": [95, 133, 145], "74": [95, 136, 138, 145], "79": [95, 138, 144, 145], "host": [96, 105, 106, 108, 155], "external_analysis_method": [96, 168], "func": [96, 107, 110, 112], "calculate_acsf_descriptor": [97, 101], "calculate_interaction_matrix": [97, 101], "calculate_mbtr_descriptor": [97, 101], "calculate_soap_descriptor": [97, 101], "calculate_ffingerprint_order_p": [98, 101], "1016": [98, 101], "cpc": [98, 101], "2010": [98, 101], "06": [98, 101, 138], "007": [98, 101], "total_order_p": [98, 101], "atomic_fingerprint": [98, 101, 109, 110, 112, 125, 151], "bond": [99, 105, 106, 108, 146], "determine_molecular_frag": [99, 101], "exclude_el": [99, 101], "end_point_el": [99, 101], "20": [99, 100, 101, 103, 104, 109, 110, 112, 125, 136, 139, 143, 144, 145, 150, 152, 166], "cn_method": [99, 100, 101, 105, 106, 108, 125], "serv": [99, 101, 125, 146, 159, 160], "voronoi": [99, 100, 101, 105, 106, 108, 109, 110, 112, 121, 125, 149], "covalent_atomic_radiu": [99, 100, 101, 105, 106, 108, 109, 110, 112, 125], "solid_angl": [99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 132], "prefix": [99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 164, 168], "rel_": [99, 100, 101, 105, 106, 108, 109, 110, 112, 125], "polyhedron": [99, 100, 101, 105, 106, 108, 109, 110, 112, 125, 132], "create_graph": [100, 101], "graphviz_engin": [100, 101], "circo": [100, 101], "graphviz_edge_rank_color": [100, 101], "blue": [100, 101, 146], "red": [100, 101, 146], "green": [100, 101, 158], "orang": [100, 101, 163], "darkblu": [100, 101], "edg": [100, 101, 160], "rank": [100, 101], "nx_graph": [100, 101], "nx": [100, 101], "multidigraph": [100, 101], "graphviz_graph": [100, 101], "digraph": [100, 101], "act": [101, 166, 167, 168], "calculate_plan": [101, 102, 146], "fragment": [101, 102], "margin": [101, 102, 146, 149], "vector_length": [101, 102], "min_nr_atom": [101, 102], "use_scaled_coordin": [101, 102], "arang": [101, 102, 165], "outermost": [101, 102], "calculate_prdf": [101, 103, 166, 168], "element_prdf": [101, 103], "atomic_prdf": [101, 103], "calculate_warren_cowley_order_p": [101, 104], "span": [102, 132], "host_index": [105, 108], "functional_group": [105, 108, 146], "ch3": [105, 106, 108, 128, 146], "bond_length": [105, 106, 108], "change_label": [105, 106, 108, 109, 110, 112, 116, 125, 150, 166, 168], "guest": [105, 106, 108, 136], "back": [105, 106, 108, 109, 112, 123, 154, 168], "suffix": [105, 106, 108, 109, 112, 155, 168], "highlight": [105, 106, 108, 146, 155, 156], "manipul": [105, 106, 107, 108, 109, 110, 112, 125, 136, 167], "adsorb": 106, "add_structure_coord": [106, 108, 136], "host_indic": [106, 108], "guest_index": [106, 108], "guest_structur": [106, 108], "guest_dir": [106, 108], "radius_typ": [106, 108, 109, 110, 112, 114, 116, 125, 130], "chen_manz": [106, 108, 109, 110, 112, 125, 130], "atomic_radius_delta": [106, 108, 109, 110, 112, 114, 125, 149], "dist_constraint": [106, 108], "dist_threshold": [106, 108], "viabl": [106, 108], "cooh": [106, 108], "h2o": [106, 108, 128], "nh2": [106, 108], "no2": [106, 108], "oh": [106, 108, 128], "orient": [106, 108, 136, 167], "neighbor": [106, 108], "three": [106, 108, 109, 110, 112, 117, 124, 125, 132, 146, 155, 160, 166, 168, 170], "fold": [106, 108], "until": [106, 108], "minim": [106, 108, 153, 160], "collid": [106, 108], "add_structure_random": [106, 108, 136], "random_st": [106, 108], "reproduc": [106, 108, 150], "seem": [106, 108], "too": [106, 108], "aggreg": [106, 108], "external_manipulation_method": [107, 168], "add_functional_group": [108, 136], "pbc": [109, 112, 123, 146, 166, 168, 170], "site_attribut": [109, 112, 136, 168], "store_calculated_properti": [109, 112, 168], "function_arg": [109, 112], "mixin": [109, 112, 124, 125], "analysismixin": [109, 110, 112, 125], "manipulationmixin": [109, 110, 112, 125], "analysis_method": [109, 110, 112, 125, 166, 168], "cell_angl": [109, 112], "cell_length": [109, 112], "cell_volum": [109, 112], "export_method": [109, 112, 168], "import_method": [109, 112, 168], "especi": [109, 112, 152], "relev": [109, 112, 150, 154], "manipulation_method": [109, 110, 112, 125, 166, 168], "scaled_posit": [109, 112], "calculate_angl": [109, 110, 112, 117, 125, 166, 168], "site_index1": [109, 110, 112, 117, 125, 166], "site_index2": [109, 110, 112, 117, 125, 166], "site_index3": [109, 110, 112, 117, 125], "backfold_posit": [109, 110, 112, 117, 125], "calculate_coordin": [109, 110, 112, 114, 125, 136, 149, 166, 168], "calculate_dihedral_angl": [109, 110, 112, 117, 125, 166, 168], "site_index4": [109, 110, 112, 117, 125], "dihedr": [109, 110, 112, 117, 125], "four": [109, 110, 112, 117, 125, 146], "use_supercel": [109, 110, 112, 117, 125], "calculate_ffingerprint": [109, 110, 112, 119, 125, 151, 166, 168], "use_legacy_smear": [109, 110, 112, 119, 125], "calculate_voronoi_tessel": [109, 110, 112, 121, 125, 166, 168], "delete_atom": [109, 110, 112, 116, 125, 166, 168], "site_indic": [109, 110, 112, 116, 125], "determine_point_group": [109, 110, 112, 118, 125, 166, 168], "threshold_dist": [109, 110, 112, 118, 125], "threshold_angl": [109, 110, 112, 118, 125], "threshold_inertia": [109, 110, 112, 118, 125], "determine_space_group": [109, 110, 112, 120, 125, 166, 168], "return_sym_oper": [109, 110, 112, 125, 134], "return_primitive_structur": [109, 110, 112, 125], "return_standardized_structur": [109, 110, 112, 125], "no_id": [109, 110, 112, 125], "from_aiida_structuredata": [109, 112, 168], "from_ase_atom": [109, 112, 168], "file_format": [109, 112, 115], "backend_kwarg": [109, 112, 123], "from_pymatgen_structur": [109, 112, 168], "pymatgen_structur": [109, 112, 123], "get_posit": [109, 112], "iter_sit": [109, 112, 168], "get_kind": [109, 112], "get_cart_po": [109, 112], "get_scaled_po": [109, 112], "perform_analysi": [109, 112, 125, 166], "analaysi": [109, 112, 125], "perform_manipul": [109, 110, 112, 125, 166], "scale_unit_cel": [109, 110, 112, 116, 125, 166, 168], "scaling_factor": [109, 110, 112, 116, 125], "set_attribut": [109, 112], "set_posit": [109, 112], "postion": [109, 112], "set_site_attribut": [109, 112], "substitute_el": [109, 110, 112, 116, 125, 136, 150, 166, 168], "remove_kind": [109, 110, 112, 116, 125, 136], "substitut": [109, 110, 112, 116, 125, 150, 168], "to_aiida_structuredata": [109, 112, 168], "to_ase_atom": [109, 112, 168], "to_dict": [109, 112, 136, 168], "include_calculated_properti": [109, 112], "to_pymatgen_structur": [109, 112, 168], "moment": [109, 112, 138, 155, 163], "backfold": [109, 110, 112, 125, 136], "atomic_radiu": [109, 110, 112, 125, 149], "coval": [109, 110, 112, 125, 130, 146], "fallback": [109, 110, 112, 125], "radii": [109, 110, 112, 125, 136, 149], "neg": [109, 110, 112, 125], "decreas": [109, 110, 112, 125], "supercel": [109, 110, 112, 121, 125], "use_super_cel": [109, 110, 112, 125], "element_fingerprint": [109, 110, 112, 125, 151], "inertia": [109, 110, 112, 125], "ideal": [109, 110, 112, 125, 156], "read_": [109, 112], "_structur": [109, 112], "yield": [109, 112], "import_": [109, 123, 164, 169], "append_": [109, 123, 169], "assigen": [109, 123], "append_from_aiida_structuredata": [109, 123, 166], "append_from_ase_atom": [109, 123, 151, 166], "append_from_fil": [109, 123], "append_from_pymatgen_structur": [109, 123], "append_structur": [109, 123, 166], "create_pandas_df": [109, 123, 150, 166], "exclude_column": [109, 123, 150], "duplicate_structur": [109, 123], "new_label": [109, 123], "duplic": [109, 123, 125, 136, 150, 166], "get_all_attribute_kei": [109, 123], "get_all_el": [109, 123], "get_all_kind": [109, 123], "get_all_structur": [109, 123], "return_index_label": [109, 123], "import_from_aiida_db": [109, 123, 166], "raise_error": [109, 123], "import_from_hdf5_fil": [109, 123, 160, 166], "pop": [109, 123, 166], "store_in_aiida_db": [109, 123, 166], "group_descript": [109, 123, 126], "store_in_hdf5_fil": [109, 123, 166], "constraint": [109, 110, 123, 124, 150], "met": [109, 123, 155], "pd": [109, 123], "structureimport": [109, 124, 144, 150, 160, 167, 169], "neglect_elemental_structur": [109, 110, 124, 150, 169], "constraintsmixin": [109, 110, 124], "attribute_constraint": [109, 110, 124], "chem_formula_constraint": [109, 110, 124], "concentration_constraint": [109, 110, 124], "neglect": [109, 110, 124, 150, 169], "add_chem_formula_constraint": [109, 110, 124, 169], "reduced_formula": [109, 110, 124, 169], "append_from_mp_by_id": [109, 124, 144, 169], "entry_id": [109, 124], "api_kei": [109, 124], "property_data": [109, 124, 144], "structure_typ": [109, 124, 150], "generate_random_cryst": [109, 124, 160, 169], "excl_space_group": [109, 124], "tol_tupl": [109, 124], "bin_siz": [109, 124], "max_atom": [109, 124], "max_structur": [109, 124, 160, 169], "max_structures_per_c": [109, 124], "max_structures_per_sg": [109, 124], "volume_factor": [109, 124], "import_from_mp": [109, 124, 150, 169], "compatible_onli": [109, 124], "conv_unit_cel": [109, 124], "use_openapi": [109, 124, 150], "import_from_optimad": [109, 124, 169], "database_id": [109, 124], "api_vers": [109, 124], "optimade_url": [109, 124], "timeout": [109, 124], "import_from_oqmd": [109, 124, 150, 169], "query_limit": [109, 124, 150], "remove_constraint": [109, 110, 124, 169], "return_optimade_database_id": [109, 124], "url": [109, 124], "set_attribute_constraint": [109, 110, 124, 169], "set_concentration_constraint": [109, 110, 124, 169], "min_conc": [109, 110, 124], "max_conc": [109, 110, 124], "reduc": [109, 110, 124, 128, 150, 160, 169], "www": [109, 124], "materialsproject": [109, 124, 150], "dashboard": [109, 124], "el_band_structur": [109, 124, 144], "el_do": [109, 124], "stuctur": [109, 124], "intial": [109, 124], "30": [109, 124, 145, 150], "fe2o3": [109, 124, 128], "te": [109, 124, 137, 154, 169], "exclus": [109, 124], "per": [109, 124, 150, 161], "el_bandstructur": [109, 124], "legaci": [109, 124, 150], "json": [109, 124], "60": [109, 124, 136, 145, 150, 168], "respons": [109, 124], "server": [109, 124, 159], "surfacegener": [109, 126, 167, 170], "create_surfac": [109, 126, 170], "generate_surface_slab": [109, 126, 170], "store_surfaces_in_aiida_db": [109, 126, 170], "to_aiida_surfacedata": [109, 126, 170], "01": [109, 125, 126, 138, 143, 146, 152, 170], "repitit": [109, 126, 170], "altern": [109, 126, 155, 166], "amount": [109, 126, 160, 170], "than": [109, 126, 149, 150, 153, 155, 160, 170], "side": [109, 126, 146, 162, 170], "constrainterror": 110, "manipulates_structur": 110, "get_structure_from_fil": 115, "miscellan": 117, "moelecul": 118, "tessel": [121, 149], "structurecomparison": 125, "structuresoper": 125, "output_format": [125, 166], "simpli": [125, 150, 168], "unaffect": 125, "supported_output_format": [125, 166], "calculate_st": 125, "exclude_kei": 125, "compare_sites_via_coordin": [125, 149, 166], "key1": 125, "key2": 125, "compare_sites_via_ffingerprint": [125, 166], "compare_structures_via_comp_sym": [125, 166], "mere": [125, 150, 155, 160, 169], "compare_structures_via_direct_comp": [125, 166], "length_threshold": 125, "angle_threshold": 125, "position_threshold": 125, "compare_structures_via_ffingerprint": [125, 151, 166], "find_duplicates_via_comp_sym": [125, 150, 166], "confin": [125, 150], "remove_structur": [125, 150], "coimpar": 125, "find_duplicates_via_direct_comp": [125, 166], "find_duplicates_via_ffingerprint": [125, 150, 166], "ffingerprint": [125, 151], "find_eq_sites_via_coordin": [125, 166], "find_eq_sites_via_ffingerprint": [125, 166], "sign": [125, 155], "08": [125, 138], "03": [125, 138, 150, 152], "025": 125, "subset": [125, 155, 160, 168], "compare_structur": 125, "compare_funct": 125, "comp_kwarg": 125, "structure_wrapp": 125, "check_stor": 125, "space_group_hn_to_layer_group": 127, "compare_formula": [128, 136], "chem_formula1": 128, "chem_formula2": 128, "reduce_formula": [128, 136], "ident": [128, 151], "fe": 128, "forum": 128, "formula_dict": 128, "0001": [128, 146], "33333": 128, "intepret": 128, "0e": 128, "formula_r": 128, "transform_dict_to_latexstr": 128, "round": 128, "formula_str": 128, "latex": 128, "mathrm": [128, 146], "o3": 128, "transform_dict_to_str": 128, "output_typ": 128, "alphabet": 128, "transform_list_to_dict": 128, "formula_list": 128, "transform_list_to_str": 128, "transform_str_to_dict": [128, 136], "curli": 128, "bracket": [128, 136, 166], "recur": [128, 136], "hoh": 128, "co": 128, "ch": 128, "16": [128, 138, 143, 145, 149, 150, 151, 155, 166, 168], "21": [128, 138, 143, 145, 150, 155, 166], "dict_create_tre": 129, "parameter_tre": 129, "word": 129, "dict_merg": 129, "b": [129, 132, 140, 163], "dict_retrieve_paramet": 129, "cound": 129, "dict_set_paramet": 129, "physic": [130, 135], "get_atomic_mass": 130, "mass": 130, "element_numb": 130, "get_atomic_numb": 130, "get_atomic_radiu": [130, 136], "van": [130, 136], "der": [130, 136], "waal": [130, 136], "1039": [130, 136], "b801115j": 130, "vdw": 130, "c9ra07327b": [130, 136], "vdw_charry_tkatchenko": 130, "26434": [130, 136], "chemrxiv": [130, 136], "2024": [130, 136, 153], "m3rtp": [130, 136], "v2": [130, 136, 155], "wrong": 130, "get_electroneg": 130, "paul": 130, "electroneg": 130, "allen": 130, "get_element_group": 130, "get_element_symbol": [130, 168], "get_group": 130, "element_group": 130, "mathemat": 132, "calc_angl": 132, "vector1": 132, "vector2": 132, "radian": 132, "calc_circular_segment_area": 132, "circular": 132, "en": 132, "wikipedia": 132, "wiki": 132, "circular_seg": 132, "circl": 132, "segment_area": 132, "calc_plane_equ": 132, "point1": 132, "point2": 132, "point3": 132, "d": [132, 140, 141, 143], "calc_polygon_area": 132, "polygon": 132, "calc_reflection_matrix": 132, "n_vector": 132, "3d": 132, "calc_solid_angl": 132, "gaussian_funct": 132, "mu": [132, 138], "varianc": 132, "__str__": 133, "max_str_length": 133, "get_crystal_system": 134, "crystal_system": 134, "tetragon": 134, "get_lattice_typ": 134, "get_space_group_detail": 134, "international_short": [134, 168], "short": 134, "international_ful": [134, 168], "schoenfli": [134, 136, 168], "hall_symbol": [134, 168], "choic": [134, 168], "centr": 134, "pointgroup_intern": [134, 168], "pointgroup_schoenfli": [134, 168], "arithmetic_crystal_class_numb": [134, 168], "arithmet": [134, 155], "arithmetic_crystal_class_symbol": [134, 168], "symmetry_oper": 134, "rotat": 134, "transform_to_nr": 134, "sg_num": 134, "transform_to_str": 134, "sg_str": 134, "convers": 135, "_basequant": 135, "available_unit": 135, "get_unit": 135, "frequenc": [135, 142], "unitconvert": 135, "_baseunitconvert": 135, "spectroscopi": [135, 148], "convert_unit": 135, "unit_1": 135, "unit_2": 135, "processed_data": 135, "wavevector": 135, "fix": 136, "pr": 136, "counterpart": 136, "34": [136, 138, 145, 155, 170], "few": [136, 146, 150, 156, 163, 168], "smaller": [136, 149, 153, 160], "correctli": 136, "63": [136, 138, 145, 155], "deal": 136, "64": [136, 138, 145, 150], "enhanc": [136, 156], "23": [136, 138, 143, 145, 150], "outsid": [136, 167], "fermi": 136, "cssr": 136, "v1": [136, 155], "cuc": 136, "postprocess": 136, "higher": 136, "33": [136, 138, 145], "addiat": 136, "replac": [136, 150, 155], "37": [136, 138, 145], "39": [136, 138, 140, 141, 143, 144, 145, 148, 149, 150, 155, 160, 164, 166, 168, 169, 170], "44": [136, 138, 145], "2022": 136, "51": [136, 138, 142, 145, 150], "newli": [136, 150, 166], "53": [136, 138, 145], "56": [136, 138, 145], "sped": 136, "prior": 136, "expens": 136, "61": [136, 138, 145, 170], "h2": [136, 145], "aim2dat": [136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 157, 158, 159, 160, 163, 164, 165, 166, 168, 169, 170], "break": 136, "dict_": 136, "relat": [136, 138, 156, 167], "conform": [136, 155], "54": [136, 138, 145], "As": [136, 139, 140, 150, 151, 153, 156, 160, 164, 166, 168, 169, 170], "sg_number": 136, "int_symbol": 136, "point_group_symbol": 136, "schoenflies_symbol": 136, "pointgroup": [136, 150], "wai": [136, 139, 143, 147, 148, 150, 160, 163, 165, 166, 168, 170], "publish": [136, 150], "jupyt": [137, 156], "notebook": [137, 144, 148, 156], "most": [137, 150, 153, 156, 160, 163, 164, 165, 170], "pool": [137, 154, 156, 169], "At": [138, 155], "uniformli": 138, "uniform": [138, 139, 152], "further": [138, 152, 153, 169], "min_step": [138, 139, 152], "max_num_step": [138, 139, 152], "multipli": 138, "49": [138, 145], "axis2": [138, 139, 152], "02": 138, "_uniform_discret": [138, 139], "lt": [138, 139, 148, 150, 155, 160, 166, 170], "0x7fbe1c5ad4e0": 138, "gt": [138, 139, 148, 150, 155, 160, 166, 170], "07": 138, "09": 138, "11": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 155, 166, 168], "14": [138, 143, 145, 146, 149, 150, 155, 166, 168], "17": [138, 143, 145, 146, 149, 150, 155, 166], "19": [138, 143, 144, 145, 149, 150, 155, 166], "24": [138, 143, 145, 150, 155], "27": [138, 145, 150, 166], "28": [138, 145, 150], "29": [138, 145, 150, 155], "31": [138, 144, 145, 150], "32": [138, 144, 145, 150], "38": [138, 145], "41": [138, 143, 145, 155], "42": [138, 145], "43": [138, 145, 155], "45": [138, 145, 160], "46": [138, 141, 144, 145], "04": 138, "52": [138, 145, 150], "58": [138, 144, 145], "62": [138, 145, 150], "82": [138, 145], "84": [138, 145], "86": [138, 144, 145], "88": [138, 145], "92": [138, 143, 145], "94": [138, 144, 145, 155], "98": [138, 145], "summand": 138, "kept": 138, "axis3": 138, "mention": [138, 166], "55": [138, 145, 150, 155, 160], "57": [138, 145, 150, 155], "59": [138, 144, 145, 170], "81": [138, 145], "83": [138, 145, 155], "85": [138, 145, 160], "91": [138, 145], "93": [138, 144, 145], "95": [138, 145, 160], "97": [138, 145], "99": [138, 145, 155], "vice": 138, "versa": 138, "moreov": [138, 168], "wherefor": 138, "axis_t": 138, "axis4": 138, "0x7fbe1c5aee60": 138, "sublist": 138, "cerat": 138, "contrast": 138, "seen": 138, "axis5": 138, "0x7fbdd539f4f0": 138, "introduc": [139, 151, 152, 160, 161, 168], "effici": [139, 170], "003": [139, 152], "0x7fc53788ac20": 139, "0x7fc5784a6ce0": 139, "101": [139, 144, 145, 152], "transfer": [139, 168], "function_analysi": [139, 152], "example_energy_do": [139, 152], "example_dos_energi": [139, 152], "example_do": [139, 152], "safe_load": [139, 152], "line2d": [139, 148], "0x7fc52e2c1ab0": 139, "spectra_fp": 139, "fp": [139, 152], "fp_shift": 139, "test_shift": 139, "254196": 139, "el_bands_cp2k": [140, 163], "dict_kei": [140, 141, 143, 144, 168, 170], "cubic": [140, 142, 143, 170], "band_structure_do": [140, 142], "bands_plot": [140, 141, 142, 143, 144], "389": 140, "000": [140, 143], "865": 140, "591": 140, "test_band_structur": [140, 142, 143], "procedur": [140, 141, 142, 143, 156], "There": [140, 141, 142, 143, 159, 166], "el_pdos_cp2k": 140, "px": 140, "pz": 140, "d0": 140, "poject": [140, 141, 143], "awai": [140, 141, 143, 150, 170], "intens": 140, "reason": 140, "delta": 140, "dos_plot": [140, 141, 142, 143], "test_pdo": [140, 141, 143], "e_fermi": 140, "bands_dos_plot": [140, 141, 142, 143], "test_band_structure_do": [140, 141, 142, 143], "thu": [141, 145, 146, 150], "correct": [141, 153, 159, 163], "el_bands_fhi": 141, "w": [141, 142, 143], "l": [141, 142, 143], "163": 141, "164": [141, 150, 155], "258": 141, "259": 141, "305": 141, "306": 141, "329": 141, "aims_band": 141, "band_structure_soc": 141, "aims_bands_soc": 141, "el_pdos_fhi": 141, "p": [141, 143], "95590811": 141, "likewis": [141, 143, 155, 168], "dos_color": [141, 143], "dos_linestyl": [141, 143], "onto": [141, 143], "involv": [141, 143], "ks_dos_total_raw": 141, "dat": [141, 143], "no_soc": 141, "test_pdos_2": [141, 143], "along": [142, 154], "ref_cel": 142, "ph_bands_phonopi": 142, "phonopy_disp": 142, "force_set": 142, "thz": 142, "test_do": 142, "el_bands_q": 143, "692": 143, "151": 143, "181": 143, "204": 143, "own": [143, 145], "9678": 143, "pio": [143, 147, 163], "render": [143, 147, 163], "sphinx_galleri": [143, 147, 163], "5489999999999995": 143, "direct_gap_label": 143, "direct_gap_rel_dist": 143, "6020000000000003": 143, "vbm_label": 143, "vbm_rel_dist": 143, "00019999999999953388": 143, "830508": 143, "6021999999999998": 143, "cbm_label": 143, "cbm_rel_dist": 143, "596": 143, "label_min": 143, "rel_distance_min": 143, "label_max": 143, "rel_distance_max": 143, "296000000000001": 143, "rel_dist": 143, "2492": 143, "el_pdos_q": 143, "1_": 143, "2_px": 143, "2_py": 143, "2_pz": 143, "smoother": 143, "strength": 143, "ajust": 143, "test_pdos_smear": 143, "follwo": [143, 153], "And": [143, 144, 150, 155, 165, 166, 170], "strct_imp": [144, 150, 160, 169], "573763": [144, 150], "mp_openapi_kei": 144, "40": [144, 145, 160], "u": 144, "107": 144, "person": 145, "partial_data": 145, "zif_8_cl_struc": 145, "pc_critic2": 145, "zif": 145, "cl": [145, 146], "struc": 145, "zif_8_cl_comp": 145, "comp": 145, "zif_8_cl_imi": 145, "imi": 145, "zif_8_br_struc": 145, "br": [145, 146], "zif_8_br_comp": 145, "zif_8_br_imi": 145, "04080751": 145, "20870328": 145, "6766472": 145, "60243296": 145, "04921432": 145, "02320405": 145, "938178293": 145, "919212183": 145, "541557784": 145, "arrang": 145, "favor": 145, "manner": [145, 160, 165], "therefor": [145, 154, 155, 160, 164, 168, 170], "dictonari": 145, "h1": 145, "conjugated_network": 145, "index_struc": 145, "zn": 145, "90": [145, 151, 166, 168], "index_comp": 145, "index_imi": 145, "suppli": 145, "pc_plot": 145, "imidazol": [145, 146], "inch": 145, "hspace": 145, "wspace": 145, "rest": 145, "conjug": 145, "network": 145, "edd": 146, "variant": 146, "1021": [146, 149], "ac": [146, 149], "jpcc": 146, "3c06054": 146, "divid": [146, 153], "tw": 146, "inclus": 146, "replica": 146, "proj_posit": 146, "fct_grp": 146, "el_def_density_critic2": 146, "pw": 146, "scf_": 146, "del": [146, 166], "3f": 146, "874": 146, "443": 146, "500": [146, 150, 153], "954": 146, "584": 146, "078": 146, "182": 146, "120": 146, "213": [146, 150], "497": 146, "065": 146, "108": 146, "502": 146, "808": 146, "862": 146, "512": [146, 168], "845": 146, "147": [146, 150, 160], "956": 146, "004": 146, "941": 146, "248": 146, "839": 146, "328": 146, "951": 146, "121": 146, "912": 146, "262": 146, "sucessfulli": 146, "plane_data": 146, "rhodef_": 146, "pf_plot": 146, "frg_det": 146, "pd0": 146, "pos0": 146, "zip": 146, "symlog": 146, "color_map": 146, "rdbu_r": 146, "contour_fil": 146, "vmin": 146, "vmax": 146, "heatmap": 146, "accumul": 146, "isol": 146, "deplet": 146, "aa": 146, "unspecif": 147, "intuit": 147, "splot": [147, 164, 165], "c4": 147, "c1": [147, 164, 165], "black": [147, 156], "subpackag": [148, 156, 167], "linspac": 148, "sin": 148, "pi": 148, "figsiz": 148, "0x7fe1c0be5f90": 148, "spectroscopy_plot": 148, "test05": 148, "test2": 148, "One": [148, 150, 166], "simplest": 148, "begin": 148, "cc": 148, "11011011011011011": 148, "5005005005005005": 148, "990990990990991": 148, "3013013013013013": 148, "7017017017017018": 148, "1121121121121122": 148, "5125125125125125": 148, "9129129129129128": 148, "3133133133133135": 148, "7137137137137137": 148, "104104104104104": 148, "504504504504505": 148, "894894894894895": 148, "295295295295295": 148, "685685685685685": 148, "096096096096096": 148, "556556556556557": 148, "906906906906907": 148, "637637637637638": 148, "088088088088089": 148, "488488488488489": 148, "8988988988989": 148, "2992992992993": 148, "6996996996997": 148, "2753028157854998": 148, "3778171956807006": 148, "307310856712096": 148, "585848313972072": 148, "7009703848729834": 148, "8362939684295678": 148, "001319220011811": 148, "2002827147154207": 148, "426325468917883": 148, "656988878545343": 148, "8554855311586738": 148, "9803545786105294": 148, "9945390760666486": 148, "882108871892332": 148, "6546793874686188": 148, "408884476619347": 148, "759853330427267": 148, "5495999787851287": 148, "4027919061121286": 148, "8848716139762073": 148, "718168518822874": 148, "6064265856714756": 148, "521484133084698": 148, "4550775718142916": 148, "displai": 148, "noisi": 148, "smooth": 148, "orgin": 148, "inorgchem": 149, "0c02996": 149, "strct_coord_num": 149, "na2sbc": 149, "xsf": [149, 151, 168], "closest": 149, "inbetween": 149, "minimum_distance_delta": 149, "coordiant": 149, "consider": 149, "tweak": 149, "variou": 149, "develop": 149, "keeff": 149, "readili": [149, 150, 152, 156, 158, 163], "na": [149, 169], "048938040566": 149, "9856709594339996": 149, "1401849173675503e": 149, "985670959434": 149, "034609": 149, "site_index": 149, "7858803441915443e": 149, "1238758099096912e": 149, "083547040566": 149, "0368784969093668e": 149, "706877317564249e": 149, "total_cn": 149, "min_dist": 149, "max_dist": 149, "avg_dist": 149, "069218": 149, "835675523409463e": 149, "734014780936377e": 149, "strct_op": [149, 150, 151, 166], "throughput": [150, 156, 159, 160, 166, 167, 169, 171], "0082710": [150, 155], "request": [150, 156, 159], "webpag": 150, "advis": 150, "niqf1wboaeujho8h": 150, "opt": [150, 155, 170], "hostedtoolcach": [150, 155, 170], "x64": [150, 155, 170], "lib": [150, 155, 170], "python3": [150, 155, 157, 170], "ext": 150, "matproj_legaci": 150, "userwarn": 150, "you": [150, 158, 169], "mprester": 150, "longer": 150, "consult": 150, "doc": [150, 156, 159], "2020_09_08": 150, "0x7f5b1f1f2d70": 150, "0x7f5b1a9e7490": 150, "download": 150, "len": [150, 152], "156": 150, "124": [150, 155], "Not": [150, 169], "might": 150, "indentifi": 150, "aiida_script": 150, "structure_analysi": [150, 167], "upon": [150, 166, 170], "cunksiz": 150, "oqmd_676192": 150, "mp_mp": 150, "1055940": 150, "oqmd_676503": 150, "oqmd_676504": 150, "oqmd_621965": 150, "oqmd_620946": 150, "oqmd_677954": 150, "oqmd_676288": 150, "oqmd_1280348": 150, "oqmd_1215022": 150, "oqmd_690486": 150, "oqmd_676083": 150, "oqmd_675565": 150, "oqmd_675564": 150, "oqmd_676082": 150, "oqmd_686178": 150, "again": [150, 155, 163, 166, 168], "structures_mp": 150, "structures_oqmd": 150, "better": 150, "df_mp": 150, "icsd_id": 150, "magnetic_mo": 150, "el_conc_c": [150, 166], "el_conc_t": 150, "nr_atoms_c": [150, 166], "nr_atoms_t": 150, "source_id": 150, "1012110": 150, "000000": [150, 168], "mp_2020_09_08": 150, "046335": 150, "949029": 150, "223": 150, "046690": 150, "225": 150, "041371": 150, "573579": 150, "053976": 150, "639727": 150, "194": 150, "026213": 150, "1183897": 150, "038677": 150, "672241": 150, "135": 150, "065470": 150, "229": 150, "038770": 150, "11832": 150, "035109": 150, "1096915": 150, "042218": 150, "1007976": 150, "054917": 150, "1184151": 150, "217": 150, "1183694": 150, "139": [150, 155], "037375": 150, "141": 150, "097650": 150, "1178932": 150, "166": 150, "054101": 150, "9924": 150, "127402": 150, "1178952": 150, "049131": 150, "1064307": 150, "122781": 150, "152": 150, "567313": 150, "154": [150, 155], "000024": 150, "570459": 150, "043651": 150, "105": 150, "047063": 150, "10654": 150, "221": 150, "046556": 150, "8361": 150, "500000": 150, "847515": 150, "1178386": 150, "200000": 150, "800000": 150, "391677": 150, "620471": 150, "120000": 150, "880000": 150, "212136": 150, "022870": 150, "666667": 150, "333333": 150, "991598": 150, "505464": 150, "133333": 150, "866667": 150, "257485": 150, "003632": 150, "1205022": 150, "125000": 150, "875000": 150, "128": 150, "112": 150, "130": 150, "214743": 150, "030055": 150, "505634": 150, "400000": 150, "600000": 150, "742686": 150, "1188281": 150, "625000": 150, "375000": 150, "955132": 150, "000445": 150, "1191593": 150, "204884": 150, "030122": 150, "df_oqmd": 150, "phase_diagram": 150, "nr": [150, 161], "notic": [150, 169], "imbal": 150, "due": [150, 153, 167], "fact": 150, "experiment": [150, 160], "often": 150, "easier": 150, "compound": 150, "counteract": 150, "trend": [150, 154], "cation": 150, "anion": 150, "ion": 150, "oxid": 150, "varieti": 150, "rb": 150, "se": 150, "0x7f5afc4d1e70": 150, "0x7f5b0b22b2e0": 150, "structures_subst": 150, "quit": [150, 163], "less": [150, 168], "strict": 150, "keep": [150, 155], "our": [150, 158], "133": 150, "attempt": 150, "000000e": 150, "src": 150, "spacegroup": [150, 151, 166, 168], "750000e": 150, "512500e": 150, "405": [150, 153], "286875e": 150, "072531e": 150, "868905e": 150, "675459e": 150, "491686e": 150, "317102e": 150, "151247e": 150, "993685e": 150, "8360_subst": 150, "rbc": 150, "568745_subst": 150, "1397_subst": 150, "1011696_subst": 150, "sete": 150, "oqmd_647134": 150, "7670_subst": 150, "kc": 150, "7447_subst": 150, "644_subst": 150, "755633_subst": 150, "1009489_subst": 150, "oqmd_1104417": 150, "1059621_subst": 150, "1061530_subst": 150, "1009491_subst": 150, "oqmd_1222159": 150, "oqmd_1593007": 150, "oqmd_1239241": [150, 169], "1747_subst": 150, "oqmd_1343671": [150, 169], "441_subst": 150, "8426_subst": 150, "11327_subst": 150, "1011695_subst": 150, "31002_subst": 150, "oqmd_1800027": 150, "2095_subst": 150, "7289_subst": 150, "9064_subst": 150, "1554_subst": 150, "9268_subst": 150, "9063_subst": 150, "1080254_subst": 150, "383_subst": 150, "1180659_subst": 150, "1080121_subst": 150, "620372_subst": 150, "18609_subst": 150, "541055_subst": 150, "subst_structur": [150, 166], "df_subst": 150, "subst": 150, "clearli": 150, "oganov": 151, "vall": 151, "1107": 151, "s0108767310026395": 151, "definit": [151, 152], "wise": 151, "gaa": [151, 166, 168, 170], "066": [151, 166, 168, 170], "gaas_prim": 151, "ga": [151, 166, 168, 170], "216": [151, 166, 168], "cellpar": [151, 166, 168], "primitive_cel": [151, 166, 168], "gaas_conv": [151, 166, 168], "vesta": 151, "strct_collect": 151, "prim": 151, "conv": 151, "contribut": [151, 162], "ang": 151, "1102230246251565e": 151, "itselv": 152, "usag": [152, 153, 156], "aforment": 152, "fingerpint": 152, "example_notebook": [152, 163], "fa": 152, "test_set": [152, 160], "test_set_shift": 152, "distance_method": 152, "2f": 152, "610": [152, 153], "accomplish": [152, 155, 156, 160, 163], "260014": 152, "inherit": [153, 163, 166], "restartworkchain": 153, "understood": 153, "calculationjob": 153, "facilit": [153, 154, 156, 160, 166], "cell_opt": 153, "ddec": 153, "chargemol": [153, 156], "planar_field": 153, "electronic_properti": 153, "surface_opt": 153, "obei": 153, "399": 153, "These": [153, 164], "reserv": 153, "599": 153, "699": 153, "700": 153, "799": 153, "error_out_of_walltim": 153, "401": 153, "error_interrupt": 153, "did": 153, "properli": 153, "402": 153, "error_odd_nr_electron": 153, "uk": 153, "rok": 153, "403": 153, "error_need_added_mo": 153, "404": 153, "error_ill_conditioned_matrix": 153, "choleski": 153, "decompos": 153, "ill": 153, "error_bad_condition_numb": 153, "bad": 153, "r_cond": 153, "error_geometry_convergence_not_reach": 153, "ionic": 153, "error_input_wrong_valu": 153, "unsupport": 153, "601": 153, "error_input_depend": 153, "parameter1": 153, "parameter2": 153, "602": 153, "error_input_log": 153, "error_scf_paramet": 153, "611": 153, "error_calculation_abort": 153, "612": 153, "error_optimization_not_converg": 153, "701": 153, "error_cell_opt": 153, "702": 153, "error_band_structur": 153, "703": 153, "error_eigenvalu": 153, "704": 153, "error_pdo": 153, "larg": [154, 160, 163], "fashion": [154, 156], "bring": 154, "challeng": 154, "offer": [154, 160, 166, 167, 168, 169], "friendli": 154, "easi": 154, "reli": 154, "strongli": 154, "recommend": [154, 157, 158, 160], "familiar": [154, 158], "principl": [154, 162, 167], "pacakg": 154, "studi": [154, 156, 160, 166], "predefin": [154, 155], "instal": [154, 156, 157, 158, 159], "visibl": 154, "verdi": 154, "conjunct": 155, "examplifi": [155, 163], "appropri": [155, 163], "load_profil": [155, 166, 170], "wf_builder": 155, "section": [155, 156, 162, 163], "general_input": 155, "preset": 155, "_v": 155, "denot": [155, 165, 170], "omit": 155, "purpos": [155, 167, 169, 170], "seek": [155, 159], "mof": 155, "dft": [155, 156], "preopt": 155, "inorgan": [155, 160], "loos": 155, "add_multipli": 155, "task_1": 155, "task_2": 155, "task_3": 155, "task_4": 155, "histori": 155, "datafactori": 155, "349": 155, "aiidadeprecationwarn": 155, "warn_deprec": 155, "subsequ": 155, "greater": 155, "next_possible_task": 155, "wc_builder": 155, "continu": 155, "straightawai": [155, 169], "meth": 155, "block": [155, 170], "background": [155, 167], "workfunctionnod": 155, "872b6d30": 155, "cc56": 155, "4cc0": 155, "85d4": 155, "09d56d3a2871": 155, "9836b302": 155, "c3a4": 155, "4e7c": 155, "91ea": 155, "c7dd08d1d638": 155, "2460": 155, "built": [155, 161], "mwf_builder": 155, "nbsp": 155, "dep": 155, "miss": 155, "114": 155, "190": 155, "119": [155, 166], "144": 155, "169": 155, "195": 155, "149": 155, "174": 155, "104": 155, "129": 155, "179": 155, "205": 155, "109": 155, "134": [155, 168], "159": 155, "184": 155, "210": 155, "res_1": 155, "test_unit": 155, "res_2": 155, "54324": 155, "366128": 155, "1251180": 155, "3145032": 155, "test_workflow": 155, "mwf_builder2": 155, "autom": 156, "initio": 156, "toolkit": 156, "theori": 156, "assist": 156, "everi": 156, "overal": 156, "mine": 156, "capabl": [156, 167], "driven": 156, "enumlib": 156, "modular": 156, "easili": 156, "care": 156, "public": 156, "quantit": 156, "infrastructur": [156, 159], "exploit": [156, 160], "structuretransform": 156, "integr": 156, "diagram": 156, "sci": 156, "kit": 156, "welcom": 156, "discuss": 156, "issu": 156, "suggest": 156, "pull": 156, "guidelin": 156, "abid": [156, 169], "pep": 156, "googl": 156, "flake8": 156, "diff": 156, "pytest": 156, "coverag": 156, "abl": 156, "explain": 156, "snippet": 156, "docstr": 156, "dedic": [156, 164], "commit": 156, "pip": [156, 157, 158, 159], "virtual": 157, "venv": 157, "env": 157, "programm": 158, "cmd": 158, "powershel": 158, "help": [158, 163], "comfort": 158, "jump": 158, "enviro": 158, "click": 158, "select": 158, "recent": [158, 170], "plai": [158, 166], "button": 158, "linux": 159, "window": 159, "mac": 159, "come": [159, 166], "ASE": [159, 168], "tqdm": 159, "demand": [159, 166, 168], "crystal_structure_gener": 159, "database_interfac": 159, "msgpack": 159, "boto3": 159, "qmpy": 159, "rester": 159, "secondari": 159, "libari": 160, "strct_c": [160, 166], "train_test_split_crystals_ref": 160, "pbe_csp_c": 160, "te_cryst": 160, "preopt_wo_dup": 160, "h5": [160, 166], "good": 160, "establish": 160, "took": 160, "prevent": [160, 169], "leakag": 160, "mani": [160, 161, 168], "disadvantag": 160, "unbalanc": 160, "classif": 160, "problem": 160, "stratifi": 160, "categori": 160, "idea": 160, "comp_bin": 160, "train_set": 160, "train_target": 160, "test_target": 160, "126": 160, "baseestim": [160, 161], "ffprint_transf": 160, "deman": 160, "nproc": 160, "0x7f7381929870": 160, "0x7f738192a320": 160, "workload": 160, "augment": 160, "thorough": 160, "build": [160, 170], "ridg": [160, 161], "regress": [160, 161], "sklearn": 160, "kernel_ridg": 160, "kernelridg": 160, "pline": 160, "krr": 160, "017012031254770577": 160, "benefit": 160, "strct_c_csp": 160, "cs2te": [160, 169], "grid_search": 160, "fit_info": 160, "22824852163280937": 160, "trigon": 160, "21982255341797527": 160, "perdiod": 161, "prdf": [161, 162, 168], "bodi": 161, "topic": 162, "focus": 162, "regard": 162, "intend": 162, "sometim": 163, "overwritten": [163, 166], "manifold": 163, "matplotlib_style_sheet": 163, "custom_set": 163, "mplstyle": 163, "bunch": 163, "custom_": 163, "popular": 163, "stylesheet": 163, "spcific": 164, "_data": 164, "demonstr": 164, "c0": [164, 165], "c2": 165, "easiest": 165, "structure_dict": 166, "benzen": 166, "7040": 166, "2194": 166, "0000": [166, 168], "4081": 166, "2152": 166, "1048": 166, "4304": 166, "763": 166, "477": 166, "water": 166, "unit_cel": 166, "li": 166, "append_atom": 166, "strct_c2": 166, "summari": 166, "c6h6": 166, "oh2": 166, "ga4as4": [166, 168], "li2": 166, "el_conc_h": 166, "nr_atoms_h": 166, "1190": 166, "7630": 166, "4770": 166, "5000": [166, 168], "store_in_aiidadb": 166, "import_from_aiidadb": 166, "append_to_col": 166, "8162": 166, "behav": 166, "advantag": 166, "598076211353316": 166, "750192323029818": 166, "0x7f45fd326c20": 166, "598076": 166, "750192": 166, "al": [166, 168], "gaas_subst": 166, "gaal": 166, "al4as4": [166, 168], "0987": [166, 168], "531": [166, 168], "1797": [166, 168], "0493": [166, 168], "0740": [166, 168], "7500": [166, 168], "0247": [166, 168], "2500": [166, 168], "1320": [166, 168], "537": [166, 168], "7645": [166, 168], "0660": [166, 168], "0990": [166, 168], "0330": [166, 168], "regardless": 166, "handi": [166, 168], "flowchart": 167, "central": 167, "frequent": 167, "datacontain": 167, "randomli": [167, 169], "program": 167, "affect": 167, "interfer": 167, "unrel": 167, "deepcopi": 167, "structru": 168, "strct_molecul": 168, "008000": 168, "950353": 168, "336000": 168, "475176": 168, "823029": 168, "oxidation_st": 168, "strct_crystal": [168, 170], "0660001": [168, 170], "creation": 168, "must": 168, "7502": 168, "4411": 168, "from_": 168, "strct_crystal_conv": 168, "gaas_cryst": 168, "equivalent_sit": 168, "wyckoff": 168, "43m": 168, "td": 168, "43mf": 168, "centrosymmetr": 168, "suffici": 168, "induc": 168, "spefici": 168, "strct_crystal_as": 168, "strct_crystal_gaa": 168, "frequenetli": 168, "_analysis_": 168, "_manipulation_": 168, "calculate_n_el": 168, "def": 168, "determine_n_el": 168, "els": 168, "n_element": 168, "add_atom": 168, "occur": 168, "new_structur": 168, "site_attr": 168, "val": 168, "_add": 168, "nh3": 168, "0080": 168, "9504": 168, "3360": 168, "4752": 168, "8230": 168, "molecule_add": 168, "nh4": 168, "stoichiometri": [169, 170], "cs2te_structur": 169, "nasb_structur": 169, "116": 169, "oqmd_6763": 169, "cs8te4": 169, "cs4te2": 169, "oqmd_1343380": 169, "oqmd_1473530": 169, "oqmd_1343518": 169, "cs18sb6": 169, "oqmd_1339303": 169, "cs12sb4": 169, "oqmd_1521868": 169, "cs6sb2": 169, "oqmd_1376097": 169, "cs5sb4": 169, "oqmd_650085": 169, "cs20sb32": 169, "constraintsto": 169, "na3sb": 169, "na6sb2": 169, "na2sb2": 169, "structures_nasb": 169, "oqmd_8534": 169, "chem": 169, "doesn": 169, "oqmd_8535": 169, "na2": 169, "oqmd_30779": 169, "na3": 169, "oqmd_1214546": 169, "oqmd_1214635": 169, "oqmd_1214724": 169, "na4": 169, "oqmd_1214813": 169, "na29": 169, "oqmd_1214902": 169, "na20": 169, "oqmd_1214991": 169, "na8": 169, "oqmd_1215080": 169, "oqmd_1215169": 169, "oqmd_1215258": 169, "oqmd_1215347": 169, "oqmd_1215437": 169, "oqmd_1215526": 169, "oqmd_1215615": 169, "oqmd_1215704": 169, "oqmd_1215793": 169, "oqmd_1215882": 169, "oqmd_1215971": 169, "oqmd_1216063": 169, "oqmd_1277928": 169, "na28": 169, "oqmd_2030325": 169, "oqmd_2030329": 169, "oqmd_2015716": 169, "oqmd_2030326": 169, "oqmd_2054101": 169, "na48": 169, "oqmd_31044": 169, "oqmd_9214": 169, "oqmd_18780": 169, "oqmd_9672": 169, "oqmd_9221": 169, "oqmd_18986": 169, "oqmd_51014": 169, "oqmd_92588": 169, "oqmd_670516": 169, "oqmd_1215725": 169, "oqmd_676194": 169, "oqmd_1214567": 169, "oqmd_1214656": 169, "oqmd_1214745": 169, "oqmd_1214834": 169, "oqmd_1214923": 169, "oqmd_1215012": 169, "oqmd_1215101": 169, "oqmd_1215190": 169, "oqmd_1215279": 169, "oqmd_1215368": 169, "oqmd_1215458": 169, "oqmd_1215547": 169, "oqmd_1215636": 169, "oqmd_1215814": 169, "oqmd_1215903": 169, "oqmd_1215992": 169, "oqmd_1216084": 169, "oqmd_676462": 169, "oqmd_1277930": 169, "oqmd_1280366": 169, "oqmd_1522240": 169, "oqmd_1787572": 169, "oqmd_306088": 169, "nasb": 169, "oqmd_327172": 169, "oqmd_337630": 169, "oqmd_5018": 169, "na8sb8": 169, "oqmd_1105273": 169, "oqmd_1108400": 169, "na4sb4": 169, "oqmd_1223474": 169, "oqmd_1230445": 169, "oqmd_1798866": 169, "oqmd_1240145": 169, "na2sb4": 169, "oqmd_1280912": 169, "na4sb8": 169, "oqmd_1435987": 169, "oqmd_1592744": 169, "oqmd_302790": 169, "nasb3": 169, "oqmd_313332": 169, "oqmd_321867": 169, "na2sb6": 169, "oqmd_346353": 169, "oqmd_1277608": 169, "oqmd_1798772": 169, "oqmd_1438117": 169, "na4sb20": 169, "oqmd_1603356": 169, "nasb5": 169, "oqmd_1240146": 169, "na4sb2": 169, "oqmd_1589918": 169, "oqmd_1340253": 169, "na6sb4": 169, "oqmd_1340156": 169, "na8sb6": 169, "oqmd_1339841": 169, "na5sb4": 169, "oqmd_5156": 169, "oqmd_300783": 169, "oqmd_311325": 169, "oqmd_323874": 169, "oqmd_348360": 169, "oqmd_2030774": 169, "122": 169, "random_cryst": 169, "pyxtal_8b1b7852043c482cb3637ae59e42b112": 169, "cs12te6": 169, "pyxtal_b7dde46a1439449ebbec70197cb71788": 169, "pyxtal_48157b8479b24f5792c210def0d39b3": 169, "otain": 170, "applic": 170, "s41524": 170, "024": 170, "01224": 170, "surf_gen": 170, "low": 170, "110": 170, "111": 170, "quickli": 170, "surfaces_100": 170, "primitv": 170, "repetit": 170, "asymmetr": 170, "unequival": 170, "gaas_100_1": 170, "ga22as20": 170, "gaas_100_2": 170, "as22ga20": 170, "surf_detail": 170, "bottom_structur": 170, "top_structur": 170, "top_structure_nsym": 170, "stoichiometr": 170, "exactli": 170, "fly": 170, "surf_nod": 170, "gaas_100_surfac": 170, "hash": 170, "_get_objects_to_hash": 170, "importlib": 170, "import_modul": 170, "top_level_modul": 170, "__version__": 170, "_get_hash": 170, "make_hash": 170, "hashingerror": 170, "exc": 170, "bdce3585": 170, "a1d2": 170, "4e85": 170, "bbfa": 170, "6a31f3901904": 170, "218": 170, "9f644c9b": 170, "31bf": 170, "4e0a": 170, "9d15": 170, "06091b61ad3d": 170, "219": 170}, "objects": {"": [[64, 0, 0, 1, "aim2dat", ""]], "aim2dat": [[3, 0, 0, 1, "aiida_data", ""], [37, 0, 0, 1, "aiida_workflows", ""], [47, 0, 0, 1, "ext_interfaces", ""], [62, 0, 0, 1, "fct", ""], [72, 0, 0, 1, "io", ""], [80, 0, 0, 1, "ml", ""], [86, 0, 0, 1, "plots", ""], [109, 0, 0, 1, "strct", ""], [131, 0, 0, 1, "utils", ""]], "aim2dat.aiida_data": [[2, 0, 0, 1, "gaussian_cube_data", ""], [4, 0, 0, 1, "surface_data", ""]], "aim2dat.aiida_data.gaussian_cube_data": [[2, 1, 1, 0, "GaussianCubeData", "Bases: aiida.orm.Data"]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData": [[2, 2, 1, 0, "Collection", "Return the collection type for this class."], [2, 3, 1, 0, "atomic_charges", "Return the atomic charges."], [2, 3, 1, 0, "atomic_numbers", "Return the atomic numbers."], [2, 3, 1, 0, "atomic_positions", "Return the atomic positions (in bohr)."], [2, 3, 1, 0, "backend", "Get the backend for this entity"], [2, 3, 1, 0, "backend_entity", "Get the implementing class for this object"], [2, 2, 1, 0, "base", "Return the node base namespace."], [2, 3, 1, 0, "cell", "Return the cell."], [2, 2, 1, 0, "class_node_type", "Returns the node type of this node (sub) class."], [2, 2, 1, 0, "clone", "Create a clone of the Data node."], [2, 2, 1, 0, "collection", "Get a collection for objects of this type, with the default backend."], [2, 3, 1, 0, "comment", "Return the second line of the cube file."], [2, 3, 1, 0, "computer", "Return the computer of this node."], [2, 2, 1, 0, "convert", "Convert the AiiDA StructureData into another python object"], [2, 3, 1, 0, "creator", "Return the creator of this node or None if it does not exist."], [2, 3, 1, 0, "ctime", "Return the node ctime."], [2, 3, 1, 0, "description", "Return the node description."], [2, 3, 1, 0, "dset_ids", "Return the data set identifiers."], [2, 2, 1, 0, "entry_point", "Return the entry point associated this node class."], [2, 2, 1, 0, "export", "Save a Data object to a file."], [2, 2, 1, 0, "get", "Get an entity of the collection matching the given filters."], [2, 2, 1, 0, "get_collection", "Get a collection for objects of this type for a given backend."], [2, 2, 1, 0, "get_content", "Get content of the cube file."], [2, 2, 1, 0, "get_cube_data", "Get cube data points."], [2, 2, 1, 0, "get_description", "Return a string with a description of the node."], [2, 2, 1, 0, "get_export_formats", "Get the list of valid export format strings"], [2, 2, 1, 0, "get_structure", "Get underlying structure."], [2, 3, 1, 0, "id", "Return the id for this entity."], [2, 2, 1, 0, "importfile", "Populate a Data object from a file."], [2, 2, 1, 0, "importstring", "Converts a Data object to other text format."], [2, 2, 1, 0, "initialize", "Initialize instance attributes."], [2, 3, 1, 0, "is_stored", "Return whether the entity is stored."], [2, 3, 1, 0, "is_valid_cache", "Hook to exclude certain Node classes from being considered a valid cache."], [2, 3, 1, 0, "label", "Return the node label."], [2, 3, 1, 0, "logger", "Return the logger configured for this Node."], [2, 3, 1, 0, "mtime", "Return the node mtime."], [2, 3, 1, 0, "node_type", "Return the node type."], [2, 2, 1, 0, "objects", "Get a collection for objects of this type, with the default backend."], [2, 2, 1, 0, "open_cube", "Open cube file."], [2, 3, 1, 0, "origin", "Return the origin of the data."], [2, 3, 1, 0, "pk", "Return the primary key for this entity."], [2, 3, 1, 0, "process_type", "Return the node process type."], [2, 2, 1, 0, "set_from_file", "Set information from existing cube file."], [2, 2, 1, 0, "set_source", "Sets the dictionary describing the source of Data object."], [2, 3, 1, 0, "shape", "Return the number of points in each direction."], [2, 3, 1, 0, "source", "Gets the dictionary describing the source of Data object. Possible fields:"], [2, 2, 1, 0, "store", "Store the node in the database while saving its attributes and repository directory."], [2, 2, 1, 0, "store_all", "Store the node, together with all input links."], [2, 3, 1, 0, "title", "Return the title of the cube file."], [2, 3, 1, 0, "user", "Return the user of this node."], [2, 3, 1, 0, "uuid", "Return the node UUID."]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.convert": [[2, 4, 2, 0, "object_format", "Specify the output format"]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.export": [[2, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [2, 4, 2, 0, "kwargs", "additional parameters to be passed to the _exportcontent method"], [2, 4, 2, 0, "overwrite", "if set to True, overwrites file found at path. Default=False"]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_collection": [[2, 4, 2, 0, "backend", "The backend of the collection to use."]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importfile": [[2, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [2, 4, 2, 0, "fname", "string with file name. Can be an absolute or relative path."]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importstring": [[2, 4, 2, 0, "fileformat", "a string (the extension) to describe the file format."]], "aim2dat.aiida_data.surface_data": [[4, 1, 1, 0, "SurfaceData", "Bases: aiida.orm.Data"]], "aim2dat.aiida_data.surface_data.SurfaceData": [[4, 2, 1, 0, "Collection", "Return the collection type for this class."], [4, 3, 1, 0, "aperiodic_dir", "Non-periodic direction of the slab."], [4, 3, 1, 0, "backend", "Get the backend for this entity"], [4, 3, 1, 0, "backend_entity", "Get the implementing class for this object"], [4, 2, 1, 0, "base", "Return the node base namespace."], [4, 3, 1, 0, "bottom_terminating_structure", "Bottom terminating structure of the surface."], [4, 2, 1, 0, "class_node_type", "Returns the node type of this node (sub) class."], [4, 2, 1, 0, "clone", "Create a clone of the Data node."], [4, 2, 1, 0, "collection", "Get a collection for objects of this type, with the default backend."], [4, 3, 1, 0, "computer", "Return the computer of this node."], [4, 2, 1, 0, "convert", "Convert the AiiDA StructureData into another python object"], [4, 3, 1, 0, "creator", "Return the creator of this node or None if it does not exist."], [4, 3, 1, 0, "ctime", "Return the node ctime."], [4, 3, 1, 0, "description", "Return the node description."], [4, 2, 1, 0, "entry_point", "Return the entry point associated this node class."], [4, 2, 1, 0, "export", "Save a Data object to a file."], [4, 2, 1, 0, "get", "Get an entity of the collection matching the given filters."], [4, 2, 1, 0, "get_collection", "Get a collection for objects of this type for a given backend."], [4, 2, 1, 0, "get_description", "Return a string with a description of the node."], [4, 2, 1, 0, "get_export_formats", "Get the list of valid export format strings"], [4, 3, 1, 0, "id", "Return the id for this entity."], [4, 2, 1, 0, "importfile", "Populate a Data object from a file."], [4, 2, 1, 0, "importstring", "Converts a Data object to other text format."], [4, 2, 1, 0, "initialize", "Initialize instance attributes."], [4, 3, 1, 0, "is_stored", "Return whether the entity is stored."], [4, 3, 1, 0, "is_valid_cache", "Hook to exclude certain Node classes from being considered a valid cache."], [4, 3, 1, 0, "label", "Return the node label."], [4, 3, 1, 0, "logger", "Return the logger configured for this Node."], [4, 3, 1, 0, "miller_indices", "Miller indices of the surface facet."], [4, 3, 1, 0, "mtime", "Return the node mtime."], [4, 3, 1, 0, "node_type", "Return the node type."], [4, 2, 1, 0, "objects", "Get a collection for objects of this type, with the default backend."], [4, 3, 1, 0, "pk", "Return the primary key for this entity."], [4, 3, 1, 0, "process_type", "Return the node process type."], [4, 3, 1, 0, "repeating_structure", "Repeating structure of the surface."], [4, 2, 1, 0, "set_bottom_terminating_structure", "Set bottom-terminating non-symmetric structure."], [4, 2, 1, 0, "set_repeating_structure", "Set repeating structure."], [4, 2, 1, 0, "set_source", "Sets the dictionary describing the source of Data object."], [4, 2, 1, 0, "set_top_terminating_structure", "Set top-terminating structure."], [4, 2, 1, 0, "set_top_terminating_structure_nsym", "Set top-terminating non-symmetric structure."], [4, 3, 1, 0, "source", "Gets the dictionary describing the source of Data object. Possible fields:"], [4, 2, 1, 0, "store", "Store the node in the database while saving its attributes and repository directory."], [4, 2, 1, 0, "store_all", "Store the node, together with all input links."], [4, 3, 1, 0, "surface_area", "Surface area."], [4, 3, 1, 0, "termination", "Termination of the surface facet."], [4, 3, 1, 0, "top_terminating_structure", "Top terminating structure of the surface."], [4, 3, 1, 0, "top_terminating_structure_nsym", "Top terminating non-symmetric structure of the surface."], [4, 3, 1, 0, "user", "Return the user of this node."], [4, 3, 1, 0, "uuid", "Return the node UUID."]], "aim2dat.aiida_data.surface_data.SurfaceData.convert": [[4, 4, 2, 0, "object_format", "Specify the output format"]], "aim2dat.aiida_data.surface_data.SurfaceData.export": [[4, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [4, 4, 2, 0, "kwargs", "additional parameters to be passed to the _exportcontent method"], [4, 4, 2, 0, "overwrite", "if set to True, overwrites file found at path. Default=False"]], "aim2dat.aiida_data.surface_data.SurfaceData.get_collection": [[4, 4, 2, 0, "backend", "The backend of the collection to use."]], "aim2dat.aiida_data.surface_data.SurfaceData.importfile": [[4, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [4, 4, 2, 0, "fname", "string with file name. Can be an absolute or relative path."]], "aim2dat.aiida_data.surface_data.SurfaceData.importstring": [[4, 4, 2, 0, "fileformat", "a string (the extension) to describe the file format."]], "aim2dat.aiida_workflows": [[5, 0, 0, 1, "_workflow_builder_utils", ""], [7, 0, 0, 1, "chargemol", ""], [23, 0, 0, 1, "cp2k", ""], [31, 0, 0, 1, "critic2", ""], [35, 0, 0, 1, "enumlib", ""], [38, 0, 0, 1, "utils", ""], [39, 0, 0, 1, "workflow_builder", ""]], "aim2dat.aiida_workflows.chargemol": [[6, 0, 0, 1, "calcjobs", ""], [8, 0, 0, 1, "parsers", ""]], "aim2dat.aiida_workflows.chargemol.calcjobs": [[6, 1, 1, 0, "ChargemolCalculation", "Bases: aiida.engine.CalcJob"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation": [[6, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [6, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [6, 2, 1, 0, "build_process_type", "The process type."], [6, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [6, 2, 1, 0, "define", "Define input/output and outline."], [6, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [6, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [6, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [6, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [6, 2, 1, 0, "get_builder", ""], [6, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [6, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [6, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [6, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [6, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [6, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [6, 2, 1, 0, "init", ""], [6, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [6, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [6, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [6, 5, 1, 0, "link_label_retrieved", ""], [6, 2, 1, 0, "load_instance_state", "Load instance state."], [6, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [6, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [6, 2, 1, 0, "on_create", "Called when a Process is created."], [6, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [6, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [6, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [6, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [6, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [6, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [6, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [6, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [6, 2, 1, 0, "out", "Attach output to output port."], [6, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [6, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [6, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [6, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [6, 2, 1, 0, "prepare_for_submission", "Prepare for submission."], [6, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [6, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [6, 2, 1, 0, "run", "Run the calculation job."], [6, 3, 1, 0, "runner", "Get process runner."], [6, 2, 1, 0, "save_instance_state", "Save instance state."], [6, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [6, 2, 1, 0, "spec", ""], [6, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [6, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [6, 2, 1, 0, "submit", "Submit process for execution."], [6, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [6, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [6, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys": [[6, 5, 1, 0, "CALC_ID", ""], [6, 2, 1, 0, "name", "The name of the Enum member."], [6, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.decode_input_args": [[6, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.encode_input_args": [[6, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_inputs": [[6, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [6, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [6, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_outputs": [[6, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [6, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [6, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_exit_statuses": [[6, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_importer": [[6, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.kill": [[6, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.load_instance_state": [[6, 4, 2, 0, "load_context", ""], [6, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_except": [[6, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_finish": [[6, 4, 2, 0, "result", "result of the process"], [6, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_output_emitting": [[6, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [6, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_paused": [[6, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out": [[6, 4, 2, 0, "output_port", "name of output port"], [6, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out_many": [[6, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse": [[6, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.presubmit": [[6, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.report": [[6, 4, 2, 0, "args", "args to pass to the log call"], [6, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [6, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.set_status": [[6, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.submit": [[6, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.terminate": [[6, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.chargemol.parsers": [[8, 1, 1, 0, "ChargemolParser", "Bases: aiida.parsers.Parser"]], "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser": [[8, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [8, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [8, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [8, 3, 1, 0, "node", "Return the node instance"], [8, 2, 1, 0, "out", "Register a node as an output with the given link label."], [8, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [8, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [8, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [8, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.out": [[8, 4, 2, 0, "link_label", "the name of the link label"], [8, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.parse_from_node": [[8, 4, 2, 0, "node", "a CalcJobNode instance"], [8, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [8, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k": [[9, 0, 0, 1, "auxiliary_functions", ""], [10, 0, 0, 1, "band_structure_work_chain", ""], [11, 0, 0, 1, "calcjobs", ""], [12, 0, 0, 1, "cell_opt_work_chain", ""], [13, 0, 0, 1, "combined_work_chains", ""], [14, 0, 0, 1, "core_work_chain_handlers", ""], [15, 0, 0, 1, "core_work_chain_inputs", ""], [16, 0, 0, 1, "core_work_chain_opt", ""], [17, 0, 0, 1, "core_work_chain_scf", ""], [18, 0, 0, 1, "cube_work_chain", ""], [19, 0, 0, 1, "eigenvalues_work_chain", ""], [20, 0, 0, 1, "el_properties_utils", ""], [21, 0, 0, 1, "find_scf_p_work_chain", ""], [22, 0, 0, 1, "geo_opt_work_chain", ""], [24, 0, 0, 1, "parsers", ""], [25, 0, 0, 1, "partial_charges_work_chain", ""], [26, 0, 0, 1, "pdos_work_chain", ""], [27, 0, 0, 1, "planar_fields_work_chain", ""], [28, 0, 0, 1, "surface_opt_utils", ""], [29, 0, 0, 1, "work_chain_specs", ""]], "aim2dat.aiida_workflows.cp2k.auxiliary_functions": [[9, 6, 1, 0, "calc_nr_explicit_electrons", "Determine the number of valence electrons based on the structure and the pseudopotential name."], [9, 6, 1, 0, "calculate_added_mos", "Calculate the number of unoccupied states based on the number of electrons and the smearing temperature."], [9, 6, 1, 0, "create_aiida_node", "Create AiiDA data node from standard python variable."], [9, 6, 1, 0, "estimate_comp_resources", "Estimate the number of nodes based on the number of electrons."], [9, 6, 1, 0, "return_rec_space_eigenvalues", "Calcfuntion that summarizes information on the eigenvalues and 1st Brillouin zone."], [9, 6, 1, 0, "return_runtime_stats", "Return runtime statistics of the work chain."], [9, 6, 1, 0, "return_scf_parameters", "Aiida calcfuntion that creates a dictionary of the mixing parameters."], [9, 6, 1, 0, "return_work_chain_info", "Return general information of the work chain."], [9, 6, 1, 0, "set_xc_functional", "Set the parameters for the exchange-correlation functional in the input-paramters."]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain": [[10, 1, 1, 0, "BandStructureWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain": [[10, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [10, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [10, 2, 1, 0, "build_process_type", "The process type."], [10, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [10, 3, 1, 0, "ctx", "Get the context."], [10, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [10, 2, 1, 0, "define", "Specify inputs and outputs."], [10, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [10, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [10, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [10, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [10, 2, 1, 0, "get_builder", ""], [10, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [10, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [10, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [10, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [10, 2, 1, 0, "get_process_handlers", ""], [10, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [10, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [10, 2, 1, 0, "init", ""], [10, 2, 1, 0, "initialize_scf_parameters", ""], [10, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [10, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [10, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [10, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [10, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [10, 2, 1, 0, "load_instance_state", "Load instance state."], [10, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [10, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [10, 2, 1, 0, "on_create", "Called when a Process is created."], [10, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [10, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [10, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [10, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [10, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [10, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [10, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [10, 2, 1, 0, "on_run", ""], [10, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [10, 2, 1, 0, "on_wait", "Entering the WAITING state."], [10, 2, 1, 0, "out", "Attach output to output port."], [10, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [10, 2, 1, 0, "post_processing", ""], [10, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [10, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [10, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [10, 2, 1, 0, "run", ""], [10, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [10, 3, 1, 0, "runner", "Get process runner."], [10, 2, 1, 0, "save_instance_state", "Save instance state."], [10, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [10, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [10, 2, 1, 0, "setup_inputs", ""], [10, 2, 1, 0, "setup_wc_specific_inputs", "Set the k-path for the band structure calculation."], [10, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [10, 2, 1, 0, "spec", ""], [10, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [10, 2, 1, 0, "submit", "Submit process for execution."], [10, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [10, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [10, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [10, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [10, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [10, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [10, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys": [[10, 5, 1, 0, "CALC_ID", ""], [10, 2, 1, 0, "name", "The name of the Enum member."], [10, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.decode_input_args": [[10, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.encode_input_args": [[10, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_inputs": [[10, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [10, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [10, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_outputs": [[10, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [10, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [10, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_exit_statuses": [[10, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.is_process_handler": [[10, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.kill": [[10, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.load_instance_state": [[10, 4, 2, 0, "load_context", ""], [10, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_except": [[10, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_finish": [[10, 4, 2, 0, "result", "result of the process"], [10, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_output_emitting": [[10, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [10, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_paused": [[10, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out": [[10, 4, 2, 0, "output_port", "name of output port"], [10, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out_many": [[10, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.report": [[10, 4, 2, 0, "args", "args to pass to the log call"], [10, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [10, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.save_instance_state": [[10, 4, 2, 0, "out_state", "state to save in"], [10, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.set_status": [[10, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.submit": [[10, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.calcjobs": [[11, 7, 1, 0, "BandsData", ""], [11, 1, 1, 0, "Cp2kCalculation", "Bases: aiida.engine.CalcJob"], [11, 7, 1, 0, "StructureData", ""], [11, 7, 1, 0, "XyData", ""]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation": [[11, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [11, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [11, 2, 1, 0, "build_process_type", "The process type."], [11, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [11, 2, 1, 0, "define", "Define input/output and outline."], [11, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [11, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [11, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [11, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [11, 2, 1, 0, "get_builder", ""], [11, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [11, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [11, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [11, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [11, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [11, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [11, 2, 1, 0, "init", ""], [11, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [11, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [11, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [11, 5, 1, 0, "link_label_retrieved", ""], [11, 2, 1, 0, "load_instance_state", "Load instance state."], [11, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [11, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [11, 2, 1, 0, "on_create", "Called when a Process is created."], [11, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [11, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [11, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [11, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [11, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [11, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [11, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [11, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [11, 2, 1, 0, "out", "Attach output to output port."], [11, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [11, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [11, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [11, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [11, 2, 1, 0, "prepare_for_submission", "Prepare input for calculation."], [11, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [11, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [11, 2, 1, 0, "run", "Run the calculation job."], [11, 3, 1, 0, "runner", "Get process runner."], [11, 2, 1, 0, "save_instance_state", "Save instance state."], [11, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [11, 2, 1, 0, "spec", ""], [11, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [11, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [11, 2, 1, 0, "submit", "Submit process for execution."], [11, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [11, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [11, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys": [[11, 5, 1, 0, "CALC_ID", ""], [11, 2, 1, 0, "name", "The name of the Enum member."], [11, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.decode_input_args": [[11, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.encode_input_args": [[11, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_inputs": [[11, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [11, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [11, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_outputs": [[11, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [11, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [11, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_exit_statuses": [[11, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_importer": [[11, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.kill": [[11, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.load_instance_state": [[11, 4, 2, 0, "load_context", ""], [11, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_except": [[11, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_finish": [[11, 4, 2, 0, "result", "result of the process"], [11, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_output_emitting": [[11, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [11, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_paused": [[11, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out": [[11, 4, 2, 0, "output_port", "name of output port"], [11, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out_many": [[11, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse": [[11, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.presubmit": [[11, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.report": [[11, 4, 2, 0, "args", "args to pass to the log call"], [11, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [11, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.set_status": [[11, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.submit": [[11, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.terminate": [[11, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain": [[12, 1, 1, 0, "CellOptWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_opt_work_chain._BaseOptimizationWorkChain"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain": [[12, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [12, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [12, 2, 1, 0, "build_process_type", "The process type."], [12, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [12, 3, 1, 0, "ctx", "Get the context."], [12, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [12, 2, 1, 0, "define", "Specify inputs, outputs and the workflow."], [12, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [12, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [12, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [12, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [12, 2, 1, 0, "get_builder", ""], [12, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [12, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [12, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [12, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [12, 2, 1, 0, "get_process_handlers", ""], [12, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [12, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [12, 2, 1, 0, "init", ""], [12, 2, 1, 0, "initialize_opt_parameters", ""], [12, 2, 1, 0, "initialize_scf_parameters", ""], [12, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [12, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [12, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [12, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [12, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [12, 2, 1, 0, "load_instance_state", "Load instance state."], [12, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [12, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [12, 2, 1, 0, "on_create", "Called when a Process is created."], [12, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [12, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [12, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [12, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [12, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [12, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [12, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [12, 2, 1, 0, "on_run", ""], [12, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [12, 2, 1, 0, "on_wait", "Entering the WAITING state."], [12, 2, 1, 0, "opt_post_processing", ""], [12, 2, 1, 0, "out", "Attach output to output port."], [12, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [12, 2, 1, 0, "post_processing", ""], [12, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [12, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [12, 2, 1, 0, "resubmit_unconverged_geometry", "Resubmit if geometry is unconverged and choose tighter settings for the optimization algorithm."], [12, 2, 1, 0, "resubmit_unfinished_calculation", "Resubmit the geometry in case the walltime is hit or the calculation is interrupted."], [12, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [12, 2, 1, 0, "run", ""], [12, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [12, 3, 1, 0, "runner", "Get process runner."], [12, 2, 1, 0, "save_instance_state", "Save instance state."], [12, 2, 1, 0, "set_additional_optimization_p", "Place holder for additional optimization parameters set in the CP2K input dictionary."], [12, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [12, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [12, 2, 1, 0, "setup_inputs", ""], [12, 2, 1, 0, "setup_wc_specific_inputs", "Set stress tensor calculation to analystical."], [12, 2, 1, 0, "should_run_process", "Check conditions whether to run the calculation or not."], [12, 2, 1, 0, "spec", ""], [12, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [12, 2, 1, 0, "submit", "Submit process for execution."], [12, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [12, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [12, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [12, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [12, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [12, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys": [[12, 5, 1, 0, "CALC_ID", ""], [12, 2, 1, 0, "name", "The name of the Enum member."], [12, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.decode_input_args": [[12, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.encode_input_args": [[12, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_inputs": [[12, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [12, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [12, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_outputs": [[12, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [12, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [12, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_exit_statuses": [[12, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.is_process_handler": [[12, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.kill": [[12, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.load_instance_state": [[12, 4, 2, 0, "load_context", ""], [12, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_except": [[12, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_finish": [[12, 4, 2, 0, "result", "result of the process"], [12, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_output_emitting": [[12, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [12, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_paused": [[12, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out": [[12, 4, 2, 0, "output_port", "name of output port"], [12, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out_many": [[12, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.report": [[12, 4, 2, 0, "args", "args to pass to the log call"], [12, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [12, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.save_instance_state": [[12, 4, 2, 0, "out_state", "state to save in"], [12, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.set_status": [[12, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.submit": [[12, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains": [[13, 7, 1, 0, "BandStructureWC", ""], [13, 7, 1, 0, "CellOptWC", ""], [13, 7, 1, 0, "Cp2kCalculation", ""], [13, 7, 1, 0, "EigenvaluesWC", ""], [13, 1, 1, 0, "ElectronicPropertiesWorkChain", "Bases: aiida.engine.WorkChain"], [13, 7, 1, 0, "FindSCFParametersWC", ""], [13, 7, 1, 0, "GeoOptWC", ""], [13, 7, 1, 0, "PDOSWC", ""], [13, 7, 1, 0, "PartialChargesWC", ""], [13, 7, 1, 0, "StructureData", ""], [13, 7, 1, 0, "SurfaceData", ""], [13, 1, 1, 0, "SurfaceOptWorkChain", "Bases: aiida.engine.WorkChain"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain": [[13, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [13, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [13, 2, 1, 0, "build_process_type", "The process type."], [13, 3, 1, 0, "ctx", "Get the context."], [13, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [13, 2, 1, 0, "define", "Specify inputs and outputs."], [13, 2, 1, 0, "dft_cell_opt", "Perform the cell relaxation."], [13, 2, 1, 0, "electronic_structure", "Calculate the electronic properties of the crystal."], [13, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [13, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [13, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [13, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [13, 2, 1, 0, "find_scf_parameters", "Find mixing parameters that converge the Kohn-Sham equations."], [13, 2, 1, 0, "get_builder", ""], [13, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [13, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [13, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [13, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [13, 2, 1, 0, "init", ""], [13, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [13, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [13, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [13, 2, 1, 0, "load_instance_state", "Load instance state."], [13, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [13, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [13, 2, 1, 0, "on_create", "Called when a Process is created."], [13, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [13, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [13, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [13, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [13, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [13, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [13, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [13, 2, 1, 0, "on_run", ""], [13, 2, 1, 0, "on_terminated", "Called when a Process enters a terminal state."], [13, 2, 1, 0, "on_wait", "Entering the WAITING state."], [13, 2, 1, 0, "out", "Attach output to output port."], [13, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [13, 2, 1, 0, "post_processing", "Post-processing routine."], [13, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [13, 2, 1, 0, "run", ""], [13, 2, 1, 0, "run_el_prop_wc", "Run electronic properties calculation."], [13, 3, 1, 0, "runner", "Get process runner."], [13, 2, 1, 0, "save_instance_state", "Save instance state."], [13, 2, 1, 0, "set_input_parameter", "Set input parameter for a child work chain."], [13, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [13, 2, 1, 0, "setup", "Set up calculation parameters."], [13, 2, 1, 0, "should_run_cell_opt", "Whether to run a cell optimization."], [13, 2, 1, 0, "spec", ""], [13, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [13, 2, 1, 0, "submit", "Submit process for execution."], [13, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [13, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [13, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys": [[13, 5, 1, 0, "CALC_ID", ""], [13, 2, 1, 0, "name", "The name of the Enum member."], [13, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.decode_input_args": [[13, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.encode_input_args": [[13, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_inputs": [[13, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [13, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [13, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_outputs": [[13, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [13, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [13, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_exit_statuses": [[13, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.kill": [[13, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.load_instance_state": [[13, 4, 2, 0, "load_context", ""], [13, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_except": [[13, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_finish": [[13, 4, 2, 0, "result", "result of the process"], [13, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_output_emitting": [[13, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [13, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_paused": [[13, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out": [[13, 4, 2, 0, "output_port", "name of output port"], [13, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out_many": [[13, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.report": [[13, 4, 2, 0, "args", "args to pass to the log call"], [13, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [13, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.save_instance_state": [[13, 4, 2, 0, "out_state", "state to save in"], [13, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.set_status": [[13, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.submit": [[13, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain": [[13, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [13, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [13, 2, 1, 0, "build_process_type", "The process type."], [13, 3, 1, 0, "ctx", "Get the context."], [13, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [13, 2, 1, 0, "define", "Specify inputs and outputs."], [13, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [13, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [13, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [13, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [13, 2, 1, 0, "find_scf_p", "Run the FindSCFParameters work chain."], [13, 2, 1, 0, "geo_opt", "Run the GeoOpt work chain."], [13, 2, 1, 0, "geo_preopt", "Run the GeoOpt work chain."], [13, 2, 1, 0, "get_builder", ""], [13, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [13, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [13, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [13, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [13, 2, 1, 0, "init", ""], [13, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [13, 2, 1, 0, "inspect_find_scf_p_results", "Check if the previous work chain finished successful."], [13, 2, 1, 0, "inspect_geo_opt_results", "Check if the previous work chain finished successful."], [13, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [13, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [13, 2, 1, 0, "load_instance_state", "Load instance state."], [13, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [13, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [13, 2, 1, 0, "on_create", "Called when a Process is created."], [13, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [13, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [13, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [13, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [13, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [13, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [13, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [13, 2, 1, 0, "on_run", ""], [13, 2, 1, 0, "on_terminated", "Called when a Process enters a terminal state."], [13, 2, 1, 0, "on_wait", "Entering the WAITING state."], [13, 2, 1, 0, "out", "Attach output to output port."], [13, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [13, 2, 1, 0, "post_processing", "Define outputs."], [13, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [13, 2, 1, 0, "run", ""], [13, 3, 1, 0, "runner", "Get process runner."], [13, 2, 1, 0, "save_instance_state", "Save instance state."], [13, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [13, 2, 1, 0, "setup", "Define initial parameters."], [13, 2, 1, 0, "should_run_add_calc", "Check whether additional calculations are run after the slab size is converged."], [13, 2, 1, 0, "should_run_slab_conv", "Check whether the convergence criteria is fulfilled and the slab size is not exceeding the maximum slab size."], [13, 2, 1, 0, "spec", ""], [13, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [13, 2, 1, 0, "submit", "Submit process for execution."], [13, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [13, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [13, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys": [[13, 5, 1, 0, "CALC_ID", ""], [13, 2, 1, 0, "name", "The name of the Enum member."], [13, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.decode_input_args": [[13, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.encode_input_args": [[13, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_inputs": [[13, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [13, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [13, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_outputs": [[13, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [13, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [13, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_exit_statuses": [[13, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.kill": [[13, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.load_instance_state": [[13, 4, 2, 0, "load_context", ""], [13, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_except": [[13, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_finish": [[13, 4, 2, 0, "result", "result of the process"], [13, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_output_emitting": [[13, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [13, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_paused": [[13, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out": [[13, 4, 2, 0, "output_port", "name of output port"], [13, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out_many": [[13, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.report": [[13, 4, 2, 0, "args", "args to pass to the log call"], [13, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [13, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.save_instance_state": [[13, 4, 2, 0, "out_state", "state to save in"], [13, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.set_status": [[13, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.submit": [[13, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs": [[15, 7, 1, 0, "cwd", ""]], "aim2dat.aiida_workflows.cp2k.core_work_chain_opt": [[16, 7, 1, 0, "cwd", ""]], "aim2dat.aiida_workflows.cp2k.core_work_chain_scf": [[17, 7, 1, 0, "cwd", ""]], "aim2dat.aiida_workflows.cp2k.cube_work_chain": [[18, 1, 1, 0, "CubeWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain": [[18, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [18, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [18, 2, 1, 0, "build_process_type", "The process type."], [18, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [18, 3, 1, 0, "ctx", "Get the context."], [18, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [18, 2, 1, 0, "define", "Specify inputs and outputs."], [18, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [18, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [18, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [18, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [18, 2, 1, 0, "get_builder", ""], [18, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [18, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [18, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [18, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [18, 2, 1, 0, "get_process_handlers", ""], [18, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [18, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [18, 2, 1, 0, "init", ""], [18, 2, 1, 0, "initialize_scf_parameters", ""], [18, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [18, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [18, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [18, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [18, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [18, 2, 1, 0, "load_instance_state", "Load instance state."], [18, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [18, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [18, 2, 1, 0, "on_create", "Called when a Process is created."], [18, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [18, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [18, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [18, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [18, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [18, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [18, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [18, 2, 1, 0, "on_run", ""], [18, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [18, 2, 1, 0, "on_wait", "Entering the WAITING state."], [18, 2, 1, 0, "out", "Attach output to output port."], [18, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [18, 2, 1, 0, "post_processing", ""], [18, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [18, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [18, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [18, 2, 1, 0, "run", ""], [18, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [18, 3, 1, 0, "runner", "Get process runner."], [18, 2, 1, 0, "save_instance_state", "Save instance state."], [18, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [18, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [18, 2, 1, 0, "setup_inputs", ""], [18, 2, 1, 0, "setup_wc_specific_inputs", "Add print commands for the cube files."], [18, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [18, 2, 1, 0, "spec", ""], [18, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [18, 2, 1, 0, "submit", "Submit process for execution."], [18, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [18, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [18, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [18, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [18, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [18, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [18, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys": [[18, 5, 1, 0, "CALC_ID", ""], [18, 2, 1, 0, "name", "The name of the Enum member."], [18, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.decode_input_args": [[18, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.encode_input_args": [[18, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_inputs": [[18, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [18, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [18, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_outputs": [[18, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [18, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [18, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_exit_statuses": [[18, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.is_process_handler": [[18, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.kill": [[18, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.load_instance_state": [[18, 4, 2, 0, "load_context", ""], [18, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_except": [[18, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_finish": [[18, 4, 2, 0, "result", "result of the process"], [18, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_output_emitting": [[18, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [18, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_paused": [[18, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out": [[18, 4, 2, 0, "output_port", "name of output port"], [18, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out_many": [[18, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.report": [[18, 4, 2, 0, "args", "args to pass to the log call"], [18, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [18, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.save_instance_state": [[18, 4, 2, 0, "out_state", "state to save in"], [18, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.set_status": [[18, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.submit": [[18, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain": [[19, 1, 1, 0, "EigenvaluesWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain": [[19, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [19, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [19, 2, 1, 0, "build_process_type", "The process type."], [19, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [19, 3, 1, 0, "ctx", "Get the context."], [19, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [19, 2, 1, 0, "define", "Specify inputs and outputs."], [19, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [19, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [19, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [19, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [19, 2, 1, 0, "get_builder", ""], [19, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [19, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [19, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [19, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [19, 2, 1, 0, "get_process_handlers", ""], [19, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [19, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [19, 2, 1, 0, "init", ""], [19, 2, 1, 0, "initialize_scf_parameters", ""], [19, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [19, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [19, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [19, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [19, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [19, 2, 1, 0, "load_instance_state", "Load instance state."], [19, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [19, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [19, 2, 1, 0, "on_create", "Called when a Process is created."], [19, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [19, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [19, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [19, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [19, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [19, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [19, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [19, 2, 1, 0, "on_run", ""], [19, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [19, 2, 1, 0, "on_wait", "Entering the WAITING state."], [19, 2, 1, 0, "out", "Attach output to output port."], [19, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [19, 2, 1, 0, "post_processing", ""], [19, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [19, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [19, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [19, 2, 1, 0, "run", ""], [19, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [19, 3, 1, 0, "runner", "Get process runner."], [19, 2, 1, 0, "save_instance_state", "Save instance state."], [19, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [19, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [19, 2, 1, 0, "setup_inputs", ""], [19, 2, 1, 0, "setup_wc_specific_inputs", "Set k-points to full grid and the print statement."], [19, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [19, 2, 1, 0, "spec", ""], [19, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [19, 2, 1, 0, "submit", "Submit process for execution."], [19, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [19, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [19, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [19, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [19, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [19, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [19, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys": [[19, 5, 1, 0, "CALC_ID", ""], [19, 2, 1, 0, "name", "The name of the Enum member."], [19, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.decode_input_args": [[19, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.encode_input_args": [[19, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_inputs": [[19, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [19, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [19, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_outputs": [[19, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [19, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [19, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_exit_statuses": [[19, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.is_process_handler": [[19, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.kill": [[19, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.load_instance_state": [[19, 4, 2, 0, "load_context", ""], [19, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_except": [[19, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_finish": [[19, 4, 2, 0, "result", "result of the process"], [19, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_output_emitting": [[19, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [19, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_paused": [[19, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out": [[19, 4, 2, 0, "output_port", "name of output port"], [19, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out_many": [[19, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.report": [[19, 4, 2, 0, "args", "args to pass to the log call"], [19, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [19, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.save_instance_state": [[19, 4, 2, 0, "out_state", "state to save in"], [19, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.set_status": [[19, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.submit": [[19, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.el_properties_utils": [[20, 7, 1, 0, "cwd", ""], [20, 6, 1, 0, "elprop_setup", "Set up calculation parameters."], [20, 6, 1, 0, "set_ctx_parameters_from_protocol", "Set ctx parameters from protocol."]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain": [[21, 1, 1, 0, "FindSCFParametersWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain": [[21, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [21, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [21, 2, 1, 0, "build_process_type", "The process type."], [21, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [21, 3, 1, 0, "ctx", "Get the context."], [21, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [21, 2, 1, 0, "define", "Specify inputs, outputs and the workflow."], [21, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [21, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [21, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [21, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [21, 2, 1, 0, "get_builder", ""], [21, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [21, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [21, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [21, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [21, 2, 1, 0, "get_process_handlers", ""], [21, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [21, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [21, 2, 1, 0, "init", ""], [21, 2, 1, 0, "initialize_scf_parameters", ""], [21, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [21, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [21, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [21, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [21, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [21, 2, 1, 0, "load_instance_state", "Load instance state."], [21, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [21, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [21, 2, 1, 0, "on_create", "Called when a Process is created."], [21, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [21, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [21, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [21, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [21, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [21, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [21, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [21, 2, 1, 0, "on_run", ""], [21, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [21, 2, 1, 0, "on_wait", "Entering the WAITING state."], [21, 2, 1, 0, "out", "Attach output to output port."], [21, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [21, 2, 1, 0, "post_processing", ""], [21, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [21, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [21, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [21, 2, 1, 0, "run", ""], [21, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [21, 3, 1, 0, "runner", "Get process runner."], [21, 2, 1, 0, "save_instance_state", "Save instance state."], [21, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [21, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [21, 2, 1, 0, "setup_inputs", ""], [21, 2, 1, 0, "setup_wc_specific_inputs", "Check whether to add unoccupied states and the system character."], [21, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [21, 2, 1, 0, "spec", ""], [21, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [21, 2, 1, 0, "submit", "Submit process for execution."], [21, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [21, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [21, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [21, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [21, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [21, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys": [[21, 5, 1, 0, "CALC_ID", ""], [21, 2, 1, 0, "name", "The name of the Enum member."], [21, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.decode_input_args": [[21, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.encode_input_args": [[21, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_inputs": [[21, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [21, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [21, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_outputs": [[21, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [21, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [21, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_exit_statuses": [[21, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.is_process_handler": [[21, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.kill": [[21, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.load_instance_state": [[21, 4, 2, 0, "load_context", ""], [21, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_except": [[21, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_finish": [[21, 4, 2, 0, "result", "result of the process"], [21, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_output_emitting": [[21, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [21, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_paused": [[21, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out": [[21, 4, 2, 0, "output_port", "name of output port"], [21, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out_many": [[21, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.report": [[21, 4, 2, 0, "args", "args to pass to the log call"], [21, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [21, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.save_instance_state": [[21, 4, 2, 0, "out_state", "state to save in"], [21, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.set_status": [[21, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.submit": [[21, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain": [[22, 1, 1, 0, "GeoOptWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_opt_work_chain._BaseOptimizationWorkChain"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain": [[22, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [22, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [22, 2, 1, 0, "build_process_type", "The process type."], [22, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [22, 3, 1, 0, "ctx", "Get the context."], [22, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [22, 2, 1, 0, "define", "Specify inputs, outputs and the workflow."], [22, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [22, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [22, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [22, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [22, 2, 1, 0, "get_builder", ""], [22, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [22, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [22, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [22, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [22, 2, 1, 0, "get_process_handlers", ""], [22, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [22, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [22, 2, 1, 0, "init", ""], [22, 2, 1, 0, "initialize_opt_parameters", ""], [22, 2, 1, 0, "initialize_scf_parameters", ""], [22, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [22, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [22, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [22, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [22, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [22, 2, 1, 0, "load_instance_state", "Load instance state."], [22, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [22, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [22, 2, 1, 0, "on_create", "Called when a Process is created."], [22, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [22, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [22, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [22, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [22, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [22, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [22, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [22, 2, 1, 0, "on_run", ""], [22, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [22, 2, 1, 0, "on_wait", "Entering the WAITING state."], [22, 2, 1, 0, "opt_post_processing", ""], [22, 2, 1, 0, "out", "Attach output to output port."], [22, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [22, 2, 1, 0, "post_processing", ""], [22, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [22, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [22, 2, 1, 0, "resubmit_unconverged_geometry", "Resubmit if geometry is unconverged and choose tighter settings for the optimization algorithm."], [22, 2, 1, 0, "resubmit_unfinished_calculation", "Resubmit the geometry in case the walltime is hit or the calculation is interrupted."], [22, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [22, 2, 1, 0, "run", ""], [22, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [22, 3, 1, 0, "runner", "Get process runner."], [22, 2, 1, 0, "save_instance_state", "Save instance state."], [22, 2, 1, 0, "set_additional_optimization_p", "Place holder for additional optimization parameters set in the CP2K input dictionary."], [22, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [22, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [22, 2, 1, 0, "setup_inputs", ""], [22, 2, 1, 0, "setup_wc_specific_inputs", ""], [22, 2, 1, 0, "should_run_process", "Check conditions whether to run the calculation or not."], [22, 2, 1, 0, "spec", ""], [22, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [22, 2, 1, 0, "submit", "Submit process for execution."], [22, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [22, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [22, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [22, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [22, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [22, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys": [[22, 5, 1, 0, "CALC_ID", ""], [22, 2, 1, 0, "name", "The name of the Enum member."], [22, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.decode_input_args": [[22, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.encode_input_args": [[22, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_inputs": [[22, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [22, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [22, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_outputs": [[22, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [22, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [22, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_exit_statuses": [[22, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.is_process_handler": [[22, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.kill": [[22, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.load_instance_state": [[22, 4, 2, 0, "load_context", ""], [22, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_except": [[22, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_finish": [[22, 4, 2, 0, "result", "result of the process"], [22, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_output_emitting": [[22, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [22, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_paused": [[22, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out": [[22, 4, 2, 0, "output_port", "name of output port"], [22, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out_many": [[22, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.report": [[22, 4, 2, 0, "args", "args to pass to the log call"], [22, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [22, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.save_instance_state": [[22, 4, 2, 0, "out_state", "state to save in"], [22, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.set_status": [[22, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.submit": [[22, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.parsers": [[24, 7, 1, 0, "BandsData", ""], [24, 1, 1, 0, "Cp2kPartialChargesParser", "Bases: _Cp2kBaseParser"], [24, 1, 1, 0, "Cp2kStandardParser", "Bases: _Cp2kBaseParser"], [24, 1, 1, 0, "Cp2kTrajectoryParser", "Bases: _Cp2kBaseParser"], [24, 7, 1, 0, "GCubeData", ""], [24, 7, 1, 0, "StructureData", ""], [24, 7, 1, 0, "XyData", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser": [[24, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [24, 5, 1, 0, "extra_output_functions", ""], [24, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [24, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [24, 3, 1, 0, "node", "Return the node instance"], [24, 2, 1, 0, "out", "Register a node as an output with the given link label."], [24, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [24, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [24, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [24, 5, 1, 0, "parser_type", ""], [24, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.out": [[24, 4, 2, 0, "link_label", "the name of the link label"], [24, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse_from_node": [[24, 4, 2, 0, "node", "a CalcJobNode instance"], [24, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [24, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser": [[24, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [24, 5, 1, 0, "extra_output_functions", ""], [24, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [24, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [24, 3, 1, 0, "node", "Return the node instance"], [24, 2, 1, 0, "out", "Register a node as an output with the given link label."], [24, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [24, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [24, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [24, 5, 1, 0, "parser_type", ""], [24, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.out": [[24, 4, 2, 0, "link_label", "the name of the link label"], [24, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse_from_node": [[24, 4, 2, 0, "node", "a CalcJobNode instance"], [24, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [24, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser": [[24, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [24, 5, 1, 0, "extra_output_functions", ""], [24, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [24, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [24, 3, 1, 0, "node", "Return the node instance"], [24, 2, 1, 0, "out", "Register a node as an output with the given link label."], [24, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [24, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [24, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [24, 5, 1, 0, "parser_type", ""], [24, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.out": [[24, 4, 2, 0, "link_label", "the name of the link label"], [24, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse_from_node": [[24, 4, 2, 0, "node", "a CalcJobNode instance"], [24, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [24, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain": [[25, 7, 1, 0, "ChargemolCalculation", ""], [25, 7, 1, 0, "Critic2Calculation", ""], [25, 1, 1, 0, "PartialChargesWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain": [[25, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [25, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [25, 2, 1, 0, "build_process_type", "The process type."], [25, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [25, 3, 1, 0, "ctx", "Get the context."], [25, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [25, 2, 1, 0, "define", "Specify inputs and outputs."], [25, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [25, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [25, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [25, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [25, 2, 1, 0, "get_builder", ""], [25, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [25, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [25, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [25, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [25, 2, 1, 0, "get_process_handlers", ""], [25, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [25, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [25, 2, 1, 0, "init", ""], [25, 2, 1, 0, "initialize_scf_parameters", ""], [25, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [25, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [25, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [25, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [25, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [25, 2, 1, 0, "load_instance_state", "Load instance state."], [25, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [25, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [25, 2, 1, 0, "on_create", "Called when a Process is created."], [25, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [25, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [25, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [25, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [25, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [25, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [25, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [25, 2, 1, 0, "on_run", ""], [25, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [25, 2, 1, 0, "on_wait", "Entering the WAITING state."], [25, 2, 1, 0, "out", "Attach output to output port."], [25, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [25, 2, 1, 0, "post_processing", ""], [25, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [25, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [25, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [25, 2, 1, 0, "run", ""], [25, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [25, 3, 1, 0, "runner", "Get process runner."], [25, 2, 1, 0, "save_instance_state", "Save instance state."], [25, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [25, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [25, 2, 1, 0, "setup_external_partial_charge_analysis", "Set input parameters for external post-processing codes."], [25, 2, 1, 0, "setup_inputs", ""], [25, 2, 1, 0, "setup_wc_specific_inputs", "Set input parameters to calculate partial charges."], [25, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [25, 2, 1, 0, "spec", ""], [25, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [25, 2, 1, 0, "submit", "Submit process for execution."], [25, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [25, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [25, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [25, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [25, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [25, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [25, 2, 1, 0, "wc_specific_post_processing", "Expose outputs of the external codes."]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys": [[25, 5, 1, 0, "CALC_ID", ""], [25, 2, 1, 0, "name", "The name of the Enum member."], [25, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.decode_input_args": [[25, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.encode_input_args": [[25, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_inputs": [[25, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [25, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [25, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_outputs": [[25, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [25, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [25, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_exit_statuses": [[25, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.is_process_handler": [[25, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.kill": [[25, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.load_instance_state": [[25, 4, 2, 0, "load_context", ""], [25, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_except": [[25, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_finish": [[25, 4, 2, 0, "result", "result of the process"], [25, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_output_emitting": [[25, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [25, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_paused": [[25, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out": [[25, 4, 2, 0, "output_port", "name of output port"], [25, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out_many": [[25, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.report": [[25, 4, 2, 0, "args", "args to pass to the log call"], [25, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [25, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.save_instance_state": [[25, 4, 2, 0, "out_state", "state to save in"], [25, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.set_status": [[25, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.submit": [[25, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain": [[26, 1, 1, 0, "PDOSWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"], [26, 7, 1, 0, "StructureData", ""]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain": [[26, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [26, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [26, 2, 1, 0, "build_process_type", "The process type."], [26, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [26, 3, 1, 0, "ctx", "Get the context."], [26, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [26, 2, 1, 0, "define", "Specify inputs and outputs."], [26, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [26, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [26, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [26, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [26, 2, 1, 0, "get_builder", ""], [26, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [26, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [26, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [26, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [26, 2, 1, 0, "get_process_handlers", ""], [26, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [26, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [26, 2, 1, 0, "init", ""], [26, 2, 1, 0, "initialize_scf_parameters", ""], [26, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [26, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [26, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [26, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [26, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [26, 2, 1, 0, "load_instance_state", "Load instance state."], [26, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [26, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [26, 2, 1, 0, "on_create", "Called when a Process is created."], [26, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [26, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [26, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [26, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [26, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [26, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [26, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [26, 2, 1, 0, "on_run", ""], [26, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [26, 2, 1, 0, "on_wait", "Entering the WAITING state."], [26, 2, 1, 0, "out", "Attach output to output port."], [26, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [26, 2, 1, 0, "post_processing", ""], [26, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [26, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [26, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [26, 2, 1, 0, "run", ""], [26, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [26, 3, 1, 0, "runner", "Get process runner."], [26, 2, 1, 0, "save_instance_state", "Save instance state."], [26, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [26, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [26, 2, 1, 0, "setup_inputs", ""], [26, 2, 1, 0, "setup_wc_specific_inputs", "Derive super cell and set input parameter."], [26, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [26, 2, 1, 0, "spec", ""], [26, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [26, 2, 1, 0, "submit", "Submit process for execution."], [26, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [26, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [26, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [26, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [26, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [26, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys": [[26, 5, 1, 0, "CALC_ID", ""], [26, 2, 1, 0, "name", "The name of the Enum member."], [26, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.decode_input_args": [[26, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.encode_input_args": [[26, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_inputs": [[26, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [26, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [26, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_outputs": [[26, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [26, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [26, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_exit_statuses": [[26, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.is_process_handler": [[26, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.kill": [[26, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.load_instance_state": [[26, 4, 2, 0, "load_context", ""], [26, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_except": [[26, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_finish": [[26, 4, 2, 0, "result", "result of the process"], [26, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_output_emitting": [[26, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [26, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_paused": [[26, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out": [[26, 4, 2, 0, "output_port", "name of output port"], [26, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out_many": [[26, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.report": [[26, 4, 2, 0, "args", "args to pass to the log call"], [26, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [26, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.save_instance_state": [[26, 4, 2, 0, "out_state", "state to save in"], [26, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.set_status": [[26, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.submit": [[26, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain": [[27, 7, 1, 0, "Critic2Calculation", ""], [27, 1, 1, 0, "PlanarFieldsWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain": [[27, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [27, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [27, 2, 1, 0, "build_process_type", "The process type."], [27, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [27, 3, 1, 0, "ctx", "Get the context."], [27, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [27, 2, 1, 0, "define", "Specify inputs and outputs."], [27, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [27, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [27, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [27, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [27, 2, 1, 0, "get_builder", ""], [27, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [27, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [27, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [27, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [27, 2, 1, 0, "get_process_handlers", ""], [27, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [27, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [27, 2, 1, 0, "init", ""], [27, 2, 1, 0, "initialize_scf_parameters", ""], [27, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [27, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [27, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [27, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [27, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [27, 2, 1, 0, "load_instance_state", "Load instance state."], [27, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [27, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [27, 2, 1, 0, "on_create", "Called when a Process is created."], [27, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [27, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [27, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [27, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [27, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [27, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [27, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [27, 2, 1, 0, "on_run", ""], [27, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [27, 2, 1, 0, "on_wait", "Entering the WAITING state."], [27, 2, 1, 0, "out", "Attach output to output port."], [27, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [27, 2, 1, 0, "post_processing", ""], [27, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [27, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [27, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [27, 2, 1, 0, "run", ""], [27, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [27, 3, 1, 0, "runner", "Get process runner."], [27, 2, 1, 0, "save_instance_state", "Save instance state."], [27, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [27, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [27, 2, 1, 0, "setup_critic2_calculation", "Set input parameters for external post-processing codes."], [27, 2, 1, 0, "setup_inputs", ""], [27, 2, 1, 0, "setup_wc_specific_inputs", "Set input parameters to calculate partial charges."], [27, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [27, 2, 1, 0, "spec", ""], [27, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [27, 2, 1, 0, "submit", "Submit process for execution."], [27, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [27, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [27, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [27, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [27, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [27, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [27, 2, 1, 0, "wc_specific_post_processing", "Expose outputs of the external codes."]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys": [[27, 5, 1, 0, "CALC_ID", ""], [27, 2, 1, 0, "name", "The name of the Enum member."], [27, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.decode_input_args": [[27, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.encode_input_args": [[27, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_inputs": [[27, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [27, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [27, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_outputs": [[27, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [27, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [27, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_exit_statuses": [[27, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.is_process_handler": [[27, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.kill": [[27, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.load_instance_state": [[27, 4, 2, 0, "load_context", ""], [27, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_except": [[27, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_finish": [[27, 4, 2, 0, "result", "result of the process"], [27, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_output_emitting": [[27, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [27, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_paused": [[27, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out": [[27, 4, 2, 0, "output_port", "name of output port"], [27, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out_many": [[27, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.report": [[27, 4, 2, 0, "args", "args to pass to the log call"], [27, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [27, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.save_instance_state": [[27, 4, 2, 0, "out_state", "state to save in"], [27, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.set_status": [[27, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.submit": [[27, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.surface_opt_utils": [[28, 7, 1, 0, "create_surface_slab", ""], [28, 6, 1, 0, "surfopt_setup", "Define initial parameters."], [28, 6, 1, 0, "surfopt_should_run_add_calc", "Check whether additional calculations are run after the slab size is converged."], [28, 6, 1, 0, "surfopt_should_run_slab_conv", "Check whether the convergence criteria is fulfilled and the slab size is not exceeding the maximum slab size."], [28, 6, 1, 0, "update_surf_slab", "Update surface slab."]], "aim2dat.aiida_workflows.cp2k.work_chain_specs": [[29, 7, 1, 0, "Cp2kCalculation", ""], [29, 6, 1, 0, "core_work_chain_exit_codes", "Exit codes for the CP2K core work chains."], [29, 6, 1, 0, "numerical_p_specs", "Numerical input parameters."], [29, 6, 1, 0, "seekpath_p_specs", "Input parameters for seekpath."], [29, 6, 1, 0, "structural_p_specs", "Structural input parameters."]], "aim2dat.aiida_workflows.critic2": [[30, 0, 0, 1, "calcjobs", ""], [32, 0, 0, 1, "parsers", ""]], "aim2dat.aiida_workflows.critic2.calcjobs": [[30, 1, 1, 0, "Critic2Calculation", "Bases: aiida.engine.CalcJob"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation": [[30, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [30, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [30, 2, 1, 0, "build_process_type", "The process type."], [30, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [30, 2, 1, 0, "define", "Define input/output and outline."], [30, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [30, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [30, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [30, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [30, 2, 1, 0, "get_builder", ""], [30, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [30, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [30, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [30, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [30, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [30, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [30, 2, 1, 0, "init", ""], [30, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [30, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [30, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [30, 5, 1, 0, "link_label_retrieved", ""], [30, 2, 1, 0, "load_instance_state", "Load instance state."], [30, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [30, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [30, 2, 1, 0, "on_create", "Called when a Process is created."], [30, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [30, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [30, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [30, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [30, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [30, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [30, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [30, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [30, 2, 1, 0, "out", "Attach output to output port."], [30, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [30, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [30, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [30, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [30, 2, 1, 0, "prepare_for_submission", "Prepare for submission."], [30, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [30, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [30, 2, 1, 0, "run", "Run the calculation job."], [30, 3, 1, 0, "runner", "Get process runner."], [30, 2, 1, 0, "save_instance_state", "Save instance state."], [30, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [30, 2, 1, 0, "spec", ""], [30, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [30, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [30, 2, 1, 0, "submit", "Submit process for execution."], [30, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [30, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [30, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys": [[30, 5, 1, 0, "CALC_ID", ""], [30, 2, 1, 0, "name", "The name of the Enum member."], [30, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.decode_input_args": [[30, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.encode_input_args": [[30, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_inputs": [[30, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [30, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [30, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_outputs": [[30, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [30, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [30, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_exit_statuses": [[30, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_importer": [[30, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.kill": [[30, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.load_instance_state": [[30, 4, 2, 0, "load_context", ""], [30, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_except": [[30, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_finish": [[30, 4, 2, 0, "result", "result of the process"], [30, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_output_emitting": [[30, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [30, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_paused": [[30, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out": [[30, 4, 2, 0, "output_port", "name of output port"], [30, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out_many": [[30, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse": [[30, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.presubmit": [[30, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.report": [[30, 4, 2, 0, "args", "args to pass to the log call"], [30, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [30, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.set_status": [[30, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.submit": [[30, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.terminate": [[30, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.critic2.parsers": [[32, 1, 1, 0, "Critic2Parser", "Bases: aiida.parsers.Parser"]], "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser": [[32, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [32, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [32, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [32, 3, 1, 0, "node", "Return the node instance"], [32, 2, 1, 0, "out", "Register a node as an output with the given link label."], [32, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [32, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [32, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [32, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.out": [[32, 4, 2, 0, "link_label", "the name of the link label"], [32, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.parse_from_node": [[32, 4, 2, 0, "node", "a CalcJobNode instance"], [32, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [32, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.enumlib": [[33, 0, 0, 1, "enum_calcjob", ""], [34, 0, 0, 1, "enum_parsers", ""], [36, 0, 0, 1, "utils", ""]], "aim2dat.aiida_workflows.enumlib.enum_calcjob": [[33, 1, 1, 0, "EnumlibCalculation", "Bases: aiida.engine.CalcJob"], [33, 6, 1, 0, "validate_elements_to_enumerate", "Validate elements_to_enumerate."], [33, 6, 1, 0, "validate_inputs", "Validate the input parameters sites_to_enumerate, elements_to_emnumerate and concentration_restrictions."], [33, 6, 1, 0, "validate_makeStr_path", "Validate the absolute path of the makeStr.py executable."], [33, 6, 1, 0, "validate_sites_to_enumerate", "Validate sites_to_enumerate."], [33, 6, 1, 0, "validate_structure", "Validate the input structure. Checks that the structure has no fractional occupations and each site is only occupied once."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation": [[33, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [33, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [33, 2, 1, 0, "build_process_type", "The process type."], [33, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [33, 2, 1, 0, "define", "Define input/output and outline."], [33, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [33, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [33, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [33, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [33, 2, 1, 0, "get_builder", ""], [33, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [33, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [33, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [33, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [33, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [33, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [33, 2, 1, 0, "init", ""], [33, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [33, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [33, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [33, 5, 1, 0, "link_label_retrieved", ""], [33, 2, 1, 0, "load_instance_state", "Load instance state."], [33, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [33, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [33, 2, 1, 0, "on_create", "Called when a Process is created."], [33, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [33, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [33, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [33, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [33, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [33, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [33, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [33, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [33, 2, 1, 0, "out", "Attach output to output port."], [33, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [33, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [33, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [33, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [33, 2, 1, 0, "prepare_for_submission", "Create input file."], [33, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [33, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [33, 2, 1, 0, "run", "Run the calculation job."], [33, 3, 1, 0, "runner", "Get process runner."], [33, 2, 1, 0, "save_instance_state", "Save instance state."], [33, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [33, 2, 1, 0, "spec", ""], [33, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [33, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [33, 2, 1, 0, "submit", "Submit process for execution."], [33, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [33, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [33, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys": [[33, 5, 1, 0, "CALC_ID", ""], [33, 2, 1, 0, "name", "The name of the Enum member."], [33, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.decode_input_args": [[33, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.encode_input_args": [[33, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_inputs": [[33, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [33, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [33, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_outputs": [[33, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [33, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [33, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_exit_statuses": [[33, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_importer": [[33, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.kill": [[33, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.load_instance_state": [[33, 4, 2, 0, "load_context", ""], [33, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_except": [[33, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_finish": [[33, 4, 2, 0, "result", "result of the process"], [33, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_output_emitting": [[33, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [33, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_paused": [[33, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out": [[33, 4, 2, 0, "output_port", "name of output port"], [33, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out_many": [[33, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse": [[33, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.presubmit": [[33, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.report": [[33, 4, 2, 0, "args", "args to pass to the log call"], [33, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [33, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.set_status": [[33, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.submit": [[33, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.terminate": [[33, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.enumlib.enum_parsers": [[34, 1, 1, 0, "EnumlibParser", "Bases: aiida.parsers.Parser"]], "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser": [[34, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [34, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [34, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [34, 3, 1, 0, "node", "Return the node instance"], [34, 2, 1, 0, "out", "Register a node as an output with the given link label."], [34, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [34, 2, 1, 0, "parse", "Parse the retrieved POSCAR files to StrucureData-Nodes."], [34, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [34, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.out": [[34, 4, 2, 0, "link_label", "the name of the link label"], [34, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.parse_from_node": [[34, 4, 2, 0, "node", "a CalcJobNode instance"], [34, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [34, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.enumlib.utils": [[36, 6, 1, 0, "check_kinds", "Check whether all kinds can be processed."], [36, 6, 1, 0, "get_kindnames", "Get kind names from structure."]], "aim2dat.aiida_workflows.utils": [[38, 6, 1, 0, "concatenate_workflow_results", "Concatenate two results pandas data frames."], [38, 6, 1, 0, "create_aiida_node", "Create AiiDA data node from standard python variable."], [38, 6, 1, 0, "create_surface_slab", "Create surface slab from surface data."], [38, 6, 1, 0, "get_results_cp2k_legacy_wc", "Get results from the depreciated ElectronicProperties work chain."], [38, 6, 1, 0, "obtain_value_from_aiida_node", "Obtain value from AiiDA data node."], [38, 6, 1, 0, "seekpath_structure_analysis", "Wrap the seekpath function to be used as a calcfunction."], [38, 6, 1, 0, "workflow_queue", "Helper-function to control the number of workchains run simultaneously. The function is called in a loop after the workchain has been submitted."]], "aim2dat.aiida_workflows.workflow_builder": [[39, 7, 1, 0, "AiidaCode", ""], [39, 1, 1, 0, "MultipleWorkflowBuilder", "Bases: _BaseWorkflowBuilder"], [39, 1, 1, 0, "WorkflowBuilder", "Bases: _BaseWorkflowBuilder"], [39, 8, 1, 0, "WorkflowProtocolError", "Bases: Exception"]], "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder": [[39, 2, 1, 0, "add_parent_node", "Add new parent node."], [39, 2, 1, 0, "add_to_task_queue", "Add a task to the task queue."], [39, 2, 1, 0, "adopt_input_nodes_from_workflow", "Import input parameters for the workflow based on another parent node."], [39, 3, 1, 0, "aiida_group", "Only consider processes in the AiiDA group."], [39, 2, 1, 0, "execute_task_queue", "Execute a series of AiiDA processes for several tasks consecutively for all parent nodes as defined in the task_queue attribute."], [39, 2, 1, 0, "from_file", ""], [39, 2, 1, 0, "generate_inputs", "Generate a dictionary or builder for a certain task of the workflow for a specific parent node."], [39, 2, 1, 0, "generate_provenance_graph", "Generate provenance graph of the workflow."], [39, 3, 1, 0, "graph_attributes", "Graphiz graph attributes for the provenance graph."], [39, 2, 1, 0, "import_parent_nodes_from_aiida_db", "Import parent nodes from the AiiDA database."], [39, 2, 1, 0, "import_parent_nodes_from_pandas_df", "Extract parent nodes from a pandas data frame. The data frame needs to have a column called 'aiida_uuid' with the universally unique identifier (uuid) of the nodes."], [39, 3, 1, 0, "protocol", "Protocol used for the workflow."], [39, 2, 1, 0, "reset_task_queue", "Reset the task queue."], [39, 2, 1, 0, "return_process_nodes", "Return a pandas data frame containing the process nodes of all completed tasks."], [39, 2, 1, 0, "return_results", "Return a pandas data frame containing the calculated results of all completed tasks."], [39, 2, 1, 0, "return_runtimes", "Return a pandas data frame containing the runtimes of all completed tasks."], [39, 2, 1, 0, "return_workflow_states", "Return a pandas data frame containing the current state of  workflow."], [39, 2, 1, 0, "run_task", "Run the AiiDA processes of the task for all parent nodes."], [39, 2, 1, 0, "set_user_input", "Set a user input parameter of the workflow for all parent nodes."], [39, 2, 1, 0, "submit_task", "Submit the AiiDA processes of the task for all parent nodes."], [39, 3, 1, 0, "task_queue", "Return the task queue."], [39, 3, 1, 0, "tasks", "Return all tasks of the workflow."], [39, 2, 1, 0, "to_file", ""], [39, 3, 1, 0, "use_uuid", "Whether to use the uuid (str) to represent AiiDA nodes instead of the primary key (int)."], [39, 3, 1, 0, "user_input", "Input parameters set by the user."]], "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder": [[39, 2, 1, 0, "adopt_input_nodes_from_workflow", "Import input parameters for the workflow based on another parent node."], [39, 3, 1, 0, "aiida_group", "Only consider processes in the AiiDA group."], [39, 3, 1, 0, "completed_tasks", "Completed tasks."], [39, 2, 1, 0, "determine_workflow_state", "Determine which tasks of the workflow have been completed and which ones can be started next."], [39, 3, 1, 0, "failed_tasks", "Failed tasks."], [39, 2, 1, 0, "from_file", ""], [39, 2, 1, 0, "generate_inputs", "Generate a builder for an AiiDA work chain or calculation job."], [39, 2, 1, 0, "generate_provenance_graph", "Generate provenance graph of the workflow."], [39, 3, 1, 0, "parent_node", "Parent AiiDA node."], [39, 3, 1, 0, "protocol", "Protocol used for the workflow."], [39, 3, 1, 0, "results", "Results of the workflow."], [39, 2, 1, 0, "run_task", "Run the underlying AiiDA process of the task."], [39, 3, 1, 0, "running_tasks", "Tasks which have not yet finished."], [39, 2, 1, 0, "set_user_input", "Set user input parameters of the workflow."], [39, 2, 1, 0, "submit_task", "Submit the underlying AiiDA process of the task."], [39, 3, 1, 0, "tasks", "Return all tasks of the workflow."], [39, 2, 1, 0, "to_file", ""], [39, 3, 1, 0, "use_uuid", "Whether to use the uuid (str) to represent AiiDA nodes instead of the primary key (int)."], [39, 3, 1, 0, "user_input", "Input parameters set by the user."]], "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError": [[39, 1, 1, 0, "args", ""], [39, 2, 1, 0, "with_traceback", "Exception.with_traceback(tb) -- set self.__traceback__ to tb and return self."]], "aim2dat.ext_interfaces": [[40, 0, 0, 1, "aiida", ""], [41, 0, 0, 1, "ase_atoms", ""], [42, 0, 0, 1, "ase_surface", ""], [43, 0, 0, 1, "dscribe", ""], [44, 0, 0, 1, "graphs", ""], [45, 0, 0, 1, "hdf5", ""], [46, 0, 0, 1, "import_opt_dependencies", ""], [48, 0, 0, 1, "mp", ""], [49, 0, 0, 1, "mp_openapi", ""], [50, 0, 0, 1, "optimade", ""], [51, 0, 0, 1, "oqmd", ""], [52, 0, 0, 1, "pandas", ""], [53, 0, 0, 1, "phonopy", ""], [54, 0, 0, 1, "pymatgen", ""], [55, 0, 0, 1, "pyxtal", ""], [56, 0, 0, 1, "seekpath", ""], [57, 0, 0, 1, "spglib", ""]], "aim2dat.ext_interfaces.dscribe": [[43, 6, 1, 0, "calc_acsf_descriptor", "Calculate ACSF descriptor."], [43, 6, 1, 0, "calc_interaction_matrix", "Calcualte interaction matrix."], [43, 6, 1, 0, "calc_mbtr_descriptor", "Calculate MBTR descriptor."], [43, 6, 1, 0, "calc_soap_descriptor", "Calculate SOAP descriptor."], [43, 6, 1, 0, "return_descriptor", "Return output from SOAP, MBTR or ACSF descriptor."]], "aim2dat.ext_interfaces.pyxtal": [[55, 7, 1, 0, "NR_OF_SPACE_GROUPS", ""], [55, 7, 1, 0, "SPACE_GROUP_LIMITS", ""]], "aim2dat.ext_interfaces.spglib": [[57, 7, 1, 0, "CENTROSYMMETRIC_PG", ""]], "aim2dat.fct": [[62, 1, 1, 0, "DiscretizedAxis", "Class to create an axis to discretize a 1d function i.e. a 2d plot in a grid. Different methods for the discretization are available."], [62, 1, 1, 0, "DiscretizedGrid", "Class to create a grid to discretize a 1d function i.e. a 2d plot."], [62, 1, 1, 0, "FunctionAnalysis", "Class to analyze and compare functions."], [62, 1, 1, 0, "FunctionDiscretizationFingerprint", "Fingerprint for functions based on the DOS-Fingerprint presented in doi:10.1038/s41597-022-01754-z."], [58, 0, 0, 1, "discretization", ""], [59, 0, 0, 1, "fingerprint", ""], [60, 0, 0, 1, "function_comparison", ""], [61, 0, 0, 1, "hull", ""], [63, 0, 0, 1, "smearing", ""]], "aim2dat.fct.DiscretizedAxis": [[62, 3, 1, 0, "T", "x --> y or y --> x."], [62, 3, 1, 0, "axis", "Axis array. Contains the discrete values."], [62, 3, 1, 0, "axis_type", "Specify whether this axis should be used as x or y axis in a grid."], [62, 3, 1, 0, "discretization_method", "Discretize the specified range. Can be chosen via a string, accepting the methods specified in _available_discretization_methods or by passing a callable function."], [62, 2, 1, 0, "discretize_axis", "Perform the discretization of the specified range."], [62, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [62, 3, 1, 0, "shape", "Tuple specifying the dimensions of the axis (like numpy)."], [62, 2, 1, 0, "transpose", "Change the axis_type: x --> y or y --> x."]], "aim2dat.fct.DiscretizedGrid": [[62, 2, 1, 0, "create_grid", "Create the internal grid which is based on a list of lists. Each list contains the energy-value (x) as the first argument and the DOS-values (y) as a list in the second argument."], [62, 3, 1, 0, "grid", "Return the internal grid as a list of lists."], [62, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [62, 2, 1, 0, "plot_grid", "Plot the grid."]], "aim2dat.fct.FunctionAnalysis": [[62, 3, 1, 0, "allowed_distance_methods", "Return allowed distance methods."], [62, 2, 1, 0, "calculate_correlation", "Calculate the pearson-correlation between the values of two functions."], [62, 2, 1, 0, "calculate_discrete_fingerprint", "Calculate a discretized fingerprint of a function (doi:10.1038/s41597-022-01754-z)."], [62, 2, 1, 0, "calculate_distance", "Calculate the distance between the values of two functions."], [62, 2, 1, 0, "compare_areas", "Compare the enclosed areas of two functions."], [62, 2, 1, 0, "compare_functions_by_discrete_fingerprint", "Compare two functions based on a discretized fingerprint (doi:10.1038/s41597-022-01754-z)."], [62, 2, 1, 0, "import_data", "Import data into the internal memory."]], "aim2dat.fct.FunctionDiscretizationFingerprint": [[62, 2, 1, 0, "calculate_fingerprint", "Calculate the fingerprint."], [62, 2, 1, 0, "compare_fingerprints", "Compare two fingerprints that are stored in the internal memory."], [62, 2, 1, 0, "plot_fingerprint", "Plot the discretized function and the corresponding grid."]], "aim2dat.fct.discretization": [[58, 1, 1, 0, "DiscretizedAxis", "Class to create an axis to discretize a 1d function i.e. a 2d plot in a grid. Different methods for the discretization are available."], [58, 1, 1, 0, "DiscretizedGrid", "Class to create a grid to discretize a 1d function i.e. a 2d plot."], [58, 6, 1, 0, "limit_array", "Limit an array to a given minimum and maximum value."]], "aim2dat.fct.discretization.DiscretizedAxis": [[58, 3, 1, 0, "T", "x --> y or y --> x."], [58, 3, 1, 0, "axis", "Axis array. Contains the discrete values."], [58, 3, 1, 0, "axis_type", "Specify whether this axis should be used as x or y axis in a grid."], [58, 3, 1, 0, "discretization_method", "Discretize the specified range. Can be chosen via a string, accepting the methods specified in _available_discretization_methods or by passing a callable function."], [58, 2, 1, 0, "discretize_axis", "Perform the discretization of the specified range."], [58, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [58, 3, 1, 0, "shape", "Tuple specifying the dimensions of the axis (like numpy)."], [58, 2, 1, 0, "transpose", "Change the axis_type: x --> y or y --> x."]], "aim2dat.fct.discretization.DiscretizedGrid": [[58, 2, 1, 0, "create_grid", "Create the internal grid which is based on a list of lists. Each list contains the energy-value (x) as the first argument and the DOS-values (y) as a list in the second argument."], [58, 3, 1, 0, "grid", "Return the internal grid as a list of lists."], [58, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [58, 2, 1, 0, "plot_grid", "Plot the grid."]], "aim2dat.fct.fingerprint": [[59, 1, 1, 0, "FunctionDiscretizationFingerprint", "Fingerprint for functions based on the DOS-Fingerprint presented in doi:10.1038/s41597-022-01754-z."]], "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint": [[59, 2, 1, 0, "calculate_fingerprint", "Calculate the fingerprint."], [59, 2, 1, 0, "compare_fingerprints", "Compare two fingerprints that are stored in the internal memory."], [59, 2, 1, 0, "plot_fingerprint", "Plot the discretized function and the corresponding grid."]], "aim2dat.fct.function_comparison": [[60, 1, 1, 0, "FunctionAnalysis", "Class to analyze and compare functions."]], "aim2dat.fct.function_comparison.FunctionAnalysis": [[60, 3, 1, 0, "allowed_distance_methods", "Return allowed distance methods."], [60, 2, 1, 0, "calculate_correlation", "Calculate the pearson-correlation between the values of two functions."], [60, 2, 1, 0, "calculate_discrete_fingerprint", "Calculate a discretized fingerprint of a function (doi:10.1038/s41597-022-01754-z)."], [60, 2, 1, 0, "calculate_distance", "Calculate the distance between the values of two functions."], [60, 2, 1, 0, "compare_areas", "Compare the enclosed areas of two functions."], [60, 2, 1, 0, "compare_functions_by_discrete_fingerprint", "Compare two functions based on a discretized fingerprint (doi:10.1038/s41597-022-01754-z)."], [60, 2, 1, 0, "import_data", "Import data into the internal memory."]], "aim2dat.fct.hull": [[61, 6, 1, 0, "get_convex_hull", "Get convex hull from a list of n-dimensional points using scipy."], [61, 6, 1, 0, "get_minimum_maximum_points", "Get minimum and maximum values for each x-value."]], "aim2dat.fct.smearing": [[63, 7, 1, 0, "AVAILABLE_SMEARING_METHODS", ""], [63, 6, 1, 0, "apply_smearing", "Apply smearing to a dataset. Different smearing methods can be specified."]], "aim2dat.io": [[65, 0, 0, 1, "cif", ""], [67, 0, 0, 1, "cp2k", ""], [70, 0, 0, 1, "critic2", ""], [71, 0, 0, 1, "fhi_aims", ""], [73, 0, 0, 1, "phonopy", ""], [74, 0, 0, 1, "qe", ""], [75, 0, 0, 1, "utils", ""], [76, 0, 0, 1, "xmgrace", ""], [77, 0, 0, 1, "yaml", ""], [78, 0, 0, 1, "zeo", ""]], "aim2dat.io.cif": [[65, 6, 1, 0, "read_file", "Read cif file."]], "aim2dat.io.cp2k": [[66, 0, 0, 1, "bands_dos", ""], [67, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of states from CP2K."], [67, 6, 1, 0, "read_band_structure", "Read band structure file from CP2K."], [67, 6, 1, 0, "read_optimized_structure", "Read optimized structures from 'restart'-files."], [67, 6, 1, 0, "read_restart_structure", "Read structures from 'restart'-files."], [67, 6, 1, 0, "read_stdout", "Read standard output file of CP2K."], [68, 0, 0, 1, "restart", ""], [69, 0, 0, 1, "stdout", ""]], "aim2dat.io.cp2k.bands_dos": [[66, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of states from CP2K."], [66, 6, 1, 0, "read_band_structure", "Read band structure file from CP2K."]], "aim2dat.io.cp2k.restart": [[68, 6, 1, 0, "read_optimized_structure", "Read optimized structures from 'restart'-files."], [68, 6, 1, 0, "read_restart_structure", "Read structures from 'restart'-files."]], "aim2dat.io.cp2k.stdout": [[69, 6, 1, 0, "read_stdout", "Read standard output file of CP2K."]], "aim2dat.io.critic2": [[70, 6, 1, 0, "read_plane", "Read output plane file."], [70, 6, 1, 0, "read_stdout", "Read standard output file."]], "aim2dat.io.fhi_aims": [[71, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of states from FHI-aims."], [71, 6, 1, 0, "read_band_structure", "Read band structure files from FHI-aims. Spin-polarized calculations are not yet supported."], [71, 6, 1, 0, "read_total_density_of_states", "Read the total density of states from FHI-aims."]], "aim2dat.io.phonopy": [[73, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of phonon states from phonopy."], [73, 6, 1, 0, "read_band_structure", "Read band structure using phonopy."], [73, 6, 1, 0, "read_qha_properties", "Read the outputs from a quasi-harmonic approximation calculation."], [73, 6, 1, 0, "read_thermal_properties", "Read the thermal properties from phonopy."], [73, 6, 1, 0, "read_total_density_of_states", "Read the total density of phonon states from phonopy."]], "aim2dat.io.qe": [[74, 6, 1, 0, "read_atom_proj_density_of_states", "Read the projected density of states from Quantum ESPRESSO."], [74, 6, 1, 0, "read_band_structure", "Read band structure file from Quantum ESPRESSO. Spin-polarized calculations are not yet supported."], [74, 6, 1, 0, "read_input_structure", "Read structure from the Quantum ESPRESSO input file. ibrav parameters are not yet fully supported."], [74, 6, 1, 0, "read_total_density_of_states", "Read the total density of states from Quantum ESPRESSO."]], "aim2dat.io.utils": [[75, 6, 1, 0, "custom_open", "Open files by distinguishing custom file classes (such as AiiDA's SingleFileData) with an open function."], [75, 6, 1, 0, "read_multiple", "Add support for a list of multiple files or folder paths (decorator)."], [75, 6, 1, 0, "read_structure", "Decorate functions that parse structure(s)."]], "aim2dat.io.xmgrace": [[76, 6, 1, 0, "read_band_structure", "Read xmgrace band structure file."], [76, 6, 1, 0, "read_xmgrace_file", "Read xmgrace plot filies."]], "aim2dat.io.yaml": [[77, 6, 1, 0, "load_yaml_file", "Load a yaml-file and returns the content."], [77, 6, 1, 0, "store_in_yaml_file", "Load a yaml-file and returns the content."]], "aim2dat.io.zeo": [[78, 6, 1, 0, "write_to_file", "Write structure to file."]], "aim2dat.ml": [[79, 0, 0, 1, "cell_grid_search", ""], [81, 0, 0, 1, "kernels", ""], [82, 0, 0, 1, "metrics", ""], [83, 0, 0, 1, "transformers", ""], [84, 0, 0, 1, "utils", ""]], "aim2dat.ml.cell_grid_search": [[79, 1, 1, 0, "CellGridSearch", "Class to fit the cell parameters of an initial structure to a final structure using a brute-force grid search approach. The space group is maintained during the fitting process."]], "aim2dat.ml.cell_grid_search.CellGridSearch.__init__": [[79, 4, 2, 0, "angle_scaling_factors", "Scaling factors for the cell angles."], [79, 4, 2, 0, "angle_tolerance", "Tolerance parameter for spglib."], [79, 4, 2, 0, "ffprint_delta_bin", "Bin size to descritize the function."], [79, 4, 2, 0, "ffprint_distinguish_kinds", "Whether different kinds should be distinguished e.g. Ni0 and Ni1 would be considered as different elements if True."], [79, 4, 2, 0, "ffprint_r_max", "Cut-off value for the maximum distance between two atoms."], [79, 4, 2, 0, "ffprint_sigma", "Smearing parameter for the Gaussian function."], [79, 4, 2, 0, "ffprint_use_weights", "Whether to use importance weights for the element pairs."], [79, 4, 2, 0, "hall_number", "The argument to constrain the space-group-type search only for the Hall symbol corresponding to it."], [79, 4, 2, 0, "length_scaling_factors", "Scaling factors for the cell lengths."], [79, 4, 2, 0, "symprec", "Tolerance for spglib and length and angle comparison."], [79, 4, 2, 0, "target_value", "Target value used to calculate score if a model is set via the set_model function."]], "aim2dat.ml.cell_grid_search.CellGridSearch": [[79, 2, 1, 0, "fit", "Fit the initial to the final structure by varying the cell parameters."], [79, 2, 1, 0, "get_optimized_structure", "Get optimized structure with the lowest score."], [79, 2, 1, 0, "return_initial_score", "Return score of the initial structure."], [79, 2, 1, 0, "return_search_space", "Return list of parameter sets that are varied to fit the initial to the final structure."], [79, 2, 1, 0, "set_initial_structure", "Set initial crystal structure."], [79, 2, 1, 0, "set_model", "Set scikit-learn model to predict the target value."], [79, 2, 1, 0, "set_target_structure", "Set target crystal structure."]], "aim2dat.ml.kernels": [[81, 6, 1, 0, "krr_ffprint_cosine", "Cosine kernel for the F-Fingerprint Transformer based on the cosine distance metric (doi:10.1063/1.3079326)."], [81, 6, 1, 0, "krr_ffprint_laplace", "Laplacian kernel for the F-Fingerprint Transformer based on the cosine distance metric (doi:10.1063/1.3079326)."]], "aim2dat.ml.metrics": [[82, 6, 1, 0, "ffprint_cosine", "Cosine distance between two F-Fingerprints  as defined in: doi:10.1063/1.3079326."]], "aim2dat.ml.transformers": [[83, 1, 1, 0, "StructureACSFTransformer", "Bases: _BaseDscribeTransformer"], [83, 1, 1, 0, "StructureChemOrderTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructureCompositionTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructureCoordinationTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructureDensityTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructureFFPrintTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructureMBTRTransformer", "Bases: _BaseDscribeTransformer"], [83, 1, 1, 0, "StructureMatrixTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructurePRDFTransformer", "Bases: _BaseStructureTransformer"], [83, 1, 1, 0, "StructureSOAPTransformer", "Bases: _BaseDscribeTransformer"]], "aim2dat.ml.transformers.StructureACSFTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [83, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [83, 4, 2, 0, "elements", "List of atomic numbers or chemical symbols."], [83, 4, 2, 0, "g2_params", "List of pairs of eta and R_s values for the G^2 functions."], [83, 4, 2, 0, "g3_params", "List of kappa values for the G^3 functions."], [83, 4, 2, 0, "g4_params", "List of triplets of eta, zeta and lambda values for G^4 functions."], [83, 4, 2, 0, "g5_params", "List of triplets of eta, zeta and lambda values for G^5 functions."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "periodic", "Whether to consider periodic boundary conditions."], [83, 4, 2, 0, "r_cut", "Cutoff value."], [83, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense array."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureACSFTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureChemOrderTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "max_shells", "Number of neighbour shells that are evaluated."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureChemOrderTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureCompositionTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "distinguish_kinds", "Whether to use kinds instead of elements."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureCompositionTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureCoordinationTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "econ_conv_threshold", "Convergence threshold for the econ method."], [83, 4, 2, 0, "econ_tolerance", "Tolerance parameter for the econ method."], [83, 4, 2, 0, "feature_types", "Tuple of features that are extracted. Supported options are: 'nrs_avg', 'nrs_stdev', 'nrs_max', 'nrs_min', 'distance_avg', 'distance_stdev', 'distance_max' and 'distance_min'."], [83, 4, 2, 0, "method", "Method used to calculate the coordination environment. The default value is 'minimum_distance'."], [83, 4, 2, 0, "min_dist_delta", "Tolerance parameter that defines the relative distance from the nearest neighbour atom for the 'minimum_distance' method."], [83, 4, 2, 0, "n_nearest_neighbours", "Number of neighbours that are considered coordinated for the 'n_neighbours' method."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureCoordinationTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 3, 1, 0, "feature_types", "Feature types that are included."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureDensityTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "distinguish_kinds", "Whether to use kinds instead of elements."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureDensityTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureFFPrintTransformer.__init__": [[83, 4, 2, 0, "add_header", "Add leading entries that describe the weights and composition for the ffprint kernels."], [83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "delta_bin", "Bin size to descritize the function in angstrom."], [83, 4, 2, 0, "distinguish_kinds", "Whether different kinds should be distinguished e.g. Ni0 and Ni1 would be considered as different elements if True."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [83, 4, 2, 0, "sigma", "Smearing parameter for the Gaussian function."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureFFPrintTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureMBTRTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [83, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [83, 4, 2, 0, "elements", "List of atomic numbers or chemical symbols."], [83, 4, 2, 0, "geometry", "Setup the geometry function."], [83, 4, 2, 0, "grid", "Setup the discretization grid."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "normalization", "Method for normalizing. Supported options are 'none', 'l2', 'n_atoms', 'valle_oganov'."], [83, 4, 2, 0, "normalize_gaussians", "Whether to normalize the gaussians to an area of 1."], [83, 4, 2, 0, "periodic", "Whether to consider periodic boundary conditions."], [83, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense array."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."], [83, 4, 2, 0, "weighting", "Setup the weighting function and its parameters."]], "aim2dat.ml.transformers.StructureMBTRTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureMatrixTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [83, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [83, 4, 2, 0, "ewald_a", "Parameter controlling the width of the Gaussian functions."], [83, 4, 2, 0, "ewald_accuracy", "Accuracy threshold for the Ewald sum."], [83, 4, 2, 0, "ewald_g_cut", "Reciprocal space cutoff parameter."], [83, 4, 2, 0, "ewald_r_cut", "Real space cutoff parameter."], [83, 4, 2, 0, "ewald_w", "Weight parameter."], [83, 4, 2, 0, "matrix_type", "Matrix type. Supported options are 'coulomb', 'ewald_sum' or 'sine'."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "permutation", "Defines the output format. Options are: 'none', 'sorted_l2', 'eigenspectrum' or 'random'."], [83, 4, 2, 0, "seed", "Seed for the random numbers in case 'random' is chosen for the permutation attibute."], [83, 4, 2, 0, "sigma", "Standar deviation of the Gaussian distributed noise when using 'random' for permutation."], [83, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense 1D array."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureMatrixTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructurePRDFTransformer.__init__": [[83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "delta_bin", "Bin size to descritize the function in angstrom."], [83, 4, 2, 0, "distinguish_kinds", "Whether different kinds should be distinguished e.g. Ni0 and Ni1 would be considered as different elements if True."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructurePRDFTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureSOAPTransformer.__init__": [[83, 4, 2, 0, "average", "The averaging mode over the centers of interest. Supported options are: 'off', 'inner' or 'outer'."], [83, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [83, 4, 2, 0, "compression", "Feature compression options."], [83, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [83, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [83, 4, 2, 0, "elements", "List of atomic numbers or chemical symbols."], [83, 4, 2, 0, "l_max", "The maximum degree of spherical harmonics."], [83, 4, 2, 0, "n_max", "The number of radial basis functions."], [83, 4, 2, 0, "n_procs", "Number of parallel processes."], [83, 4, 2, 0, "periodic", "Whether to consider periodic boundary conditions."], [83, 4, 2, 0, "r_cut", "Cutoff value."], [83, 4, 2, 0, "rbf", "The radial basis functions to use. Supported options are: 'gto' or 'polynomial'."], [83, 4, 2, 0, "sigma", "The standard deviation of the gaussians."], [83, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense array."], [83, 4, 2, 0, "verbose", "Whether to print a progress bar."], [83, 4, 2, 0, "weighting", "Contains the options which control the weighting of the atomic density."]], "aim2dat.ml.transformers.StructureSOAPTransformer": [[83, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [83, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [83, 2, 1, 0, "fit", "Fit function that determines the number of features."], [83, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [83, 2, 1, 0, "get_feature_names_out", "Get feature names."], [83, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [83, 2, 1, 0, "get_params", "Get parameters for this estimator."], [83, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [83, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [83, 2, 1, 0, "set_output", "Set output container."], [83, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [83, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.utils": [[84, 6, 1, 0, "train_test_split_crystals", "Split dataset of crystals into a training and test dataset. The target attribute and/or the composition can be strafied based on binning."]], "aim2dat.plots": [[86, 6, 1, 0, "BandStructure", "Depreciated band structure class."], [86, 1, 1, 0, "BandStructureDOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure, aim2dat.plots.base_dos._BaseDensityOfStates"], [86, 6, 1, 0, "BandStructureDensityOfStates", "Depreciated band structure DOS class."], [86, 1, 1, 0, "BandStructurePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure"], [86, 1, 1, 0, "DOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_dos._BaseDensityOfStates"], [86, 6, 1, 0, "DensityOfStates", "Depreciated DOS class."], [86, 1, 1, 0, "PartialChargesPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [86, 1, 1, 0, "PartialRDFPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [86, 6, 1, 0, "PhaseDiagram", "Depreciated PhaseDiagram class."], [86, 1, 1, 0, "PhasePlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [86, 1, 1, 0, "PlanarFieldPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [86, 1, 1, 0, "SimplePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin"], [86, 6, 1, 0, "Spectrum", "Depreciated Spectrum class."], [86, 1, 1, 0, "SpectrumPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_mixin._PeakDetectionMixin, aim2dat.plots.base_mixin._SmearingMixin"], [86, 1, 1, 0, "SurfacePlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [85, 0, 0, 1, "band_structure_dos", ""], [87, 0, 0, 1, "partial_charges", ""], [88, 0, 0, 1, "partial_rdf", ""], [89, 0, 0, 1, "phase", ""], [90, 0, 0, 1, "planar_fields", ""], [91, 0, 0, 1, "simple_plot", ""], [92, 0, 0, 1, "spectroscopy", ""], [93, 0, 0, 1, "surface", ""], [94, 0, 0, 1, "thermal_properties", ""]], "aim2dat.plots.BandStructureDOSPlot.__init__": [[86, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [86, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [86, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.BandStructureDOSPlot": [[86, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [86, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [86, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [86, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [86, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [86, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_band_structure", "Import a data set."], [86, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [86, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [86, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [86, 2, 1, 0, "import_total_dos", "Import total density of states."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 2, 1, 0, "set_reference_cell", "Set reference cell."], [86, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [86, 2, 1, 0, "shift_bands_and_dos", "Shift band structure and density of states."], [86, 2, 1, 0, "shift_bands_and_dos_to_vbm", "Shift the bands and the density of states such that the VBM is zero."], [86, 2, 1, 0, "shift_dos", "Shift density of states."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [86, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [86, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.BandStructurePlot": [[86, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [86, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [86, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [86, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [86, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [86, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_band_structure", "Import a data set."], [86, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 2, 1, 0, "set_reference_cell", "Set reference cell."], [86, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.DOSPlot.__init__": [[86, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [86, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [86, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.DOSPlot": [[86, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [86, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [86, 2, 1, 0, "import_total_dos", "Import total density of states."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 2, 1, 0, "shift_dos", "Shift density of states."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [86, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [86, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PartialChargesPlot": [[86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_from_aiida_list", "Import partial charges."], [86, 2, 1, 0, "import_partial_charges", "Import partial charges."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 3, 1, 0, "pc_plot_order", "List of plot assignments to order the plotted data."], [86, 3, 1, 0, "pc_plot_type", "plot type of the partial charge data sets, supported options are 'scatter', 'bar'."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PartialRDFPlot": [[86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_ffingerprint", "Import F-Fingerprint functions."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "x_unit", "Set unit of the x coordinate."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PhasePlot.__init__": [[86, 4, 2, 0, "show_convex_hull", "Whether to calculate and show the convex hull in the plot."]], "aim2dat.plots.PhasePlot": [[86, 2, 1, 0, "add_data_point", "Add datapoint to the dataset."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "elements", "List of elements that are included in the plot. If set to None all elements are included."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_from_pandas_df", "Import data from pandas data frame."], [86, 2, 1, 0, "import_from_structure_collection", "Import data from a StructureCollection object."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "plot_type", "'formation_energy', 'stability', 'band_gap', 'direct_band_gap' and 'numbers'."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_crystal_system", "Show crystal system of the phases."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "top_labels", "Chemical formulas that are shown as labels in the plot."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PlanarFieldPlot": [[86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 3, 1, 0, "coordinates_unit", "Set unit of the two coordinates."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_field", "Import field."], [86, 2, 1, 0, "import_from_aiida_arraydata", "Import from aiida array data."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 3, 1, 0, "norm", "Set norm of the z-values for matplotlib."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "plot_type", "Set plot-type."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "values_unit", "Set unit of the z-values."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.SimplePlot": [[86, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [86, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_bar_data_set", "Import data set for a bar plot."], [86, 2, 1, 0, "import_scatter_data_set", "Import data set for a scatter plot."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.SpectrumPlot.__init__": [[86, 4, 2, 0, "detect_peaks", "Whether to detect peaks of the spectra."], [86, 4, 2, 0, "plot_original_spectra", "Whether to plot the original spectra (in addition to the broadened spectra)."], [86, 4, 2, 0, "plot_unit_x", "Unit of the x-values. Imported spectra are transformed to the corresponding unit if the unit of the imported data set is given."], [86, 4, 2, 0, "smooth_spectra", "Whether to broaden the spectra."]], "aim2dat.plots.SpectrumPlot": [[86, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_spectrum", "Import spectrum."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 3, 1, 0, "peak_color", ""], [86, 3, 1, 0, "peak_distance", ""], [86, 3, 1, 0, "peak_height", ""], [86, 3, 1, 0, "peak_line_style", ""], [86, 3, 1, 0, "peak_max_factor", ""], [86, 3, 1, 0, "peak_plateau_size", ""], [86, 3, 1, 0, "peak_prominence", ""], [86, 3, 1, 0, "peak_rel_height", ""], [86, 3, 1, 0, "peak_threshold", ""], [86, 3, 1, 0, "peak_width", ""], [86, 3, 1, 0, "peak_wlen", ""], [86, 3, 1, 0, "peak_y_min", ""], [86, 3, 1, 0, "peaks", ""], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "plot_unit_x", "Set unit of x-axis."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [86, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [86, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.SurfacePlot": [[86, 2, 1, 0, "add_surface_facet", "Add surface."], [86, 3, 1, 0, "area_unit", "Unit of the surface area."], [86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 3, 1, 0, "bulk_phase", "Bulk phase."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "elemental_phases", "Elemental phases."], [86, 3, 1, 0, "energy_unit", "Energy unit."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_from_pandas_df", "Import surface facets from a results pandas data frame of the workflow builder."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "plot_properties", "Properties that are plotted on the y-axis."], [86, 3, 1, 0, "plot_type", "Plot type. Supported options are 'chem_potential' or 'excess_atoms'."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 2, 1, 0, "set_bulk_phase", "Set bulk phase."], [86, 2, 1, 0, "set_elemental_phase", "Set elemental phase."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.band_structure_dos": [[85, 6, 1, 0, "BandStructure", "Depreciated band structure class."], [85, 1, 1, 0, "BandStructureDOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure, aim2dat.plots.base_dos._BaseDensityOfStates"], [85, 6, 1, 0, "BandStructureDensityOfStates", "Depreciated band structure DOS class."], [85, 1, 1, 0, "BandStructurePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure"], [85, 1, 1, 0, "DOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_dos._BaseDensityOfStates"], [85, 6, 1, 0, "DensityOfStates", "Depreciated DOS class."]], "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.__init__": [[85, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [85, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [85, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.band_structure_dos.BandStructureDOSPlot": [[85, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [85, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [85, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [85, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_band_structure", "Import a data set."], [85, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [85, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [85, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [85, 2, 1, 0, "import_total_dos", "Import total density of states."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "set_reference_cell", "Set reference cell."], [85, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [85, 2, 1, 0, "shift_bands_and_dos", "Shift band structure and density of states."], [85, 2, 1, 0, "shift_bands_and_dos_to_vbm", "Shift the bands and the density of states such that the VBM is zero."], [85, 2, 1, 0, "shift_dos", "Shift density of states."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [85, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [85, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.band_structure_dos.BandStructurePlot": [[85, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [85, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [85, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [85, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_band_structure", "Import a data set."], [85, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "set_reference_cell", "Set reference cell."], [85, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.band_structure_dos.DOSPlot.__init__": [[85, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [85, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [85, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.band_structure_dos.DOSPlot": [[85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [85, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [85, 2, 1, 0, "import_total_dos", "Import total density of states."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "shift_dos", "Shift density of states."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [85, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [85, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.partial_charges": [[87, 1, 1, 0, "PartialChargesPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.partial_charges.PartialChargesPlot": [[87, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [87, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [87, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [87, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [87, 3, 1, 0, "custom_colors", "Colors used in the plot."], [87, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [87, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [87, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [87, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [87, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [87, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [87, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [87, 3, 1, 0, "data_labels", "List of labels for all data sets."], [87, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [87, 2, 1, 0, "import_from_aiida_list", "Import partial charges."], [87, 2, 1, 0, "import_partial_charges", "Import partial charges."], [87, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [87, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [87, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [87, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [87, 3, 1, 0, "pc_plot_order", "List of plot assignments to order the plotted data."], [87, 3, 1, 0, "pc_plot_type", "plot type of the partial charge data sets, supported options are 'scatter', 'bar'."], [87, 2, 1, 0, "plot", "Plot the data sets."], [87, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [87, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [87, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [87, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [87, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [87, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [87, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [87, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [87, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [87, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [87, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [87, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [87, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [87, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [87, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [87, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [87, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [87, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [87, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [87, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [87, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [87, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [87, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [87, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [87, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [87, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [87, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [87, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [87, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [87, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.partial_rdf": [[88, 1, 1, 0, "PartialRDFPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.partial_rdf.PartialRDFPlot": [[88, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [88, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [88, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [88, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [88, 3, 1, 0, "custom_colors", "Colors used in the plot."], [88, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [88, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [88, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [88, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [88, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [88, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [88, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [88, 3, 1, 0, "data_labels", "List of labels for all data sets."], [88, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [88, 2, 1, 0, "import_ffingerprint", "Import F-Fingerprint functions."], [88, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [88, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [88, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [88, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [88, 2, 1, 0, "plot", "Plot the data sets."], [88, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [88, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [88, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [88, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [88, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [88, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [88, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [88, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [88, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [88, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [88, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [88, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [88, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [88, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [88, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [88, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [88, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [88, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [88, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [88, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [88, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [88, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [88, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [88, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [88, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [88, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [88, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [88, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [88, 3, 1, 0, "x_unit", "Set unit of the x coordinate."], [88, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [88, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.phase": [[89, 6, 1, 0, "PhaseDiagram", "Depreciated PhaseDiagram class."], [89, 1, 1, 0, "PhasePlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.phase.PhasePlot.__init__": [[89, 4, 2, 0, "show_convex_hull", "Whether to calculate and show the convex hull in the plot."]], "aim2dat.plots.phase.PhasePlot": [[89, 2, 1, 0, "add_data_point", "Add datapoint to the dataset."], [89, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [89, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [89, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [89, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [89, 3, 1, 0, "custom_colors", "Colors used in the plot."], [89, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [89, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [89, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [89, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [89, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [89, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [89, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [89, 3, 1, 0, "data_labels", "List of labels for all data sets."], [89, 3, 1, 0, "elements", "List of elements that are included in the plot. If set to None all elements are included."], [89, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [89, 2, 1, 0, "import_from_pandas_df", "Import data from pandas data frame."], [89, 2, 1, 0, "import_from_structure_collection", "Import data from a StructureCollection object."], [89, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [89, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [89, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [89, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [89, 2, 1, 0, "plot", "Plot the data sets."], [89, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [89, 3, 1, 0, "plot_type", "'formation_energy', 'stability', 'band_gap', 'direct_band_gap' and 'numbers'."], [89, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [89, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [89, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [89, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [89, 3, 1, 0, "show_crystal_system", "Show crystal system of the phases."], [89, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [89, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [89, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [89, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [89, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [89, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [89, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [89, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [89, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [89, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [89, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [89, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [89, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [89, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [89, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [89, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [89, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [89, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [89, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [89, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [89, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [89, 3, 1, 0, "top_labels", "Chemical formulas that are shown as labels in the plot."], [89, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [89, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [89, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [89, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.planar_fields": [[90, 1, 1, 0, "PlanarFieldPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.planar_fields.PlanarFieldPlot": [[90, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [90, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [90, 3, 1, 0, "coordinates_unit", "Set unit of the two coordinates."], [90, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [90, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [90, 3, 1, 0, "custom_colors", "Colors used in the plot."], [90, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [90, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [90, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [90, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [90, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [90, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [90, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [90, 3, 1, 0, "data_labels", "List of labels for all data sets."], [90, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [90, 2, 1, 0, "import_field", "Import field."], [90, 2, 1, 0, "import_from_aiida_arraydata", "Import from aiida array data."], [90, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [90, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [90, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [90, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [90, 3, 1, 0, "norm", "Set norm of the z-values for matplotlib."], [90, 2, 1, 0, "plot", "Plot the data sets."], [90, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [90, 3, 1, 0, "plot_type", "Set plot-type."], [90, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [90, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [90, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [90, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [90, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [90, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [90, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [90, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [90, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [90, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [90, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [90, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [90, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [90, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [90, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [90, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [90, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [90, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [90, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [90, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [90, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [90, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [90, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [90, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [90, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [90, 3, 1, 0, "values_unit", "Set unit of the z-values."], [90, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [90, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [90, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [90, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.simple_plot": [[91, 1, 1, 0, "SimplePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin"]], "aim2dat.plots.simple_plot.SimplePlot": [[91, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [91, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [91, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [91, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [91, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [91, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [91, 3, 1, 0, "custom_colors", "Colors used in the plot."], [91, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [91, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [91, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [91, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [91, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [91, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [91, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [91, 3, 1, 0, "data_labels", "List of labels for all data sets."], [91, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [91, 2, 1, 0, "import_bar_data_set", "Import data set for a bar plot."], [91, 2, 1, 0, "import_scatter_data_set", "Import data set for a scatter plot."], [91, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [91, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [91, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [91, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [91, 2, 1, 0, "plot", "Plot the data sets."], [91, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [91, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [91, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [91, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [91, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [91, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [91, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [91, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [91, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [91, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [91, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [91, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [91, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [91, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [91, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [91, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [91, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [91, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [91, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [91, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [91, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [91, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [91, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [91, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [91, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [91, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [91, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [91, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [91, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [91, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [91, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.spectroscopy": [[92, 6, 1, 0, "Spectrum", "Depreciated Spectrum class."], [92, 1, 1, 0, "SpectrumPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_mixin._PeakDetectionMixin, aim2dat.plots.base_mixin._SmearingMixin"]], "aim2dat.plots.spectroscopy.SpectrumPlot.__init__": [[92, 4, 2, 0, "detect_peaks", "Whether to detect peaks of the spectra."], [92, 4, 2, 0, "plot_original_spectra", "Whether to plot the original spectra (in addition to the broadened spectra)."], [92, 4, 2, 0, "plot_unit_x", "Unit of the x-values. Imported spectra are transformed to the corresponding unit if the unit of the imported data set is given."], [92, 4, 2, 0, "smooth_spectra", "Whether to broaden the spectra."]], "aim2dat.plots.spectroscopy.SpectrumPlot": [[92, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [92, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [92, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [92, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [92, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [92, 3, 1, 0, "custom_colors", "Colors used in the plot."], [92, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [92, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [92, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [92, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [92, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [92, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [92, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [92, 3, 1, 0, "data_labels", "List of labels for all data sets."], [92, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [92, 2, 1, 0, "import_spectrum", "Import spectrum."], [92, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [92, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [92, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [92, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [92, 3, 1, 0, "peak_color", ""], [92, 3, 1, 0, "peak_distance", ""], [92, 3, 1, 0, "peak_height", ""], [92, 3, 1, 0, "peak_line_style", ""], [92, 3, 1, 0, "peak_max_factor", ""], [92, 3, 1, 0, "peak_plateau_size", ""], [92, 3, 1, 0, "peak_prominence", ""], [92, 3, 1, 0, "peak_rel_height", ""], [92, 3, 1, 0, "peak_threshold", ""], [92, 3, 1, 0, "peak_width", ""], [92, 3, 1, 0, "peak_wlen", ""], [92, 3, 1, 0, "peak_y_min", ""], [92, 3, 1, 0, "peaks", ""], [92, 2, 1, 0, "plot", "Plot the data sets."], [92, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [92, 3, 1, 0, "plot_unit_x", "Set unit of x-axis."], [92, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [92, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [92, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [92, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [92, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [92, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [92, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [92, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [92, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [92, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [92, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [92, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [92, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [92, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [92, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [92, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [92, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [92, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [92, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [92, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [92, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [92, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [92, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [92, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [92, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [92, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [92, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [92, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [92, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [92, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [92, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [92, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [92, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.surface": [[93, 1, 1, 0, "SurfacePlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.surface.SurfacePlot": [[93, 2, 1, 0, "add_surface_facet", "Add surface."], [93, 3, 1, 0, "area_unit", "Unit of the surface area."], [93, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [93, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [93, 3, 1, 0, "bulk_phase", "Bulk phase."], [93, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [93, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [93, 3, 1, 0, "custom_colors", "Colors used in the plot."], [93, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [93, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [93, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [93, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [93, 3, 1, 0, "data_labels", "List of labels for all data sets."], [93, 3, 1, 0, "elemental_phases", "Elemental phases."], [93, 3, 1, 0, "energy_unit", "Energy unit."], [93, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [93, 2, 1, 0, "import_from_pandas_df", "Import surface facets from a results pandas data frame of the workflow builder."], [93, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [93, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [93, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [93, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [93, 2, 1, 0, "plot", "Plot the data sets."], [93, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [93, 3, 1, 0, "plot_properties", "Properties that are plotted on the y-axis."], [93, 3, 1, 0, "plot_type", "Plot type. Supported options are 'chem_potential' or 'excess_atoms'."], [93, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [93, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [93, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [93, 2, 1, 0, "set_bulk_phase", "Set bulk phase."], [93, 2, 1, 0, "set_elemental_phase", "Set elemental phase."], [93, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [93, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [93, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [93, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [93, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [93, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [93, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [93, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [93, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [93, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [93, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [93, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [93, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [93, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [93, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [93, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [93, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [93, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [93, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [93, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [93, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [93, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [93, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [93, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [93, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [93, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.thermal_properties": [[94, 1, 1, 0, "QHAPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [94, 1, 1, 0, "ThermalPropertiesPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.thermal_properties.QHAPlot": [[94, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [94, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [94, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [94, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [94, 3, 1, 0, "custom_colors", "Colors used in the plot."], [94, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [94, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [94, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [94, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [94, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [94, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [94, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [94, 3, 1, 0, "data_labels", "List of labels for all data sets."], [94, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [94, 2, 1, 0, "import_qha_properties", "Import data set."], [94, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [94, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [94, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [94, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [94, 2, 1, 0, "plot", "Plot the data sets."], [94, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [94, 3, 1, 0, "plot_properties", "Properties that are plotted."], [94, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [94, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [94, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [94, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [94, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [94, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [94, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [94, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [94, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [94, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [94, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [94, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [94, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [94, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [94, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [94, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [94, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [94, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [94, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [94, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [94, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [94, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [94, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [94, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [94, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [94, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [94, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [94, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [94, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.thermal_properties.ThermalPropertiesPlot": [[94, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [94, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [94, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [94, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [94, 3, 1, 0, "custom_colors", "Colors used in the plot."], [94, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [94, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [94, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [94, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [94, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [94, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [94, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [94, 3, 1, 0, "data_labels", "List of labels for all data sets."], [94, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [94, 2, 1, 0, "import_thermal_properties", "Import data set."], [94, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [94, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [94, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [94, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [94, 2, 1, 0, "plot", "Plot the data sets."], [94, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [94, 3, 1, 0, "plot_properties", "Plot properties."], [94, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [94, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [94, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [94, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [94, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [94, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [94, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [94, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [94, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [94, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [94, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [94, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [94, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [94, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [94, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [94, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [94, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [94, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [94, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [94, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [94, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [94, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [94, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [94, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [94, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [94, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [94, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [94, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [94, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.strct": [[109, 1, 1, 0, "Structure", "Bases: aim2dat.strct.mixin.AnalysisMixin, aim2dat.strct.mixin.ManipulationMixin"], [109, 1, 1, 0, "StructureCollection", "The StructureCollection class is a container for one or multiple atomic structures. It implements several import_* and append_* functions to add new data to the object."], [109, 1, 1, 0, "StructureImporter", "Bases: aim2dat.strct.mixin.ConstraintsMixin"], [109, 1, 1, 0, "SurfaceGeneration", "Generates a surfaces and surface slabs based on a bulk crystal structure."], [95, 0, 0, 1, "brillouin_zone_2d", ""], [101, 0, 0, 1, "ext_analysis", ""], [108, 0, 0, 1, "ext_manipulation", ""], [110, 0, 0, 1, "mixin", ""], [111, 0, 0, 1, "stability", ""], [112, 0, 0, 1, "strct", ""], [113, 0, 0, 1, "strct_comparison", ""], [114, 0, 0, 1, "strct_coordination", ""], [115, 0, 0, 1, "strct_io", ""], [116, 0, 0, 1, "strct_manipulation", ""], [117, 0, 0, 1, "strct_misc", ""], [118, 0, 0, 1, "strct_point_groups", ""], [119, 0, 0, 1, "strct_prdf", ""], [120, 0, 0, 1, "strct_space_groups", ""], [121, 0, 0, 1, "strct_super_cell", ""], [122, 0, 0, 1, "strct_validation", ""], [123, 0, 0, 1, "structure_collection", ""], [124, 0, 0, 1, "structure_importer", ""], [125, 0, 0, 1, "structure_operations", ""], [126, 0, 0, 1, "surface", ""], [127, 0, 0, 1, "surface_utils", ""]], "aim2dat.strct.Structure": [[109, 3, 1, 0, "analysis_methods", "Return calculation methods."], [109, 3, 1, 0, "attributes", "Return attributes."], [109, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [109, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [109, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [109, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [109, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [109, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [109, 3, 1, 0, "cell", "Return the cell of the structure."], [109, 3, 1, 0, "cell_angles", "Cell angles."], [109, 3, 1, 0, "cell_lengths", "cell lengths."], [109, 3, 1, 0, "cell_volume", "cell volume."], [109, 3, 1, 0, "chem_formula", "Return chemical formula."], [109, 2, 1, 0, "copy", "Return copy of Structure object."], [109, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [109, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [109, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."], [109, 3, 1, 0, "elements", "Return the elements of the structure."], [109, 3, 1, 0, "export_methods", "Return export methods."], [109, 3, 1, 0, "extras", "Return extras."], [109, 2, 1, 0, "from_aiida_structuredata", "Append structure from AiiDA structure node."], [109, 2, 1, 0, "from_ase_atoms", "Get structure from ase atoms object."], [109, 2, 1, 0, "from_file", "Get structure from file using the ase read-function."], [109, 2, 1, 0, "from_pymatgen_structure", "Get structure from pymatgen structure or molecule object."], [109, 3, 1, 0, "function_args", "Return function arguments for stored extras."], [109, 2, 1, 0, "get", "Get attribute by key and return default if not present."], [109, 2, 1, 0, "get_positions", "Return positions of atoms."], [109, 3, 1, 0, "import_methods", "Return import methods."], [109, 2, 1, 0, "iter_sites", "Iterate through the sites of the structure."], [109, 2, 1, 0, "keys", "Return property names to create the structure."], [109, 3, 1, 0, "kinds", "Kinds of the structure."], [109, 3, 1, 0, "label", "Return label of the structure (especially relevant in StructureCollection)."], [109, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [109, 3, 1, 0, "pbc", "Return the pbc of the structure."], [109, 2, 1, 0, "perform_analysis", "Perform structure analaysis using an external method."], [109, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [109, 3, 1, 0, "positions", "Return the cartesian positions of the structure."], [109, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [109, 3, 1, 0, "scaled_positions", "Return the scaled positions of the structure."], [109, 2, 1, 0, "set_attribute", "Set attribute."], [109, 2, 1, 0, "set_positions", "Set postions of atoms."], [109, 2, 1, 0, "set_site_attribute", "Set site attribute."], [109, 3, 1, 0, "site_attributes", "dict: Dictionary containing the label of a site attribute as key and a tuple/list of values having the same length as the Structure object itself (number of sites) containing site specific properties or attributes (e.g. charges, magnetic moments, forces, ...)."], [109, 3, 1, 0, "store_calculated_properties", "Store calculated properties to reuse them later."], [109, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."], [109, 2, 1, 0, "to_aiida_structuredata", "Create AiiDA structuredata."], [109, 2, 1, 0, "to_ase_atoms", "Create ase Atoms object."], [109, 2, 1, 0, "to_dict", "Export structure to python dictionary."], [109, 2, 1, 0, "to_file", "Export structure to file using the ase interface or certain file formats for Zeo++."], [109, 2, 1, 0, "to_pymatgen_structure", "Create pymatgen Structure (if cell is not None) or Molecule (if cell is None) object."]], "aim2dat.strct.StructureCollection": [[109, 2, 1, 0, "append", "Append structure."], [109, 2, 1, 0, "append_from_aiida_structuredata", "Append structure from aiida structuredata."], [109, 2, 1, 0, "append_from_ase_atoms", "Append structure from ase atoms object."], [109, 2, 1, 0, "append_from_file", "Append structure from file using the ase read-function."], [109, 2, 1, 0, "append_from_pymatgen_structure", "Append structure from pymatgen structure or molecule object."], [109, 2, 1, 0, "append_structure", "Append Structure object to collection. The label of the structure needs to be either given via the structures's property or as keyword argument."], [109, 2, 1, 0, "copy", "Return copy of StructureCollection object."], [109, 2, 1, 0, "create_pandas_df", "Create a pandas data frame of the object."], [109, 2, 1, 0, "duplicate_structure", "Duplicate structure."], [109, 2, 1, 0, "get_all_attribute_keys", "Get all attribute keys."], [109, 2, 1, 0, "get_all_elements", "Get the element symbols of all structures."], [109, 2, 1, 0, "get_all_kinds", "Get the kind strings of all structures."], [109, 2, 1, 0, "get_all_structures", "Return a list of all structures."], [109, 2, 1, 0, "get_structure", "Get structure by key."], [109, 2, 1, 0, "import_from_aiida_db", "Import from the AiiDA database."], [109, 2, 1, 0, "import_from_hdf5_file", "Import from hdf5-file. Calculated extras are not yet supported."], [109, 2, 1, 0, "import_from_pandas_df", "Import from pandas data frame."], [109, 2, 1, 0, "index", "Return index of label. If the label is not present, None is returned."], [109, 2, 1, 0, "items", "Return a list of label, value tuples."], [109, 3, 1, 0, "labels", "Labels assigened to the structures."], [109, 2, 1, 0, "pop", "Pop structure."], [109, 2, 1, 0, "store_in_aiida_db", "Store structures into the AiiDA-database."], [109, 2, 1, 0, "store_in_hdf5_file", "Store structures in hdf5-file. Calculated extras are not yet supported."]], "aim2dat.strct.StructureImporter": [[109, 2, 1, 0, "add_chem_formula_constraint", "Add a chemical formula as a constraint."], [109, 2, 1, 0, "append_from_mp_by_id", "Append structure via the database-id."], [109, 3, 1, 0, "attribute_constraints", "Attribute constraints."], [109, 3, 1, 0, "chem_formula_constraints", "Constraints on the chemical formula."], [109, 3, 1, 0, "concentration_constraints", "Elemental concentration constraints."], [109, 2, 1, 0, "generate_random_crystals", "Generate random crystals using the PyXtaL library."], [109, 2, 1, 0, "import_from_mp", "Import structures from the crystal database Materials Project using the pymatgen interface."], [109, 2, 1, 0, "import_from_optimade", "Import crystal structures using the optimade-API."], [109, 2, 1, 0, "import_from_oqmd", "Import from the open quantum materials database."], [109, 3, 1, 0, "neglect_elemental_structures", "Whether to neglect elemental phases."], [109, 2, 1, 0, "remove_constraints", "Remove all constraints."], [109, 2, 1, 0, "return_optimade_database_ids", "Return a list of all ids of online databases that provide a base-url."], [109, 2, 1, 0, "set_attribute_constraint", "Set a constraint on attributes."], [109, 2, 1, 0, "set_concentration_constraint", "Set a constraint on the concentration of an element in the structure."], [109, 3, 1, 0, "structures", "Return the internal StructureCollection object."]], "aim2dat.strct.SurfaceGeneration": [[109, 2, 1, 0, "create_surface", "Create surface from a bulk crystal structure."], [109, 2, 1, 0, "generate_surface_slabs", "Generate surface slabs with all terminations for a certain direction given by its miller indices."], [109, 2, 1, 0, "store_surfaces_in_aiida_db", "Store surfaces into the AiiDA-database."], [109, 2, 1, 0, "to_aiida_surfacedata", "Create surface from a bulk crystal structure."]], "aim2dat.strct.brillouin_zone_2d": [[95, 7, 1, 0, "C_RECT_LGS", ""], [95, 7, 1, 0, "P_HEX_LGS", ""], [95, 7, 1, 0, "P_OBL_LGS", ""], [95, 7, 1, 0, "P_RECT_LGS", ""], [95, 7, 1, 0, "P_SQU_LGS", ""], [95, 7, 1, 0, "P_TRIG_LGS", ""]], "aim2dat.strct.ext_analysis": [[101, 6, 1, 0, "calculate_acsf_descriptor", "Calculate ACSF descriptor as defined in doi:10.1063/1.3553717. This method is based on the implementations of the dscribe python package."], [101, 6, 1, 0, "calculate_ffingerprint_order_p", "Calculate order parameters for the total structure and for each individual site."], [101, 6, 1, 0, "calculate_interaction_matrix", "Calculate interaction matrices as defined in doi:10.1002/qua.24917. This method is based on the implementations of the dscribe python package."], [101, 6, 1, 0, "calculate_mbtr_descriptor", "Calculate MBTR descriptor as defined in doi:10.1088/2632-2153/aca005. This method is based on the implementations of the dscribe python package."], [101, 6, 1, 0, "calculate_planes", "Find planar arangements of atoms in the structure."], [101, 6, 1, 0, "calculate_prdf", "Calculate the partial radial distribution function. The calculation is based on: doi:10.1103/PhysRevB.89.205118."], [101, 6, 1, 0, "calculate_soap_descriptor", "is based on the implementations of the dscribe python package."], [101, 6, 1, 0, "calculate_warren_cowley_order_p", "Calculate Warren-Cowley like order parameters as defined in doi:10.1103/PhysRevB.96.024104."], [101, 6, 1, 0, "create_graph", "Create graph based on the coordination."], [96, 0, 0, 1, "decorator", ""], [101, 6, 1, 0, "determine_molecular_fragments", "Find molecular fragments in a larger molecule/cluster of periodic crystal."], [97, 0, 0, 1, "dscribe_descriptors", ""], [98, 0, 0, 1, "ffprint_order_p", ""], [99, 0, 0, 1, "fragmentation", ""], [100, 0, 0, 1, "graphs", ""], [102, 0, 0, 1, "planes", ""], [103, 0, 0, 1, "prdf", ""], [104, 0, 0, 1, "warren_cowley_order_parameters", ""]], "aim2dat.strct.ext_analysis.calculate_interaction_matrix": [[101, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [101, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [101, 4, 2, 0, "ewald_a", "Parameter controlling the width of the Gaussian functions."], [101, 4, 2, 0, "ewald_accuracy", "Accuracy threshold for the Ewald sum."], [101, 4, 2, 0, "ewald_g_cut", "Reciprocal space cutoff parameter."], [101, 4, 2, 0, "ewald_r_cut", "Real space cutoff parameter."], [101, 4, 2, 0, "ewald_w", "Weight parameter."], [101, 4, 2, 0, "matrix_type", "Matrix type. Supported options are 'coulomb', 'ewald_sum' or 'sine'."], [101, 4, 2, 0, "permutation", "Defines the output format. Options are: 'none', 'sorted_l2', 'eigenspectrum' or 'random'."], [101, 4, 2, 0, "seed", "Seed for the random numbers in case 'random' is chosen for the permutation attibute."], [101, 4, 2, 0, "sigma", "Standar deviation of the Gaussian distributed noise when using 'random' for permutation."], [101, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense 1D array."], [101, 4, 2, 0, "structure", "Structure object."]], "aim2dat.strct.ext_analysis.decorator": [[96, 6, 1, 0, "external_analysis_method", "Decorate external analysis methods."]], "aim2dat.strct.ext_analysis.dscribe_descriptors": [[97, 6, 1, 0, "calculate_acsf_descriptor", "Calculate ACSF descriptor as defined in doi:10.1063/1.3553717. This method is based on the implementations of the dscribe python package."], [97, 6, 1, 0, "calculate_interaction_matrix", "Calculate interaction matrices as defined in doi:10.1002/qua.24917. This method is based on the implementations of the dscribe python package."], [97, 6, 1, 0, "calculate_mbtr_descriptor", "Calculate MBTR descriptor as defined in doi:10.1088/2632-2153/aca005. This method is based on the implementations of the dscribe python package."], [97, 6, 1, 0, "calculate_soap_descriptor", "is based on the implementations of the dscribe python package."]], "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_interaction_matrix": [[97, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [97, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [97, 4, 2, 0, "ewald_a", "Parameter controlling the width of the Gaussian functions."], [97, 4, 2, 0, "ewald_accuracy", "Accuracy threshold for the Ewald sum."], [97, 4, 2, 0, "ewald_g_cut", "Reciprocal space cutoff parameter."], [97, 4, 2, 0, "ewald_r_cut", "Real space cutoff parameter."], [97, 4, 2, 0, "ewald_w", "Weight parameter."], [97, 4, 2, 0, "matrix_type", "Matrix type. Supported options are 'coulomb', 'ewald_sum' or 'sine'."], [97, 4, 2, 0, "permutation", "Defines the output format. Options are: 'none', 'sorted_l2', 'eigenspectrum' or 'random'."], [97, 4, 2, 0, "seed", "Seed for the random numbers in case 'random' is chosen for the permutation attibute."], [97, 4, 2, 0, "sigma", "Standar deviation of the Gaussian distributed noise when using 'random' for permutation."], [97, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense 1D array."], [97, 4, 2, 0, "structure", "Structure object."]], "aim2dat.strct.ext_analysis.ffprint_order_p": [[98, 6, 1, 0, "calculate_ffingerprint_order_p", "Calculate order parameters for the total structure and for each individual site."]], "aim2dat.strct.ext_analysis.fragmentation": [[99, 6, 1, 0, "determine_molecular_fragments", "Find molecular fragments in a larger molecule/cluster of periodic crystal."]], "aim2dat.strct.ext_analysis.graphs": [[100, 6, 1, 0, "create_graph", "Create graph based on the coordination."]], "aim2dat.strct.ext_analysis.planes": [[102, 6, 1, 0, "calculate_planes", "Find planar arangements of atoms in the structure."]], "aim2dat.strct.ext_analysis.prdf": [[103, 6, 1, 0, "calculate_prdf", "Calculate the partial radial distribution function. The calculation is based on: doi:10.1103/PhysRevB.89.205118."]], "aim2dat.strct.ext_analysis.warren_cowley_order_parameters": [[104, 6, 1, 0, "calculate_warren_cowley_order_p", "Calculate Warren-Cowley like order parameters as defined in doi:10.1103/PhysRevB.96.024104."]], "aim2dat.strct.ext_manipulation": [[108, 6, 1, 0, "add_functional_group", "Add a functional group or an atom to a host site."], [105, 0, 0, 1, "add_functional_group", ""], [106, 0, 0, 1, "add_structure", ""], [108, 6, 1, 0, "add_structure_coord", "Add a functional group or an atom to a host site."], [108, 6, 1, 0, "add_structure_random", "Add structure at random position and orientation."], [107, 0, 0, 1, "decorator", ""]], "aim2dat.strct.ext_manipulation.add_functional_group": [[105, 6, 1, 0, "add_functional_group", "Add a functional group or an atom to a host site."]], "aim2dat.strct.ext_manipulation.add_structure": [[106, 6, 1, 0, "add_structure_coord", "Add a functional group or an atom to a host site."], [106, 6, 1, 0, "add_structure_random", "Add structure at random position and orientation."], [106, 7, 1, 0, "cwd", ""]], "aim2dat.strct.ext_manipulation.decorator": [[107, 6, 1, 0, "external_manipulation_method", "Decorate external manipulation methods."]], "aim2dat.strct.mixin": [[110, 1, 1, 0, "AnalysisMixin", "Mixin class to perform structural analysis tasks."], [110, 8, 1, 0, "ConstraintError", "Bases: Exception"], [110, 1, 1, 0, "ConstraintsMixin", "Mixin to implement structural constraints."], [110, 1, 1, 0, "ManipulationMixin", "Mixin class to perform structural manipulation tasks."], [110, 6, 1, 0, "analysis_method", "Mark function as calculation function."], [110, 6, 1, 0, "manipulates_structure", "Mark structure manipulating functions."]], "aim2dat.strct.mixin.AnalysisMixin": [[110, 3, 1, 0, "analysis_methods", "Return calculation methods."], [110, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [110, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [110, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [110, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [110, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [110, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [110, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [110, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."]], "aim2dat.strct.mixin.ConstraintError": [[110, 1, 1, 0, "args", ""], [110, 2, 1, 0, "with_traceback", "Exception.with_traceback(tb) -- set self.__traceback__ to tb and return self."]], "aim2dat.strct.mixin.ConstraintsMixin": [[110, 2, 1, 0, "add_chem_formula_constraint", "Add a chemical formula as a constraint."], [110, 3, 1, 0, "attribute_constraints", "Attribute constraints."], [110, 3, 1, 0, "chem_formula_constraints", "Constraints on the chemical formula."], [110, 3, 1, 0, "concentration_constraints", "Elemental concentration constraints."], [110, 3, 1, 0, "neglect_elemental_structures", "Whether to neglect elemental phases."], [110, 2, 1, 0, "remove_constraints", "Remove all constraints."], [110, 2, 1, 0, "set_attribute_constraint", "Set a constraint on attributes."], [110, 2, 1, 0, "set_concentration_constraint", "Set a constraint on the concentration of an element in the structure."]], "aim2dat.strct.mixin.ManipulationMixin": [[110, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [110, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [110, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [110, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [110, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."]], "aim2dat.strct.strct": [[112, 1, 1, 0, "Structure", "Bases: aim2dat.strct.mixin.AnalysisMixin, aim2dat.strct.mixin.ManipulationMixin"], [112, 7, 1, 0, "aiida", ""], [112, 6, 1, 0, "export_method", "Mark function as export function."], [112, 6, 1, 0, "import_method", "Mark function as import function."], [112, 7, 1, 0, "pymatgen", ""]], "aim2dat.strct.strct.Structure": [[112, 3, 1, 0, "analysis_methods", "Return calculation methods."], [112, 3, 1, 0, "attributes", "Return attributes."], [112, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [112, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [112, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [112, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [112, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [112, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [112, 3, 1, 0, "cell", "Return the cell of the structure."], [112, 3, 1, 0, "cell_angles", "Cell angles."], [112, 3, 1, 0, "cell_lengths", "cell lengths."], [112, 3, 1, 0, "cell_volume", "cell volume."], [112, 3, 1, 0, "chem_formula", "Return chemical formula."], [112, 2, 1, 0, "copy", "Return copy of Structure object."], [112, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [112, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [112, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."], [112, 3, 1, 0, "elements", "Return the elements of the structure."], [112, 3, 1, 0, "export_methods", "Return export methods."], [112, 3, 1, 0, "extras", "Return extras."], [112, 2, 1, 0, "from_aiida_structuredata", "Append structure from AiiDA structure node."], [112, 2, 1, 0, "from_ase_atoms", "Get structure from ase atoms object."], [112, 2, 1, 0, "from_file", "Get structure from file using the ase read-function."], [112, 2, 1, 0, "from_pymatgen_structure", "Get structure from pymatgen structure or molecule object."], [112, 3, 1, 0, "function_args", "Return function arguments for stored extras."], [112, 2, 1, 0, "get", "Get attribute by key and return default if not present."], [112, 2, 1, 0, "get_positions", "Return positions of atoms."], [112, 3, 1, 0, "import_methods", "Return import methods."], [112, 2, 1, 0, "iter_sites", "Iterate through the sites of the structure."], [112, 2, 1, 0, "keys", "Return property names to create the structure."], [112, 3, 1, 0, "kinds", "Kinds of the structure."], [112, 3, 1, 0, "label", "Return label of the structure (especially relevant in StructureCollection)."], [112, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [112, 3, 1, 0, "pbc", "Return the pbc of the structure."], [112, 2, 1, 0, "perform_analysis", "Perform structure analaysis using an external method."], [112, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [112, 3, 1, 0, "positions", "Return the cartesian positions of the structure."], [112, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [112, 3, 1, 0, "scaled_positions", "Return the scaled positions of the structure."], [112, 2, 1, 0, "set_attribute", "Set attribute."], [112, 2, 1, 0, "set_positions", "Set postions of atoms."], [112, 2, 1, 0, "set_site_attribute", "Set site attribute."], [112, 3, 1, 0, "site_attributes", "dict: Dictionary containing the label of a site attribute as key and a tuple/list of values having the same length as the Structure object itself (number of sites) containing site specific properties or attributes (e.g. charges, magnetic moments, forces, ...)."], [112, 3, 1, 0, "store_calculated_properties", "Store calculated properties to reuse them later."], [112, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."], [112, 2, 1, 0, "to_aiida_structuredata", "Create AiiDA structuredata."], [112, 2, 1, 0, "to_ase_atoms", "Create ase Atoms object."], [112, 2, 1, 0, "to_dict", "Export structure to python dictionary."], [112, 2, 1, 0, "to_file", "Export structure to file using the ase interface or certain file formats for Zeo++."], [112, 2, 1, 0, "to_pymatgen_structure", "Create pymatgen Structure (if cell is not None) or Molecule (if cell is None) object."]], "aim2dat.strct.strct_coordination": [[114, 6, 1, 0, "calculate_coordination", "Calculate the coordination of all sites."]], "aim2dat.strct.strct_io": [[115, 6, 1, 0, "get_structure_from_file", "Get function to read structure file."]], "aim2dat.strct.strct_manipulation": [[116, 7, 1, 0, "cwd", ""], [116, 6, 1, 0, "delete_atoms", "Delete atoms."], [116, 6, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [116, 6, 1, 0, "substitute_elements", "Substitute all atoms of the same element by another element."]], "aim2dat.strct.strct_misc": [[117, 6, 1, 0, "calculate_angle", "Calculate angle between three atomic positions."], [117, 6, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atomic positions."], [117, 6, 1, 0, "calculate_distance", "Calculate distance."]], "aim2dat.strct.strct_point_groups": [[118, 6, 1, 0, "determine_point_group", "Determine point group."]], "aim2dat.strct.strct_prdf": [[119, 6, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint."]], "aim2dat.strct.strct_space_groups": [[120, 6, 1, 0, "determine_space_group", "Determine space group."]], "aim2dat.strct.strct_super_cell": [[121, 6, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi tessellation."]], "aim2dat.strct.structure_collection": [[123, 1, 1, 0, "StructureCollection", "The StructureCollection class is a container for one or multiple atomic structures. It implements several import_* and append_* functions to add new data to the object."], [123, 7, 1, 0, "aiida", ""], [123, 7, 1, 0, "pymatgen", ""]], "aim2dat.strct.structure_collection.StructureCollection": [[123, 2, 1, 0, "append", "Append structure."], [123, 2, 1, 0, "append_from_aiida_structuredata", "Append structure from aiida structuredata."], [123, 2, 1, 0, "append_from_ase_atoms", "Append structure from ase atoms object."], [123, 2, 1, 0, "append_from_file", "Append structure from file using the ase read-function."], [123, 2, 1, 0, "append_from_pymatgen_structure", "Append structure from pymatgen structure or molecule object."], [123, 2, 1, 0, "append_structure", "Append Structure object to collection. The label of the structure needs to be either given via the structures's property or as keyword argument."], [123, 2, 1, 0, "copy", "Return copy of StructureCollection object."], [123, 2, 1, 0, "create_pandas_df", "Create a pandas data frame of the object."], [123, 2, 1, 0, "duplicate_structure", "Duplicate structure."], [123, 2, 1, 0, "get_all_attribute_keys", "Get all attribute keys."], [123, 2, 1, 0, "get_all_elements", "Get the element symbols of all structures."], [123, 2, 1, 0, "get_all_kinds", "Get the kind strings of all structures."], [123, 2, 1, 0, "get_all_structures", "Return a list of all structures."], [123, 2, 1, 0, "get_structure", "Get structure by key."], [123, 2, 1, 0, "import_from_aiida_db", "Import from the AiiDA database."], [123, 2, 1, 0, "import_from_hdf5_file", "Import from hdf5-file. Calculated extras are not yet supported."], [123, 2, 1, 0, "import_from_pandas_df", "Import from pandas data frame."], [123, 2, 1, 0, "index", "Return index of label. If the label is not present, None is returned."], [123, 2, 1, 0, "items", "Return a list of label, value tuples."], [123, 3, 1, 0, "labels", "Labels assigened to the structures."], [123, 2, 1, 0, "pop", "Pop structure."], [123, 2, 1, 0, "store_in_aiida_db", "Store structures into the AiiDA-database."], [123, 2, 1, 0, "store_in_hdf5_file", "Store structures in hdf5-file. Calculated extras are not yet supported."]], "aim2dat.strct.structure_importer": [[124, 1, 1, 0, "StructureImporter", "Bases: aim2dat.strct.mixin.ConstraintsMixin"]], "aim2dat.strct.structure_importer.StructureImporter": [[124, 2, 1, 0, "add_chem_formula_constraint", "Add a chemical formula as a constraint."], [124, 2, 1, 0, "append_from_mp_by_id", "Append structure via the database-id."], [124, 3, 1, 0, "attribute_constraints", "Attribute constraints."], [124, 3, 1, 0, "chem_formula_constraints", "Constraints on the chemical formula."], [124, 3, 1, 0, "concentration_constraints", "Elemental concentration constraints."], [124, 2, 1, 0, "generate_random_crystals", "Generate random crystals using the PyXtaL library."], [124, 2, 1, 0, "import_from_mp", "Import structures from the crystal database Materials Project using the pymatgen interface."], [124, 2, 1, 0, "import_from_optimade", "Import crystal structures using the optimade-API."], [124, 2, 1, 0, "import_from_oqmd", "Import from the open quantum materials database."], [124, 3, 1, 0, "neglect_elemental_structures", "Whether to neglect elemental phases."], [124, 2, 1, 0, "remove_constraints", "Remove all constraints."], [124, 2, 1, 0, "return_optimade_database_ids", "Return a list of all ids of online databases that provide a base-url."], [124, 2, 1, 0, "set_attribute_constraint", "Set a constraint on attributes."], [124, 2, 1, 0, "set_concentration_constraint", "Set a constraint on the concentration of an element in the structure."], [124, 3, 1, 0, "structures", "Return the internal StructureCollection object."]], "aim2dat.strct.structure_operations": [[125, 1, 1, 0, "StructureOperations", "Bases: aim2dat.strct.mixin.AnalysisMixin, aim2dat.strct.mixin.ManipulationMixin"], [125, 6, 1, 0, "compare_structures", "Parallelize structure comparison methods via this wrapper function."], [125, 6, 1, 0, "structure_wrapper", "Parallelize structure analysis and manipulation methods via this wrapper function."]], "aim2dat.strct.structure_operations.StructureOperations": [[125, 3, 1, 0, "analysis_methods", "Return calculation methods."], [125, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [125, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [125, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [125, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [125, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [125, 2, 1, 0, "calculate_stabilities", "Calculate the formation energies and stabilities of all structures."], [125, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [125, 3, 1, 0, "chunksize", "Number of tasks handed to each process at once."], [125, 2, 1, 0, "compare_sites_via_coordination", "Compare two atomic sites based on their coordination and the distances to their neighbour atoms."], [125, 2, 1, 0, "compare_sites_via_ffingerprint", "Calculate similarity of two atom sites."], [125, 2, 1, 0, "compare_structures_via_comp_sym", "Compare two structures merely based on the composition and space group."], [125, 2, 1, 0, "compare_structures_via_direct_comp", "Compare structures by comparing lattice vectors, angles and scaled positions."], [125, 2, 1, 0, "compare_structures_via_ffingerprint", "Calculate similarity of two structures."], [125, 2, 1, 0, "copy", "Return copy of StructureCollection object."], [125, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [125, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [125, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."], [125, 2, 1, 0, "find_duplicates_via_comp_sym", "Find duplicate structures coimparing the composition and space group."], [125, 2, 1, 0, "find_duplicates_via_direct_comp", "standardized structures.."], [125, 2, 1, 0, "find_duplicates_via_ffingerprint", "Find duplicate structures using the FFingerprint method."], [125, 2, 1, 0, "find_eq_sites_via_coordination", "Find equivalent sites by comparing the coordination of each site and its distance to the neighbour atoms."], [125, 2, 1, 0, "find_eq_sites_via_ffingerprint", "Find equivalent sites by comparing the F-Fingerprint of each site."], [125, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [125, 3, 1, 0, "n_procs", "Number of parallel processes."], [125, 3, 1, 0, "output_format", "Specify the output format of calculation methods. Supported options are 'dict' and 'DataFrame'."], [125, 2, 1, 0, "perform_analysis", "Perform structure analaysis using an external method."], [125, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [125, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [125, 3, 1, 0, "structures", "Return the internal StructureCollection object."], [125, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."], [125, 3, 1, 0, "supported_output_formats", "Return the supported output formats."], [125, 3, 1, 0, "verbose", "Print progress bar."]], "aim2dat.strct.surface": [[126, 1, 1, 0, "SurfaceGeneration", "Generates a surfaces and surface slabs based on a bulk crystal structure."]], "aim2dat.strct.surface.SurfaceGeneration": [[126, 2, 1, 0, "create_surface", "Create surface from a bulk crystal structure."], [126, 2, 1, 0, "generate_surface_slabs", "Generate surface slabs with all terminations for a certain direction given by its miller indices."], [126, 2, 1, 0, "store_surfaces_in_aiida_db", "Store surfaces into the AiiDA-database."], [126, 2, 1, 0, "to_aiida_surfacedata", "Create surface from a bulk crystal structure."]], "aim2dat.strct.surface_utils": [[127, 7, 1, 0, "SPACE_GROUP_HN_TO_LAYER_GROUP", ""]], "aim2dat.utils": [[128, 0, 0, 1, "chem_formula", ""], [129, 0, 0, 1, "dict_tools", ""], [130, 0, 0, 1, "element_properties", ""], [132, 0, 0, 1, "maths", ""], [133, 0, 0, 1, "print", ""], [134, 0, 0, 1, "space_groups", ""], [135, 0, 0, 1, "units", ""]], "aim2dat.utils.chem_formula": [[128, 6, 1, 0, "compare_formulas", "Check if two chemical formulas are identical."], [128, 6, 1, 0, "reduce_formula", "Try to find a reduced formula only having natural numbers as quantities"], [128, 6, 1, 0, "transform_dict_to_latexstr", "Create a string from a formula dictionary, fractional quantities are rounded."], [128, 6, 1, 0, "transform_dict_to_str", "Create a string from a formula dictionary, fractional quantities are rounded."], [128, 6, 1, 0, "transform_list_to_dict", "Convert a list of elements to a dictionary."], [128, 6, 1, 0, "transform_list_to_str", "Convert a list of elements to a dictionary."], [128, 6, 1, 0, "transform_str_to_dict", "Create a dictionary from a formula string. The function supports round, squared and curly brackets as well as recurring elements."]], "aim2dat.utils.dict_tools": [[129, 6, 1, 0, "dict_create_tree", "Create a nested dictionary."], [129, 6, 1, 0, "dict_merge", "Merge two dictionaries."], [129, 6, 1, 0, "dict_retrieve_parameter", "Retrieve value from nested dictionary."], [129, 6, 1, 0, "dict_set_parameter", "Set parameter in a nested dictionary."]], "aim2dat.utils.element_properties": [[130, 7, 1, "id0", "element_groups", ""], [130, 6, 1, 0, "get_atomic_mass", "Return atomic mass of the element from the atomic number, element symbol or name."], [130, 6, 1, 0, "get_atomic_number", "Return atomic number of the element from element symbol or name."], [130, 6, 1, 0, "get_atomic_radius", "Return the covalent or van der Waals radius of the element. The following sources are used for different radius types:"], [130, 6, 1, 0, "get_electronegativity", "Return the electronegativity of the element."], [130, 6, 1, 0, "get_element_groups", "Return groups that contain the element from the atomic number, element symbol or name."], [130, 6, 1, 0, "get_element_symbol", "Return symbol of the element from element number or name."], [130, 6, 1, 0, "get_group", "Return all elements in the group."]], "aim2dat.utils.maths": [[132, 6, 1, 0, "calc_angle", "Calculate the angle between two vectors."], [132, 6, 1, 0, "calc_circular_segment_area", "Calculate the circular segment."], [132, 6, 1, 0, "calc_plane_equation", "Calculate the plane from 3 given points in the form a*x + b*y + c*z = d."], [132, 6, 1, 0, "calc_polygon_area", "Calculate the area of a polygon."], [132, 6, 1, 0, "calc_reflection_matrix", "Calculate the 3d reflection matrix normal to the input vector."], [132, 6, 1, 0, "calc_solid_angle", "Calculate the solid angle between a center point and points that span a polyhedron."], [132, 6, 1, 0, "gaussian_function", "Calculate the Gaussian function with a certain sigma-value."]], "aim2dat.utils.print": [[133, 7, 1, 0, "MAX_STR_LENGTH", ""]], "aim2dat.utils.space_groups": [[134, 6, 1, 0, "get_crystal_system", "Return the crystal system of a space group given by a string or number."], [134, 6, 1, 0, "get_lattice_type", "Return the crystal system of a space group given by a string or number."], [134, 6, 1, 0, "get_space_group_details", "Return space group details from name or international number using spglib."], [134, 6, 1, 0, "transform_to_nr", "Parse the space group into the corresponding number (if necessary) using the ase library."], [134, 6, 1, 0, "transform_to_str", "Parse the space group from its number to the symbol using the ase library."]], "aim2dat.utils.units": [[135, 1, 1, 0, "Energy", "Bases: _BaseQuantity"], [135, 1, 1, 0, "Frequency", "Bases: _BaseQuantity"], [135, 1, 1, 0, "Length", "Bases: _BaseQuantity"], [135, 1, 1, 0, "UnitConverter", "Bases: _BaseUnitConverter"], [135, 1, 1, 0, "Wavevector", "Bases: _BaseQuantity"], [135, 7, 1, 0, "energy", ""], [135, 7, 1, 0, "frequency", ""], [135, 7, 1, 0, "length", ""], [135, 7, 1, 0, "wavevector", ""]], "aim2dat.utils.units.Energy": [[135, 3, 1, 0, "available_units", "List of all available units."], [135, 2, 1, 0, "get_unit", "Return the value of the unit."]], "aim2dat.utils.units.Frequency": [[135, 3, 1, 0, "available_units", "List of all available units."], [135, 2, 1, 0, "get_unit", "Return the value of the unit."]], "aim2dat.utils.units.Length": [[135, 3, 1, 0, "available_units", "List of all available units."], [135, 2, 1, 0, "get_unit", "Return the value of the unit."]], "aim2dat.utils.units.UnitConverter": [[135, 5, 1, 0, "available_units", ""], [135, 2, 1, 0, "convert_units", "Convert one unit into another."], [135, 5, 1, 0, "plot_labels", ""]], "aim2dat.utils.units.Wavevector": [[135, 3, 1, 0, "available_units", "List of all available units."], [135, 2, 1, 0, "get_unit", "Return the value of the unit."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:parameter", "5": "py:attribute", "6": "py:function", "7": "py:data", "8": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "function", "Python function"], "7": ["py", "data", "Python data"], "8": ["py", "exception", "Python exception"]}, "titleterms": {"aim2dat": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 156], "document": [0, 156], "aiida": [1, 40, 154, 170], "process": [1, 154], "chargemol": [1, 6, 7, 8], "cp2k": [1, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 66, 67, 68, 69, 140, 153], "critic2": [1, 30, 31, 32, 70, 145, 146], "enumlib": [1, 33, 34, 35, 36], "aiida_data": [2, 3, 4], "gaussian_cube_data": 2, "modul": [2, 4, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 43, 55, 57, 58, 59, 60, 61, 63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135], "content": [2, 4, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 43, 47, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135], "class": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 59, 60, 62, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 123, 124, 125, 126, 135, 139, 145, 146, 147, 154, 155, 162, 163, 164, 166], "properti": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 60, 62, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 123, 124, 125, 135, 142, 163], "method": [2, 4, 6, 8, 10, 11, 12, 13, 18, 19, 21, 22, 24, 25, 26, 27, 30, 32, 33, 34, 39, 58, 59, 60, 62, 79, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 112, 123, 124, 125, 126, 135, 168], "note": [2, 4, 6, 11, 30, 33, 163, 166, 167], "submodul": [3, 7, 23, 31, 35, 37, 47, 62, 67, 72, 80, 101, 108, 109, 131], "surface_data": 4, "aiida_workflow": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "_workflow_builder_util": 5, "calcjob": [6, 11, 30], "warn": [6, 10, 11, 12, 13, 18, 19, 21, 22, 25, 26, 27, 30, 33, 160], "parser": [8, 24, 32], "auxiliary_funct": 9, "function": [9, 20, 28, 29, 33, 36, 38, 43, 47, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 81, 82, 84, 85, 86, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 129, 130, 132, 134, 138, 139, 152], "band_structure_work_chain": 10, "attribut": [11, 13, 20, 24, 25, 26, 27, 28, 29, 39, 63, 106, 112, 116, 123, 130, 135], "cell_opt_work_chain": 12, "combined_work_chain": 13, "core_work_chain_handl": 14, "core_work_chain_input": 15, "core_work_chain_opt": 16, "core_work_chain_scf": 17, "cube_work_chain": 18, "eigenvalues_work_chain": 19, "el_properties_util": 20, "find_scf_p_work_chain": 21, "geo_opt_work_chain": 22, "partial_charges_work_chain": 25, "pdos_work_chain": 26, "planar_fields_work_chain": 27, "surface_opt_util": 28, "work_chain_spec": 29, "enum_calcjob": 33, "enum_pars": 34, "util": [36, 38, 75, 84, 128, 129, 130, 131, 132, 133, 134, 135], "workflow_build": 39, "paramt": 39, "ext_interfac": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "ase_atom": 41, "ase_surfac": 42, "dscribe": 43, "graph": [44, 100, 155], "hdf5": 45, "import_opt_depend": 46, "packag": [47, 62, 67, 86, 101, 108, 109, 148, 159, 168, 169], "mp": 48, "mp_openapi": 49, "optimad": 50, "oqmd": 51, "panda": 52, "phonopi": [53, 73, 142], "pymatgen": 54, "pyxtal": [55, 169], "seekpath": 56, "spglib": 57, "fct": [58, 59, 60, 61, 62, 63], "discret": [58, 138, 139], "fingerprint": [59, 151, 152], "function_comparison": 60, "hull": 61, "smear": 63, "subpackag": [64, 72, 109], "io": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "cif": 65, "bands_do": 66, "restart": 68, "stdout": 69, "fhi_aim": 71, "qe": 74, "xmgrace": 76, "yaml": 77, "zeo": 78, "ml": [79, 80, 81, 82, 83, 84, 160], "cell_grid_search": 79, "kernel": [81, 161], "metric": [82, 152, 161], "transform": [83, 160, 161], "plot": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 140, 141, 142, 143, 144, 145, 146, 147, 148, 162, 163, 164], "band_structure_do": 85, "partial_charg": 87, "partial_rdf": 88, "phase": 89, "planar_field": 90, "simple_plot": 91, "spectroscopi": 92, "surfac": [93, 126, 170], "thermal_properti": 94, "strct": [95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127], "brillouin_zone_2d": 95, "ext_analysi": [96, 97, 98, 99, 100, 101, 102, 103, 104], "decor": [96, 107], "dscribe_descriptor": 97, "ffprint_order_p": 98, "fragment": 99, "plane": [102, 146], "prdf": 103, "warren_cowley_order_paramet": 104, "ext_manipul": [105, 106, 107, 108], "add_functional_group": 105, "add_structur": 106, "mixin": 110, "stabil": 111, "strct_comparison": 113, "strct_coordin": 114, "strct_io": 115, "strct_manipul": 116, "strct_misc": 117, "strct_point_group": 118, "strct_prdf": 119, "strct_space_group": 120, "strct_super_cel": 121, "strct_valid": 122, "structure_collect": 123, "structure_import": 124, "structure_oper": 125, "surface_util": 127, "chem_formula": 128, "dict_tool": 129, "element_properti": 130, "math": 132, "print": 133, "space_group": 134, "unit": 135, "changelog": 136, "version": [136, 153], "0": 136, "2": 136, "1": 136, "exampl": [137, 152, 154, 162, 164, 166, 168, 169], "list": [137, 153, 156, 161, 162, 163], "creat": [138, 139, 170], "grid": [138, 139, 165], "analys": [138, 150], "axi": [138, 163], "merg": 138, "two": [138, 139], "object": [138, 168], "same": 138, "axis_typ": 138, "can": 138, "transpos": 138, "combin": [138, 153], "differ": [138, 149], "weight": 138, "compar": [139, 151, 166], "how": [139, 148], "appli": [139, 160], "fringerprint": 139, "an": 139, "instanc": [139, 154, 155, 164, 166, 168, 169], "functiondiscretizationfingerprint": 139, "band": [140, 141, 142, 143, 144], "structur": [140, 141, 142, 143, 144, 150, 151, 161, 166, 167, 168, 169], "project": [140, 141, 142, 143, 144, 150], "densiti": [140, 141, 142, 143, 144], "state": [140, 141, 142, 143, 144, 155], "pdo": [140, 141, 142, 143, 144], "from": [140, 141, 142, 143, 144, 145, 146, 150, 160, 170], "output": [140, 141, 142, 143, 145, 146], "file": [140, 141, 142, 143, 145, 146], "The": [140, 141, 142, 143, 153, 155, 166], "fhi": 141, "aim": 141, "thermal": 142, "quantum": [143, 150], "espresso": 143, "materi": [144, 150], "atom": [145, 149], "partial": 145, "charg": 145, "read": 145, "initi": [145, 150, 160, 168], "import": [145, 146, 152, 164], "data": [145, 146, 148, 160, 164], "planar": 146, "field": 146, "calcul": [146, 149, 151, 153], "vector": 146, "pars": 146, "planarfieldplot": 146, "us": [147, 148, 153, 155], "simpleplot": [147, 164], "flexibl": 147, "framework": 147, "x": 148, "rai": 148, "absorpt": 148, "spectrum": 148, "singl": 148, "each": 148, "set": [148, 155, 160, 163, 164, 165], "multipl": [148, 166], "dataset": [148, 150, 152], "one": 148, "subplot": [148, 165], "peak": 148, "detect": 148, "smoothen": 148, "coordin": 149, "number": 149, "site": 149, "queri": 150, "pool": 150, "c": [150, 158], "te": 150, "binari": 150, "system": [150, 157, 158], "crystal": [150, 151, 168, 169, 170], "open": 150, "databas": [150, 169], "exploit": 150, "chemic": 150, "similar": 150, "increas": 150, "f": 151, "analysi": [152, 166, 167, 168], "support": [152, 153, 163], "comparison": 152, "relat": [152, 154, 155, 162, 164, 166, 168, 169], "run": 153, "high": [153, 154, 170], "throughput": [153, 154, 170], "core": 153, "work": 153, "chain": 153, "exit": 153, "code": 153, "all": [153, 162, 163], "statu": 153, "messag": 153, "workflow": [154, 155, 170], "builder": [154, 155], "api": [154, 155, 164, 166, 168, 169], "handl": [155, 166], "complex": 155, "protocol": 155, "up": [155, 160], "input": [155, 170], "paramet": 155, "parent": 155, "node": 155, "check": 155, "execut": 155, "task": 155, "visual": 155, "proven": 155, "multipleworkflowbuild": 155, "store": 155, "load": 155, "featur": [156, 160, 163], "contribut": 156, "linux": 157, "oper": [157, 158], "window": 158, "microsoft": 158, "build": 158, "tool": 158, "anaconda": 158, "virtual": 158, "environ": 158, "overview": [159, 171], "depend": 159, "machin": 160, "learn": [160, 161], "split": 160, "train": 160, "test": 160, "extract": 160, "model": 160, "perform": 160, "new": 160, "unknown": 160, "scikit": 161, "integr": [161, 170], "custom": [161, 163], "common": 163, "automat": 163, "backend": 163, "assign": 165, "spec": 165, "valu": 165, "onc": 166, "structurecollect": 166, "manipul": [166, 168], "via": 166, "structureoper": 166, "represent": 168, "molecul": 168, "interfac": [168, 169], "other": 168, "extern": 168, "onlin": 169, "random": 169, "gener": 169, "ad": 169, "constraint": 169, "bulk": 170}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"aim2dat Documentation": [[0, "aim2dat-documentation"], [156, "aim2dat-documentation"]], "AiiDA Processes": [[1, "aiida-processes"]], "chargemol": [[1, "chargemol"]], "CP2K": [[1, "cp2k"]], "critic2": [[1, "critic2"]], "enumlib": [[1, "enumlib"]], "aim2dat.aiida_data.gaussian_cube_data": [[2, "module-aim2dat.aiida_data.gaussian_cube_data"]], "Module Contents": [[2, "module-contents"], [4, "module-contents"], [6, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [36, "module-contents"], [38, "module-contents"], [39, "module-contents"], [43, "module-contents"], [55, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [63, "module-contents"], [65, "module-contents"], [66, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [110, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"]], "Classes": [[2, "classes"], [4, "classes"], [6, "classes"], [8, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [13, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [30, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [39, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [62, "classes"], [79, "classes"], [83, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [109, "classes"], [110, "classes"], [112, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [135, "classes"]], "Properties": [[2, "id1"], [4, "id1"], [6, "id2"], [8, "id1"], [10, "id2"], [11, "id2"], [12, "id2"], [13, "id2"], [13, "id5"], [18, "id2"], [19, "id2"], [21, "id2"], [22, "id2"], [24, "id1"], [24, "id3"], [24, "id5"], [25, "id2"], [26, "id2"], [27, "id2"], [30, "id2"], [32, "id1"], [33, "id2"], [34, "id1"], [39, "id2"], [39, "id4"], [58, "id1"], [58, "id3"], [60, "id1"], [62, "id1"], [62, "id3"], [62, "id5"], [83, "id1"], [83, "id3"], [83, "id5"], [83, "id7"], [83, "id9"], [83, "id11"], [83, "id13"], [83, "id15"], [83, "id17"], [83, "id19"], [85, "id1"], [85, "id3"], [85, "id5"], [86, "id1"], [86, "id3"], [86, "id5"], [86, "id7"], [86, "id9"], [86, "id11"], [86, "id13"], [86, "id15"], [86, "id17"], [86, "id19"], [87, "id1"], [88, "id1"], [89, "id1"], [90, "id1"], [91, "id1"], [92, "id1"], [93, "id1"], [94, "id1"], [94, "id3"], [109, "id1"], [109, "id3"], [109, "id5"], [110, "id2"], [110, "id4"], [110, "id6"], [112, "id1"], [123, "id1"], [124, "id1"], [125, "id1"], [135, "id1"], [135, "id3"], [135, "id5"], [135, "id8"]], "Methods": [[2, "id2"], [4, "id2"], [6, "id1"], [6, "id3"], [8, "id2"], [10, "id1"], [10, "id3"], [11, "id1"], [11, "id3"], [12, "id1"], [12, "id3"], [13, "id1"], [13, "id3"], [13, "id4"], [13, "id6"], [18, "id1"], [18, "id3"], [19, "id1"], [19, "id3"], [21, "id1"], [21, "id3"], [22, "id1"], [22, "id3"], [24, "id2"], [24, "id4"], [24, "id6"], [25, "id1"], [25, "id3"], [26, "id1"], [26, "id3"], [27, "id1"], [27, "id3"], [30, "id1"], [30, "id3"], [32, "id2"], [33, "id1"], [33, "id3"], [34, "id2"], [39, "id1"], [39, "id3"], [39, "id5"], [58, "id2"], [58, "id4"], [59, "id1"], [60, "id2"], [62, "id2"], [62, "id4"], [62, "id6"], [62, "id7"], [79, "id1"], [83, "id2"], [83, "id4"], [83, "id6"], [83, "id8"], [83, "id10"], [83, "id12"], [83, "id14"], [83, "id16"], [83, "id18"], [83, "id20"], [85, "id2"], [85, "id4"], [85, "id6"], [86, "id2"], [86, "id4"], [86, "id6"], [86, "id8"], [86, "id10"], [86, "id12"], [86, "id14"], [86, "id16"], [86, "id18"], [86, "id20"], [87, "id2"], [88, "id2"], [89, "id2"], [90, "id2"], [91, "id2"], [92, "id2"], [93, "id2"], [94, "id2"], [94, "id4"], [109, "id2"], [109, "id4"], [109, "id6"], [109, "id7"], [110, "id1"], [110, "id3"], [110, "id5"], [110, "id7"], [112, "id2"], [123, "id2"], [124, "id2"], [125, "id2"], [126, "id1"], [135, "id2"], [135, "id4"], [135, "id6"], [135, "id7"], [135, "id9"]], "Note": [[2, null], [2, null], [4, null], [4, null], [6, null], [11, null], [30, null], [33, null], [163, null], [166, null], [167, null]], "aim2dat.aiida_data": [[3, "module-aim2dat.aiida_data"]], "Submodules": [[3, "submodules"], [7, "submodules"], [23, "submodules"], [31, "submodules"], [35, "submodules"], [37, "submodules"], [47, "submodules"], [62, "submodules"], [67, "submodules"], [72, "submodules"], [80, "submodules"], [101, "submodules"], [108, "submodules"], [109, "submodules"], [131, "submodules"]], "aim2dat.aiida_data.surface_data": [[4, "module-aim2dat.aiida_data.surface_data"]], "aim2dat.aiida_workflows._workflow_builder_utils": [[5, "module-aim2dat.aiida_workflows._workflow_builder_utils"]], "aim2dat.aiida_workflows.chargemol.calcjobs": [[6, "module-aim2dat.aiida_workflows.chargemol.calcjobs"]], "Warning": [[6, null], [10, null], [11, null], [12, null], [13, null], [13, null], [18, null], [19, null], [21, null], [22, null], [25, null], [26, null], [27, null], [30, null], [33, null], [160, null]], "aim2dat.aiida_workflows.chargemol": [[7, "module-aim2dat.aiida_workflows.chargemol"]], "aim2dat.aiida_workflows.chargemol.parsers": [[8, "module-aim2dat.aiida_workflows.chargemol.parsers"]], "aim2dat.aiida_workflows.cp2k.auxiliary_functions": [[9, "module-aim2dat.aiida_workflows.cp2k.auxiliary_functions"]], "Functions": [[9, "functions"], [20, "functions"], [28, "functions"], [29, "functions"], [33, "functions"], [36, "functions"], [38, "functions"], [43, "functions"], [47, "functions"], [58, "functions"], [61, "functions"], [63, "functions"], [65, "functions"], [66, "functions"], [67, "functions"], [68, "functions"], [69, "functions"], [70, "functions"], [71, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [76, "functions"], [77, "functions"], [78, "functions"], [81, "functions"], [82, "functions"], [84, "functions"], [85, "functions"], [86, "functions"], [89, "functions"], [92, "functions"], [96, "functions"], [97, "functions"], [98, "functions"], [99, "functions"], [100, "functions"], [101, "functions"], [102, "functions"], [103, "functions"], [104, "functions"], [105, "functions"], [106, "functions"], [107, "functions"], [108, "functions"], [110, "functions"], [112, "functions"], [114, "functions"], [115, "functions"], [116, "functions"], [117, "functions"], [118, "functions"], [119, "functions"], [120, "functions"], [121, "functions"], [125, "functions"], [128, "functions"], [129, "functions"], [130, "functions"], [132, "functions"], [134, "functions"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain": [[10, "module-aim2dat.aiida_workflows.cp2k.band_structure_work_chain"]], "aim2dat.aiida_workflows.cp2k.calcjobs": [[11, "module-aim2dat.aiida_workflows.cp2k.calcjobs"]], "Attributes": [[11, "attributes"], [13, "attributes"], [20, "attributes"], [24, "attributes"], [25, "attributes"], [26, "attributes"], [27, "attributes"], [28, "attributes"], [29, "attributes"], [39, "attributes"], [63, "attributes"], [106, "attributes"], [112, "attributes"], [116, "attributes"], [123, "attributes"], [130, "attributes"], [135, "attributes"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain": [[12, "module-aim2dat.aiida_workflows.cp2k.cell_opt_work_chain"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains": [[13, "module-aim2dat.aiida_workflows.cp2k.combined_work_chains"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_handlers": [[14, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_handlers"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs": [[15, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_inputs"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_opt": [[16, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_opt"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_scf": [[17, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_scf"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain": [[18, "module-aim2dat.aiida_workflows.cp2k.cube_work_chain"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain": [[19, "module-aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain"]], "aim2dat.aiida_workflows.cp2k.el_properties_utils": [[20, "module-aim2dat.aiida_workflows.cp2k.el_properties_utils"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain": [[21, "module-aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain": [[22, "module-aim2dat.aiida_workflows.cp2k.geo_opt_work_chain"]], "aim2dat.aiida_workflows.cp2k": [[23, "module-aim2dat.aiida_workflows.cp2k"]], "aim2dat.aiida_workflows.cp2k.parsers": [[24, "module-aim2dat.aiida_workflows.cp2k.parsers"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain": [[25, "module-aim2dat.aiida_workflows.cp2k.partial_charges_work_chain"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain": [[26, "module-aim2dat.aiida_workflows.cp2k.pdos_work_chain"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain": [[27, "module-aim2dat.aiida_workflows.cp2k.planar_fields_work_chain"]], "aim2dat.aiida_workflows.cp2k.surface_opt_utils": [[28, "module-aim2dat.aiida_workflows.cp2k.surface_opt_utils"]], "aim2dat.aiida_workflows.cp2k.work_chain_specs": [[29, "module-aim2dat.aiida_workflows.cp2k.work_chain_specs"]], "aim2dat.aiida_workflows.critic2.calcjobs": [[30, "module-aim2dat.aiida_workflows.critic2.calcjobs"]], "aim2dat.aiida_workflows.critic2": [[31, "module-aim2dat.aiida_workflows.critic2"]], "aim2dat.aiida_workflows.critic2.parsers": [[32, "module-aim2dat.aiida_workflows.critic2.parsers"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob": [[33, "module-aim2dat.aiida_workflows.enumlib.enum_calcjob"]], "aim2dat.aiida_workflows.enumlib.enum_parsers": [[34, "module-aim2dat.aiida_workflows.enumlib.enum_parsers"]], "aim2dat.aiida_workflows.enumlib": [[35, "module-aim2dat.aiida_workflows.enumlib"]], "aim2dat.aiida_workflows.enumlib.utils": [[36, "module-aim2dat.aiida_workflows.enumlib.utils"]], "aim2dat.aiida_workflows": [[37, "module-aim2dat.aiida_workflows"]], "aim2dat.aiida_workflows.utils": [[38, "module-aim2dat.aiida_workflows.utils"]], "aim2dat.aiida_workflows.workflow_builder": [[39, "module-aim2dat.aiida_workflows.workflow_builder"]], "Paramters": [[39, "paramters"]], "aim2dat.ext_interfaces.aiida": [[40, "module-aim2dat.ext_interfaces.aiida"]], "aim2dat.ext_interfaces.ase_atoms": [[41, "module-aim2dat.ext_interfaces.ase_atoms"]], "aim2dat.ext_interfaces.ase_surface": [[42, "module-aim2dat.ext_interfaces.ase_surface"]], "aim2dat.ext_interfaces.dscribe": [[43, "module-aim2dat.ext_interfaces.dscribe"]], "aim2dat.ext_interfaces.graphs": [[44, "module-aim2dat.ext_interfaces.graphs"]], "aim2dat.ext_interfaces.hdf5": [[45, "module-aim2dat.ext_interfaces.hdf5"]], "aim2dat.ext_interfaces.import_opt_dependencies": [[46, "module-aim2dat.ext_interfaces.import_opt_dependencies"]], "aim2dat.ext_interfaces": [[47, "module-aim2dat.ext_interfaces"]], "Package Contents": [[47, "package-contents"], [62, "package-contents"], [67, "package-contents"], [86, "package-contents"], [101, "package-contents"], [108, "package-contents"], [109, "package-contents"]], "aim2dat.ext_interfaces.mp": [[48, "module-aim2dat.ext_interfaces.mp"]], "aim2dat.ext_interfaces.mp_openapi": [[49, "module-aim2dat.ext_interfaces.mp_openapi"]], "aim2dat.ext_interfaces.optimade": [[50, "module-aim2dat.ext_interfaces.optimade"]], "aim2dat.ext_interfaces.oqmd": [[51, "module-aim2dat.ext_interfaces.oqmd"]], "aim2dat.ext_interfaces.pandas": [[52, "module-aim2dat.ext_interfaces.pandas"]], "aim2dat.ext_interfaces.phonopy": [[53, "module-aim2dat.ext_interfaces.phonopy"]], "aim2dat.ext_interfaces.pymatgen": [[54, "module-aim2dat.ext_interfaces.pymatgen"]], "aim2dat.ext_interfaces.pyxtal": [[55, "module-aim2dat.ext_interfaces.pyxtal"]], "aim2dat.ext_interfaces.seekpath": [[56, "module-aim2dat.ext_interfaces.seekpath"]], "aim2dat.ext_interfaces.spglib": [[57, "module-aim2dat.ext_interfaces.spglib"]], "aim2dat.fct.discretization": [[58, "module-aim2dat.fct.discretization"]], "aim2dat.fct.fingerprint": [[59, "module-aim2dat.fct.fingerprint"]], "aim2dat.fct.function_comparison": [[60, "module-aim2dat.fct.function_comparison"]], "aim2dat.fct.hull": [[61, "module-aim2dat.fct.hull"]], "aim2dat.fct": [[62, "module-aim2dat.fct"]], "aim2dat.fct.smearing": [[63, "module-aim2dat.fct.smearing"]], "aim2dat": [[64, "module-aim2dat"]], "Subpackages": [[64, "subpackages"], [72, "subpackages"], [109, "subpackages"]], "aim2dat.io.cif": [[65, "module-aim2dat.io.cif"]], "aim2dat.io.cp2k.bands_dos": [[66, "module-aim2dat.io.cp2k.bands_dos"]], "aim2dat.io.cp2k": [[67, "module-aim2dat.io.cp2k"]], "aim2dat.io.cp2k.restart": [[68, "module-aim2dat.io.cp2k.restart"]], "aim2dat.io.cp2k.stdout": [[69, "module-aim2dat.io.cp2k.stdout"]], "aim2dat.io.critic2": [[70, "module-aim2dat.io.critic2"]], "aim2dat.io.fhi_aims": [[71, "module-aim2dat.io.fhi_aims"]], "aim2dat.io": [[72, "module-aim2dat.io"]], "aim2dat.io.phonopy": [[73, "module-aim2dat.io.phonopy"]], "aim2dat.io.qe": [[74, "module-aim2dat.io.qe"]], "aim2dat.io.utils": [[75, "module-aim2dat.io.utils"]], "aim2dat.io.xmgrace": [[76, "module-aim2dat.io.xmgrace"]], "aim2dat.io.yaml": [[77, "module-aim2dat.io.yaml"]], "aim2dat.io.zeo": [[78, "module-aim2dat.io.zeo"]], "aim2dat.ml.cell_grid_search": [[79, "module-aim2dat.ml.cell_grid_search"]], "aim2dat.ml": [[80, "module-aim2dat.ml"]], "aim2dat.ml.kernels": [[81, "module-aim2dat.ml.kernels"]], "aim2dat.ml.metrics": [[82, "module-aim2dat.ml.metrics"]], "aim2dat.ml.transformers": [[83, "module-aim2dat.ml.transformers"]], "aim2dat.ml.utils": [[84, "module-aim2dat.ml.utils"]], "aim2dat.plots.band_structure_dos": [[85, "module-aim2dat.plots.band_structure_dos"]], "aim2dat.plots": [[86, "module-aim2dat.plots"]], "aim2dat.plots.partial_charges": [[87, "module-aim2dat.plots.partial_charges"]], "aim2dat.plots.partial_rdf": [[88, "module-aim2dat.plots.partial_rdf"]], "aim2dat.plots.phase": [[89, "module-aim2dat.plots.phase"]], "aim2dat.plots.planar_fields": [[90, "module-aim2dat.plots.planar_fields"]], "aim2dat.plots.simple_plot": [[91, "module-aim2dat.plots.simple_plot"]], "aim2dat.plots.spectroscopy": [[92, "module-aim2dat.plots.spectroscopy"]], "aim2dat.plots.surface": [[93, "module-aim2dat.plots.surface"]], "aim2dat.plots.thermal_properties": [[94, "module-aim2dat.plots.thermal_properties"]], "aim2dat.strct.brillouin_zone_2d": [[95, "module-aim2dat.strct.brillouin_zone_2d"]], "aim2dat.strct.ext_analysis.decorator": [[96, "module-aim2dat.strct.ext_analysis.decorator"]], "aim2dat.strct.ext_analysis.dscribe_descriptors": [[97, "module-aim2dat.strct.ext_analysis.dscribe_descriptors"]], "aim2dat.strct.ext_analysis.ffprint_order_p": [[98, "module-aim2dat.strct.ext_analysis.ffprint_order_p"]], "aim2dat.strct.ext_analysis.fragmentation": [[99, "module-aim2dat.strct.ext_analysis.fragmentation"]], "aim2dat.strct.ext_analysis.graphs": [[100, "module-aim2dat.strct.ext_analysis.graphs"]], "aim2dat.strct.ext_analysis": [[101, "module-aim2dat.strct.ext_analysis"]], "aim2dat.strct.ext_analysis.planes": [[102, "module-aim2dat.strct.ext_analysis.planes"]], "aim2dat.strct.ext_analysis.prdf": [[103, "module-aim2dat.strct.ext_analysis.prdf"]], "aim2dat.strct.ext_analysis.warren_cowley_order_parameters": [[104, "module-aim2dat.strct.ext_analysis.warren_cowley_order_parameters"]], "aim2dat.strct.ext_manipulation.add_functional_group": [[105, "module-aim2dat.strct.ext_manipulation.add_functional_group"]], "aim2dat.strct.ext_manipulation.add_structure": [[106, "module-aim2dat.strct.ext_manipulation.add_structure"]], "aim2dat.strct.ext_manipulation.decorator": [[107, "module-aim2dat.strct.ext_manipulation.decorator"]], "aim2dat.strct.ext_manipulation": [[108, "module-aim2dat.strct.ext_manipulation"]], "aim2dat.strct": [[109, "module-aim2dat.strct"]], "aim2dat.strct.mixin": [[110, "module-aim2dat.strct.mixin"]], "aim2dat.strct.stability": [[111, "module-aim2dat.strct.stability"]], "aim2dat.strct.strct": [[112, "module-aim2dat.strct.strct"]], "aim2dat.strct.strct_comparison": [[113, "module-aim2dat.strct.strct_comparison"]], "aim2dat.strct.strct_coordination": [[114, "module-aim2dat.strct.strct_coordination"]], "aim2dat.strct.strct_io": [[115, "module-aim2dat.strct.strct_io"]], "aim2dat.strct.strct_manipulation": [[116, "module-aim2dat.strct.strct_manipulation"]], "aim2dat.strct.strct_misc": [[117, "module-aim2dat.strct.strct_misc"]], "aim2dat.strct.strct_point_groups": [[118, "module-aim2dat.strct.strct_point_groups"]], "aim2dat.strct.strct_prdf": [[119, "module-aim2dat.strct.strct_prdf"]], "aim2dat.strct.strct_space_groups": [[120, "module-aim2dat.strct.strct_space_groups"]], "aim2dat.strct.strct_super_cell": [[121, "module-aim2dat.strct.strct_super_cell"]], "aim2dat.strct.strct_validation": [[122, "module-aim2dat.strct.strct_validation"]], "aim2dat.strct.structure_collection": [[123, "module-aim2dat.strct.structure_collection"]], "aim2dat.strct.structure_importer": [[124, "module-aim2dat.strct.structure_importer"]], "aim2dat.strct.structure_operations": [[125, "module-aim2dat.strct.structure_operations"]], "aim2dat.strct.surface": [[126, "module-aim2dat.strct.surface"]], "aim2dat.strct.surface_utils": [[127, "module-aim2dat.strct.surface_utils"]], "aim2dat.utils.chem_formula": [[128, "module-aim2dat.utils.chem_formula"]], "aim2dat.utils.dict_tools": [[129, "module-aim2dat.utils.dict_tools"]], "aim2dat.utils.element_properties": [[130, "module-aim2dat.utils.element_properties"]], "aim2dat.utils": [[131, "module-aim2dat.utils"]], "aim2dat.utils.maths": [[132, "module-aim2dat.utils.maths"]], "aim2dat.utils.print": [[133, "module-aim2dat.utils.print"]], "aim2dat.utils.space_groups": [[134, "module-aim2dat.utils.space_groups"]], "aim2dat.utils.units": [[135, "module-aim2dat.utils.units"]], "Changelog": [[136, "changelog"]], "Version 0.2.0": [[136, "version-0-2-0"]], "Version 0.1.0": [[136, "version-0-1-0"]], "Example List": [[137, "example-list"]], "Creating a discretized grid to analyse functions": [[138, "Creating-a-discretized-grid-to-analyse-functions"]], "Create a discretized axis": [[138, "Create-a-discretized-axis"]], "Merge two objects with the same axis_type": [[138, "Merge-two-objects-with-the-same-axis_type"]], "Axis can be transposed": [[138, "Axis-can-be-transposed"]], "Combine two objects with different axis_type to a grid": [[138, "Combine-two-objects-with-different-axis_type-to-a-grid"]], "Weighted grid": [[138, "Weighted-grid"]], "Comparing two functions on a discretized grid": [[139, "Comparing-two-functions-on-a-discretized-grid"]], "How to create a grid": [[139, "How-to-create-a-grid"]], "Apply the fringerprint": [[139, "Apply-the-fringerprint"]], "Create an instance of the FunctionDiscretizationFingerprint class": [[139, "Create-an-instance-of-the-FunctionDiscretizationFingerprint-class"]], "Plotting the band structure and projected density of states (pDOS) from CP2K output-files": [[140, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-CP2K-output-files"]], "The band structure plot": [[140, "The-band-structure-plot"], [141, "The-band-structure-plot"], [142, "The-band-structure-plot"], [143, "The-band-structure-plot"]], "The projected density of states plot": [[140, "The-projected-density-of-states-plot"], [141, "The-projected-density-of-states-plot"], [142, "The-projected-density-of-states-plot"], [143, "The-projected-density-of-states-plot"]], "Band structure + projected density of states plot": [[140, "Band-structure-+-projected-density-of-states-plot"], [141, "Band-structure-+-projected-density-of-states-plot"], [142, "Band-structure-+-projected-density-of-states-plot"], [143, "Band-structure-+-projected-density-of-states-plot"]], "Plotting the band structure and projected density of states (pDOS) from FHI-aims output files": [[141, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-FHI-aims-output-files"]], "Plotting the band structure, projected density of states (pDOS) and thermal properties from phonopy output-files": [[142, "Plotting-the-band-structure,-projected-density-of-states-(pDOS)-and-thermal-properties-from-phonopy-output-files"]], "Plotting the band structure and projected density of states (pDOS) from Quantum ESPRESSO output-files": [[143, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-Quantum-ESPRESSO-output-files"]], "Plotting the band structure and projected density of states (pDOS) from Materials Project": [[144, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-Materials-Project"]], "Plotting atomic partial charges from Critic2 output-files": [[145, "Plotting-atomic-partial-charges-from-Critic2-output-files"]], "Reading the output files": [[145, "Reading-the-output-files"]], "Initialize the plot class": [[145, "Initialize-the-plot-class"]], "Importing data into class": [[145, "Importing-data-into-class"]], "Plotting data": [[145, "Plotting-data"]], "Plotting planar fields from Critic2 output files": [[146, "Plotting-planar-fields-from-Critic2-output-files"]], "Calculating the plane vectors": [[146, "Calculating-the-plane-vectors"]], "Parsing and importing the critic2 field data into the PlanarFieldPlot class": [[146, "Parsing-and-importing-the-critic2-field-data-into-the-PlanarFieldPlot-class"]], "Plotting the field": [[146, "Plotting-the-field"]], "Using the SimplePlot class as a flexible plotting framework": [[147, "Using-the-SimplePlot-class-as-a-flexible-plotting-framework"]], "How to use the plots package to plot a x-ray absorption spectrum": [[148, "How-to-use-the-plots-package-to-plot-a-x-ray-absorption-spectrum"]], "Single plot for each data set": [[148, "Single-plot-for-each-data-set"]], "Multiple datasets in one plot": [[148, "Multiple-datasets-in-one-plot"]], "Plot each dataset in a single subplot": [[148, "Plot-each-dataset-in-a-single-subplot"]], "Peak detection": [[148, "Peak-detection"]], "Smoothening the spectrum": [[148, "Smoothening-the-spectrum"]], "Calculating the coordination numbers for different atomic sites": [[149, "Calculating-the-coordination-numbers-for-different-atomic-sites"]], "Querying the structure pool for the Cs-Te binary system": [[150, "Querying-the-structure-pool-for-the-Cs-Te-binary-system"]], "Querying crystals from Materials Project and Open Quantum Materials Database": [[150, "Querying-crystals-from-Materials-Project-and-Open-Quantum-Materials-Database"]], "Analysing the initial dataset": [[150, "Analysing-the-initial-dataset"]], "Exploiting chemical similarity to increase the structure pool": [[150, "Exploiting-chemical-similarity-to-increase-the-structure-pool"]], "Calculating the F-Fingerprint to compare crystal structures": [[151, "Calculating-the-F-Fingerprint-to-compare-crystal-structures"]], "Function Analysis": [[152, "Function-Analysis"]], "Importing datasets": [[152, "Importing-datasets"]], "Supported comparison metrics": [[152, "Supported-comparison-metrics"]], "Comparison fingerprint": [[152, "Comparison-fingerprint"]], "Related examples": [[152, "Related-examples"], [154, "related-examples"], [162, "related-examples"], [164, "Related-examples"], [166, "Related-examples"], [168, "Related-examples"], [169, "Related-examples"]], "Running high-throughput calculations using CP2K": [[153, "Running-high-throughput-calculations-using-CP2K"]], "Supported CP2K versions": [[153, "Supported-CP2K-versions"]], "The core work chains": [[153, "The-core-work-chains"]], "The combined work chains": [[153, "The-combined-work-chains"]], "Exit-codes": [[153, "Exit-codes"]], "List of all exit status messages:": [[153, "List-of-all-exit-status-messages:"]], "High-throughput Workflows": [[154, "high-throughput-workflows"]], "AiiDA processes": [[154, "aiida-processes"]], "Workflow builder classes": [[154, "workflow-builder-classes"]], "Related API instances": [[154, "related-api-instances"], [155, "Related-API-instances"], [164, "Related-API-instances"], [166, "Related-API-instances"], [168, "Related-API-instances"], [169, "Related-API-instances"]], "Handling complex workflows using the workflow builders": [[155, "Handling-complex-workflows-using-the-workflow-builders"]], "The workflow protocol": [[155, "The-workflow-protocol"]], "Setting up the input parameters and parent node": [[155, "Setting-up-the-input-parameters-and-parent-node"]], "Checking the workflow state": [[155, "Checking-the-workflow-state"]], "Executing workflow tasks": [[155, "Executing-workflow-tasks"]], "Visualizing the provenance graph of the workflow": [[155, "Visualizing-the-provenance-graph-of-the-workflow"]], "The MultipleWorkflowBuilder class": [[155, "The-MultipleWorkflowBuilder-class"]], "Storing and loading workflows": [[155, "Storing-and-loading-workflows"]], "Feature List": [[156, "feature-list"]], "Contributing": [[156, "contributing"]], "Linux operating systems": [[157, "linux-operating-systems"]], "Windows operating systems": [[158, "windows-operating-systems"]], "Microsoft C++ Build Tools": [[158, "microsoft-c-build-tools"]], "Anaconda & Virtual Environment": [[158, "anaconda-virtual-environment"]], "Overview and Package Dependencies": [[159, "overview-and-package-dependencies"]], "Package Dependencies": [[159, "package-dependencies"]], "Machine Learning": [[160, "Machine-Learning"]], "Splitting up the initial data set into a training and test set": [[160, "Splitting-up-the-initial-data-set-into-a-training-and-test-set"]], "Extracting features from data sets": [[160, "Extracting-features-from-data-sets"]], "Transforming data, model training and performance testing": [[160, "Transforming-data,-model-training-and-performance-testing"]], "Applying the ML model on new unknown data": [[160, "Applying-the-ML-model-on-new-unknown-data"]], "Scikit-learn integration": [[161, "scikit-learn-integration"]], "List of structure transformers": [[161, "list-of-structure-transformers"]], "List of custom metrics and kernels": [[161, "list-of-custom-metrics-and-kernels"]], "Plots": [[162, "plots"]], "List of all plot classes": [[162, "list-of-all-plot-classes"]], "Common features": [[163, "Common-features"]], "Automatic axis settings": [[163, "Automatic-axis-settings"]], "Plot customizations": [[163, "Plot-customizations"]], "Supported plot backends": [[163, "Supported-plot-backends"]], "List of all class properties": [[163, "List-of-all-class-properties"]], "Plotting with the SimplePlot class": [[164, "Plotting-with-the-SimplePlot-class"]], "Importing data sets": [[164, "Importing-data-sets"]], "Plotting data sets": [[164, "Plotting-data-sets"]], "Subplots and grids": [[165, "Subplots-and-grids"]], "Subplot assignment": [[165, "Subplot-assignment"]], "Setting grid spec values": [[165, "Setting-grid-spec-values"]], "Handling multiple structures at once": [[166, "Handling-multiple-structures-at-once"]], "The StructureCollection class": [[166, "The-StructureCollection-class"]], "Analysis and manipulation of multiple structures via the StructureOperations class": [[166, "Analysis-and-manipulation-of-multiple-structures-via-the-StructureOperations-class"]], "Comparing structures via the StructureOperations class": [[166, "Comparing-structures-via-the-StructureOperations-class"]], "Structural Analysis": [[167, "structural-analysis"]], "Representation of molecules and crystals": [[168, "Representation-of-molecules-and-crystals"]], "Initialization of the object": [[168, "Initialization-of-the-object"]], "Interface to other packages": [[168, "Interface-to-other-packages"]], "Structural analysis methods": [[168, "Structural-analysis-methods"]], "Manipulating structures": [[168, "Manipulating-structures"]], "External analysis and manipulation methods": [[168, "External-analysis-and-manipulation-methods"]], "Interfaces to online databases and random crystal generation": [[169, "Interfaces-to-online-databases-and-random-crystal-generation"]], "Adding constraints": [[169, "Adding-constraints"]], "Generating random crystal structure interfacing the PyXtaL package": [[169, "Generating-random-crystal-structure-interfacing-the-PyXtaL-package"]], "Creating surfaces from bulk crystals": [[170, "Creating-surfaces-from-bulk-crystals"]], "Surfaces as input to high-throughput workflows and AiiDA integration": [[170, "Surfaces-as-input-to-high-throughput-workflows-and-AiiDA-integration"]], "Overview": [[171, "overview"]]}, "indexentries": {"collection() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.Collection"], [2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.collection"]], "gaussiancubedata (class in aim2dat.aiida_data.gaussian_cube_data)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData"]], "aim2dat.aiida_data.gaussian_cube_data": [[2, "module-aim2dat.aiida_data.gaussian_cube_data"]], "atomic_charges (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.atomic_charges"]], "atomic_numbers (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.atomic_numbers"]], "atomic_positions (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.atomic_positions"]], "backend (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.backend"]], "backend_entity (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.backend_entity"]], "base() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.base"]], "cell (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.cell"]], "class_node_type() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.class_node_type"]], "clone() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.clone"]], "comment (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.comment"]], "computer (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.computer"]], "convert() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.convert"]], "creator (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.creator"]], "ctime (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.ctime"]], "description (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.description"]], "dset_ids (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.dset_ids"]], "entry_point() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.entry_point"]], "export() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.export"]], "get() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get"]], "get_collection() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_collection"]], "get_content() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_content"]], "get_cube_data() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_cube_data"]], "get_description() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_description"]], "get_export_formats() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_export_formats"]], "get_structure() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_structure"]], "id (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.id"]], "importfile() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importfile"]], "importstring() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importstring"]], "initialize() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.initialize"]], "is_stored (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.is_stored"]], "is_valid_cache (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.is_valid_cache"]], "label (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.label"]], "logger (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.logger"]], "module": [[2, "module-aim2dat.aiida_data.gaussian_cube_data"], [3, "module-aim2dat.aiida_data"], [4, "module-aim2dat.aiida_data.surface_data"], [5, "module-aim2dat.aiida_workflows._workflow_builder_utils"], [6, "module-aim2dat.aiida_workflows.chargemol.calcjobs"], [7, "module-aim2dat.aiida_workflows.chargemol"], [8, "module-aim2dat.aiida_workflows.chargemol.parsers"], [9, "module-aim2dat.aiida_workflows.cp2k.auxiliary_functions"], [10, "module-aim2dat.aiida_workflows.cp2k.band_structure_work_chain"], [11, "module-aim2dat.aiida_workflows.cp2k.calcjobs"], [12, "module-aim2dat.aiida_workflows.cp2k.cell_opt_work_chain"], [13, "module-aim2dat.aiida_workflows.cp2k.combined_work_chains"], [14, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_handlers"], [15, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_inputs"], [16, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_opt"], [17, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_scf"], [18, "module-aim2dat.aiida_workflows.cp2k.cube_work_chain"], [19, "module-aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain"], [20, "module-aim2dat.aiida_workflows.cp2k.el_properties_utils"], [21, "module-aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain"], [22, "module-aim2dat.aiida_workflows.cp2k.geo_opt_work_chain"], [23, "module-aim2dat.aiida_workflows.cp2k"], [24, "module-aim2dat.aiida_workflows.cp2k.parsers"], [25, "module-aim2dat.aiida_workflows.cp2k.partial_charges_work_chain"], [26, "module-aim2dat.aiida_workflows.cp2k.pdos_work_chain"], [27, "module-aim2dat.aiida_workflows.cp2k.planar_fields_work_chain"], [28, "module-aim2dat.aiida_workflows.cp2k.surface_opt_utils"], [29, "module-aim2dat.aiida_workflows.cp2k.work_chain_specs"], [30, "module-aim2dat.aiida_workflows.critic2.calcjobs"], [31, "module-aim2dat.aiida_workflows.critic2"], [32, "module-aim2dat.aiida_workflows.critic2.parsers"], [33, "module-aim2dat.aiida_workflows.enumlib.enum_calcjob"], [34, "module-aim2dat.aiida_workflows.enumlib.enum_parsers"], [35, "module-aim2dat.aiida_workflows.enumlib"], [36, "module-aim2dat.aiida_workflows.enumlib.utils"], [37, "module-aim2dat.aiida_workflows"], [38, "module-aim2dat.aiida_workflows.utils"], [39, "module-aim2dat.aiida_workflows.workflow_builder"], [40, "module-aim2dat.ext_interfaces.aiida"], [41, "module-aim2dat.ext_interfaces.ase_atoms"], [42, "module-aim2dat.ext_interfaces.ase_surface"], [43, "module-aim2dat.ext_interfaces.dscribe"], [44, "module-aim2dat.ext_interfaces.graphs"], [45, "module-aim2dat.ext_interfaces.hdf5"], [46, "module-aim2dat.ext_interfaces.import_opt_dependencies"], [47, "module-aim2dat.ext_interfaces"], [48, "module-aim2dat.ext_interfaces.mp"], [49, "module-aim2dat.ext_interfaces.mp_openapi"], [50, "module-aim2dat.ext_interfaces.optimade"], [51, "module-aim2dat.ext_interfaces.oqmd"], [52, "module-aim2dat.ext_interfaces.pandas"], [53, "module-aim2dat.ext_interfaces.phonopy"], [54, "module-aim2dat.ext_interfaces.pymatgen"], [55, "module-aim2dat.ext_interfaces.pyxtal"], [56, "module-aim2dat.ext_interfaces.seekpath"], [57, "module-aim2dat.ext_interfaces.spglib"], [58, "module-aim2dat.fct.discretization"], [59, "module-aim2dat.fct.fingerprint"], [60, "module-aim2dat.fct.function_comparison"], [61, "module-aim2dat.fct.hull"], [62, "module-aim2dat.fct"], [63, "module-aim2dat.fct.smearing"], [64, "module-aim2dat"], [65, "module-aim2dat.io.cif"], [66, "module-aim2dat.io.cp2k.bands_dos"], [67, "module-aim2dat.io.cp2k"], [68, "module-aim2dat.io.cp2k.restart"], [69, "module-aim2dat.io.cp2k.stdout"], [70, "module-aim2dat.io.critic2"], [71, "module-aim2dat.io.fhi_aims"], [72, "module-aim2dat.io"], [73, "module-aim2dat.io.phonopy"], [74, "module-aim2dat.io.qe"], [75, "module-aim2dat.io.utils"], [76, "module-aim2dat.io.xmgrace"], [77, "module-aim2dat.io.yaml"], [78, "module-aim2dat.io.zeo"], [79, "module-aim2dat.ml.cell_grid_search"], [80, "module-aim2dat.ml"], [81, "module-aim2dat.ml.kernels"], [82, "module-aim2dat.ml.metrics"], [83, "module-aim2dat.ml.transformers"], [84, "module-aim2dat.ml.utils"], [85, "module-aim2dat.plots.band_structure_dos"], [86, "module-aim2dat.plots"], [87, "module-aim2dat.plots.partial_charges"], [88, "module-aim2dat.plots.partial_rdf"], [89, "module-aim2dat.plots.phase"], [90, "module-aim2dat.plots.planar_fields"], [91, "module-aim2dat.plots.simple_plot"], [92, "module-aim2dat.plots.spectroscopy"], [93, "module-aim2dat.plots.surface"], [94, "module-aim2dat.plots.thermal_properties"], [95, "module-aim2dat.strct.brillouin_zone_2d"], [96, "module-aim2dat.strct.ext_analysis.decorator"], [97, "module-aim2dat.strct.ext_analysis.dscribe_descriptors"], [98, "module-aim2dat.strct.ext_analysis.ffprint_order_p"], [99, "module-aim2dat.strct.ext_analysis.fragmentation"], [100, "module-aim2dat.strct.ext_analysis.graphs"], [101, "module-aim2dat.strct.ext_analysis"], [102, "module-aim2dat.strct.ext_analysis.planes"], [103, "module-aim2dat.strct.ext_analysis.prdf"], [104, "module-aim2dat.strct.ext_analysis.warren_cowley_order_parameters"], [105, "module-aim2dat.strct.ext_manipulation.add_functional_group"], [106, "module-aim2dat.strct.ext_manipulation.add_structure"], [107, "module-aim2dat.strct.ext_manipulation.decorator"], [108, "module-aim2dat.strct.ext_manipulation"], [109, "module-aim2dat.strct"], [110, "module-aim2dat.strct.mixin"], [111, "module-aim2dat.strct.stability"], [112, "module-aim2dat.strct.strct"], [113, "module-aim2dat.strct.strct_comparison"], [114, "module-aim2dat.strct.strct_coordination"], [115, "module-aim2dat.strct.strct_io"], [116, "module-aim2dat.strct.strct_manipulation"], [117, "module-aim2dat.strct.strct_misc"], [118, "module-aim2dat.strct.strct_point_groups"], [119, "module-aim2dat.strct.strct_prdf"], [120, "module-aim2dat.strct.strct_space_groups"], [121, "module-aim2dat.strct.strct_super_cell"], [122, "module-aim2dat.strct.strct_validation"], [123, "module-aim2dat.strct.structure_collection"], [124, "module-aim2dat.strct.structure_importer"], [125, "module-aim2dat.strct.structure_operations"], [126, "module-aim2dat.strct.surface"], [127, "module-aim2dat.strct.surface_utils"], [128, "module-aim2dat.utils.chem_formula"], [129, "module-aim2dat.utils.dict_tools"], [130, "module-aim2dat.utils.element_properties"], [131, "module-aim2dat.utils"], [132, "module-aim2dat.utils.maths"], [133, "module-aim2dat.utils.print"], [134, "module-aim2dat.utils.space_groups"], [135, "module-aim2dat.utils.units"]], "mtime (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.mtime"]], "node_type (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.node_type"]], "objects() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.objects"]], "open_cube() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.open_cube"]], "origin (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.origin"]], "pk (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.pk"]], "process_type (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.process_type"]], "set_from_file() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.set_from_file"]], "set_source() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.set_source"]], "shape (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.shape"]], "source (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.source"]], "store() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.store"]], "store_all() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.store_all"]], "title (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.title"]], "user (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.user"]], "uuid (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[2, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.uuid"]], "aim2dat.aiida_data": [[3, "module-aim2dat.aiida_data"]], "collection() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.Collection"], [4, "aim2dat.aiida_data.surface_data.SurfaceData.collection"]], "surfacedata (class in aim2dat.aiida_data.surface_data)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData"]], "aim2dat.aiida_data.surface_data": [[4, "module-aim2dat.aiida_data.surface_data"]], "aperiodic_dir (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.aperiodic_dir"]], "backend (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.backend"]], "backend_entity (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.backend_entity"]], "base() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.base"]], "bottom_terminating_structure (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.bottom_terminating_structure"]], "class_node_type() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.class_node_type"]], "clone() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.clone"]], "computer (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.computer"]], "convert() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.convert"]], "creator (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.creator"]], "ctime (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.ctime"]], "description (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.description"]], "entry_point() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.entry_point"]], "export() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.export"]], "get() (aim2dat.aiida_data.surface_data.surfacedata class method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.get"]], "get_collection() (aim2dat.aiida_data.surface_data.surfacedata class method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.get_collection"]], "get_description() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.get_description"]], "get_export_formats() (aim2dat.aiida_data.surface_data.surfacedata class method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.get_export_formats"]], "id (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.id"]], "importfile() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.importfile"]], "importstring() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.importstring"]], "initialize() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.initialize"]], "is_stored (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.is_stored"]], "is_valid_cache (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.is_valid_cache"]], "label (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.label"]], "logger (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.logger"]], "miller_indices (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.miller_indices"]], "mtime (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.mtime"]], "node_type (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.node_type"]], "objects() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.objects"]], "pk (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.pk"]], "process_type (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.process_type"]], "repeating_structure (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.repeating_structure"]], "set_bottom_terminating_structure() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.set_bottom_terminating_structure"]], "set_repeating_structure() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.set_repeating_structure"]], "set_source() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.set_source"]], "set_top_terminating_structure() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.set_top_terminating_structure"]], "set_top_terminating_structure_nsym() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.set_top_terminating_structure_nsym"]], "source (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.source"]], "store() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.store"]], "store_all() (aim2dat.aiida_data.surface_data.surfacedata method)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.store_all"]], "surface_area (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.surface_area"]], "termination (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.termination"]], "top_terminating_structure (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.top_terminating_structure"]], "top_terminating_structure_nsym (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.top_terminating_structure_nsym"]], "user (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.user"]], "uuid (aim2dat.aiida_data.surface_data.surfacedata property)": [[4, "aim2dat.aiida_data.surface_data.SurfaceData.uuid"]], "aim2dat.aiida_workflows._workflow_builder_utils": [[5, "module-aim2dat.aiida_workflows._workflow_builder_utils"]], "calc_id (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation.savekeys attribute)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys.CALC_ID"]], "chargemolcalculation (class in aim2dat.aiida_workflows.chargemol.calcjobs)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation"]], "chargemolcalculation.savekeys (class in aim2dat.aiida_workflows.chargemol.calcjobs)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation attribute)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.chargemol.calcjobs": [[6, "module-aim2dat.aiida_workflows.chargemol.calcjobs"]], "build_process_type() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.init"]], "inputs (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation attribute)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.metadata"]], "name() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation.savekeys method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.node"]], "on_create() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_terminated"]], "options (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.options"]], "out() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out"]], "out_many() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out_many"]], "parse() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.presubmit"]], "report() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.report"]], "run() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.run"]], "runner (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.set_status"]], "spec() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.spec_options"]], "submit() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.submit"]], "terminate() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation static method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.uuid"]], "value() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation.savekeys method)": [[6, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys.value"]], "aim2dat.aiida_workflows.chargemol": [[7, "module-aim2dat.aiida_workflows.chargemol"]], "chargemolparser (class in aim2dat.aiida_workflows.chargemol.parsers)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser"]], "aim2dat.aiida_workflows.chargemol.parsers": [[8, "module-aim2dat.aiida_workflows.chargemol.parsers"]], "exit_codes (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.exit_codes"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser method)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.logger"]], "node (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.node"]], "out() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser method)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.out"]], "outputs (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.outputs"]], "parse() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser method)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser class method)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.parse_from_node"]], "retrieved (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[8, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.retrieved"]], "aim2dat.aiida_workflows.cp2k.auxiliary_functions": [[9, "module-aim2dat.aiida_workflows.cp2k.auxiliary_functions"]], "calc_nr_explicit_electrons() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.calc_nr_explicit_electrons"]], "calculate_added_mos() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.calculate_added_mos"]], "create_aiida_node() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.create_aiida_node"]], "estimate_comp_resources() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.estimate_comp_resources"]], "return_rec_space_eigenvalues() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_rec_space_eigenvalues"]], "return_runtime_stats() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_runtime_stats"]], "return_scf_parameters() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_scf_parameters"]], "return_work_chain_info() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_work_chain_info"]], "set_xc_functional() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[9, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.set_xc_functional"]], "bandstructureworkchain (class in aim2dat.aiida_workflows.cp2k.band_structure_work_chain)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain"]], "bandstructureworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.band_structure_work_chain)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys"]], "calc_id (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain.savekeys attribute)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys.CALC_ID"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain attribute)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain": [[10, "module-aim2dat.aiida_workflows.cp2k.band_structure_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain.savekeys method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain.savekeys method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[10, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.wc_specific_post_processing"]], "bandsdata (in module aim2dat.aiida_workflows.cp2k.calcjobs)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.BandsData"]], "calc_id (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation.savekeys attribute)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys.CALC_ID"]], "cp2kcalculation (class in aim2dat.aiida_workflows.cp2k.calcjobs)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation"]], "cp2kcalculation.savekeys (class in aim2dat.aiida_workflows.cp2k.calcjobs)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation attribute)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SINGLE_OUTPUT_LINKNAME"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.calcjobs)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.StructureData"]], "xydata (in module aim2dat.aiida_workflows.cp2k.calcjobs)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.XyData"]], "aim2dat.aiida_workflows.cp2k.calcjobs": [[11, "module-aim2dat.aiida_workflows.cp2k.calcjobs"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.init"]], "inputs (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation attribute)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation.savekeys method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_terminated"]], "options (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.options"]], "out() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out_many"]], "parse() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.presubmit"]], "report() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.report"]], "run() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.run"]], "runner (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.set_status"]], "spec() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.spec_options"]], "submit() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.submit"]], "terminate() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation static method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation.savekeys method)": [[11, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys.value"]], "calc_id (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain.savekeys attribute)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys.CALC_ID"]], "celloptworkchain (class in aim2dat.aiida_workflows.cp2k.cell_opt_work_chain)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain"]], "celloptworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.cell_opt_work_chain)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain attribute)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain": [[12, "module-aim2dat.aiida_workflows.cp2k.cell_opt_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.init"]], "initialize_opt_parameters() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.initialize_opt_parameters"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain.savekeys method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_wait"]], "opt_post_processing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.opt_post_processing"]], "out() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.report"]], "resubmit_unconverged_geometry() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.resubmit_unconverged_geometry"]], "resubmit_unfinished_calculation() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.resubmit_unfinished_calculation"]], "results() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.save_instance_state"]], "set_additional_optimization_p() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.set_additional_optimization_p"]], "set_status() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain.savekeys method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.wc_specific_post_processing"]], "bandstructurewc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.BandStructureWC"]], "calc_id (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain.savekeys attribute)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys.CALC_ID"]], "calc_id (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain.savekeys attribute)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys.CALC_ID"]], "celloptwc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.CellOptWC"]], "cp2kcalculation (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.Cp2kCalculation"]], "eigenvalueswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.EigenvaluesWC"]], "electronicpropertiesworkchain (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain"]], "electronicpropertiesworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys"]], "findscfparameterswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.FindSCFParametersWC"]], "geooptwc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.GeoOptWC"]], "pdoswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.PDOSWC"]], "partialchargeswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.PartialChargesWC"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain attribute)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SINGLE_OUTPUT_LINKNAME"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain attribute)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SINGLE_OUTPUT_LINKNAME"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.StructureData"]], "surfacedata (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceData"]], "surfaceoptworkchain (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain"]], "surfaceoptworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains": [[13, "module-aim2dat.aiida_workflows.cp2k.combined_work_chains"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.build_process_type"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.build_process_type"]], "ctx (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.ctx"]], "ctx (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.decode_input_args"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.define"]], "define() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.define"]], "dft_cell_opt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.dft_cell_opt"]], "electronic_structure() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.electronic_structure"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.encode_input_args"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exit_codes"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_inputs"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_outputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_outputs"]], "find_scf_p() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.find_scf_p"]], "find_scf_parameters() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.find_scf_parameters"]], "geo_opt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.geo_opt"]], "geo_preopt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.geo_preopt"]], "get_builder() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_builder"]], "get_builder() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_exit_statuses"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_or_create_db_record"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_parent_calc"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_provenance_inputs_iterator"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.init"]], "init() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.init"]], "inputs (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.inputs"]], "inputs (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.inputs"]], "inspect_find_scf_p_results() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.inspect_find_scf_p_results"]], "inspect_geo_opt_results() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.inspect_geo_opt_results"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.is_valid_cache"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.kill"]], "kill() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.load_instance_state"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.metadata"]], "metadata (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain.savekeys method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys.name"]], "name() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain.savekeys method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.node"]], "node (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_create"]], "on_create() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_entered"]], "on_entered() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_except"]], "on_except() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_exiting"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_finish"]], "on_finish() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_output_emitting"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_paused"]], "on_paused() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_playing"]], "on_playing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_run"]], "on_run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_terminated"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_wait"]], "on_wait() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out"]], "out() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out_many"]], "out_many() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.post_processing"]], "post_processing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.post_processing"]], "report() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.report"]], "report() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.report"]], "run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.run"]], "run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.run"]], "run_el_prop_wc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.run_el_prop_wc"]], "runner (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.runner"]], "runner (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.save_instance_state"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.save_instance_state"]], "set_input_parameter() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain static method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.set_input_parameter"]], "set_status() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.set_status"]], "set_status() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.setup"]], "setup() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.setup"]], "should_run_add_calc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.should_run_add_calc"]], "should_run_cell_opt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.should_run_cell_opt"]], "should_run_slab_conv() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.should_run_slab_conv"]], "spec() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.spec"]], "spec() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.spec_metadata"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.submit"]], "submit() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.submit"]], "to_context() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.to_context"]], "to_context() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.update_outputs"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.uuid"]], "uuid (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain.savekeys method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys.value"]], "value() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain.savekeys method)": [[13, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys.value"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_handlers": [[14, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_handlers"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs": [[15, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_inputs"]], "cwd (in module aim2dat.aiida_workflows.cp2k.core_work_chain_inputs)": [[15, "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs.cwd"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_opt": [[16, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_opt"]], "cwd (in module aim2dat.aiida_workflows.cp2k.core_work_chain_opt)": [[16, "aim2dat.aiida_workflows.cp2k.core_work_chain_opt.cwd"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_scf": [[17, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_scf"]], "cwd (in module aim2dat.aiida_workflows.cp2k.core_work_chain_scf)": [[17, "aim2dat.aiida_workflows.cp2k.core_work_chain_scf.cwd"]], "calc_id (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain.savekeys attribute)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys.CALC_ID"]], "cubeworkchain (class in aim2dat.aiida_workflows.cp2k.cube_work_chain)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain"]], "cubeworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.cube_work_chain)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain attribute)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain": [[18, "module-aim2dat.aiida_workflows.cp2k.cube_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain.savekeys method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain.savekeys method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain.savekeys attribute)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys.CALC_ID"]], "eigenvaluesworkchain (class in aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain"]], "eigenvaluesworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain attribute)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain": [[19, "module-aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain.savekeys method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain.savekeys method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[19, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.wc_specific_post_processing"]], "aim2dat.aiida_workflows.cp2k.el_properties_utils": [[20, "module-aim2dat.aiida_workflows.cp2k.el_properties_utils"]], "cwd (in module aim2dat.aiida_workflows.cp2k.el_properties_utils)": [[20, "aim2dat.aiida_workflows.cp2k.el_properties_utils.cwd"]], "elprop_setup() (in module aim2dat.aiida_workflows.cp2k.el_properties_utils)": [[20, "aim2dat.aiida_workflows.cp2k.el_properties_utils.elprop_setup"]], "set_ctx_parameters_from_protocol() (in module aim2dat.aiida_workflows.cp2k.el_properties_utils)": [[20, "aim2dat.aiida_workflows.cp2k.el_properties_utils.set_ctx_parameters_from_protocol"]], "calc_id (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain.savekeys attribute)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys.CALC_ID"]], "findscfparametersworkchain (class in aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain"]], "findscfparametersworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain attribute)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain": [[21, "module-aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain.savekeys method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain.savekeys method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain.savekeys attribute)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys.CALC_ID"]], "geooptworkchain (class in aim2dat.aiida_workflows.cp2k.geo_opt_work_chain)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain"]], "geooptworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.geo_opt_work_chain)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain attribute)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain": [[22, "module-aim2dat.aiida_workflows.cp2k.geo_opt_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.init"]], "initialize_opt_parameters() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.initialize_opt_parameters"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain.savekeys method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_wait"]], "opt_post_processing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.opt_post_processing"]], "out() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.report"]], "resubmit_unconverged_geometry() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.resubmit_unconverged_geometry"]], "resubmit_unfinished_calculation() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.resubmit_unfinished_calculation"]], "results() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.save_instance_state"]], "set_additional_optimization_p() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.set_additional_optimization_p"]], "set_status() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain.savekeys method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[22, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.wc_specific_post_processing"]], "aim2dat.aiida_workflows.cp2k": [[23, "module-aim2dat.aiida_workflows.cp2k"]], "bandsdata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.BandsData"]], "cp2kpartialchargesparser (class in aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser"]], "cp2kstandardparser (class in aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser"]], "cp2ktrajectoryparser (class in aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser"]], "gcubedata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.GCubeData"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.StructureData"]], "xydata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.XyData"]], "aim2dat.aiida_workflows.cp2k.parsers": [[24, "module-aim2dat.aiida_workflows.cp2k.parsers"]], "exit_codes (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.exit_codes"]], "exit_codes (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.exit_codes"]], "exit_codes (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.exit_codes"]], "extra_output_functions (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser attribute)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.extra_output_functions"]], "extra_output_functions (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser attribute)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.extra_output_functions"]], "extra_output_functions (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser attribute)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.extra_output_functions"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.get_outputs_for_parsing"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.get_outputs_for_parsing"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.logger"]], "logger (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.logger"]], "logger (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.logger"]], "node (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.node"]], "node (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.node"]], "node (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.node"]], "out() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.out"]], "out() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.out"]], "out() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.out"]], "outputs (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.outputs"]], "outputs (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.outputs"]], "outputs (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.outputs"]], "parse() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse"]], "parse() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse"]], "parse() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser class method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse_from_node"]], "parse_from_node() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser class method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse_from_node"]], "parse_from_node() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser class method)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse_from_node"]], "parser_type (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser attribute)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parser_type"]], "parser_type (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser attribute)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parser_type"]], "parser_type (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser attribute)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parser_type"]], "retrieved (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.retrieved"]], "retrieved (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.retrieved"]], "retrieved (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[24, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.retrieved"]], "calc_id (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain.savekeys attribute)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys.CALC_ID"]], "chargemolcalculation (in module aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.ChargemolCalculation"]], "critic2calculation (in module aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.Critic2Calculation"]], "partialchargesworkchain (class in aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain"]], "partialchargesworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain attribute)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain": [[25, "module-aim2dat.aiida_workflows.cp2k.partial_charges_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain.savekeys method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup"]], "setup_external_partial_charge_analysis() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup_external_partial_charge_analysis"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain.savekeys method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain.savekeys attribute)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys.CALC_ID"]], "pdosworkchain (class in aim2dat.aiida_workflows.cp2k.pdos_work_chain)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain"]], "pdosworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.pdos_work_chain)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain attribute)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SINGLE_OUTPUT_LINKNAME"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.pdos_work_chain)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.StructureData"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain": [[26, "module-aim2dat.aiida_workflows.cp2k.pdos_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain.savekeys method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain.savekeys method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain.savekeys attribute)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys.CALC_ID"]], "critic2calculation (in module aim2dat.aiida_workflows.cp2k.planar_fields_work_chain)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.Critic2Calculation"]], "planarfieldsworkchain (class in aim2dat.aiida_workflows.cp2k.planar_fields_work_chain)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain"]], "planarfieldsworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.planar_fields_work_chain)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain attribute)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain": [[27, "module-aim2dat.aiida_workflows.cp2k.planar_fields_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain.savekeys method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup"]], "setup_critic2_calculation() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup_critic2_calculation"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain.savekeys method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[27, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.wc_specific_post_processing"]], "aim2dat.aiida_workflows.cp2k.surface_opt_utils": [[28, "module-aim2dat.aiida_workflows.cp2k.surface_opt_utils"]], "create_surface_slab (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[28, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.create_surface_slab"]], "surfopt_setup() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[28, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.surfopt_setup"]], "surfopt_should_run_add_calc() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[28, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.surfopt_should_run_add_calc"]], "surfopt_should_run_slab_conv() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[28, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.surfopt_should_run_slab_conv"]], "update_surf_slab() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[28, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.update_surf_slab"]], "cp2kcalculation (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[29, "aim2dat.aiida_workflows.cp2k.work_chain_specs.Cp2kCalculation"]], "aim2dat.aiida_workflows.cp2k.work_chain_specs": [[29, "module-aim2dat.aiida_workflows.cp2k.work_chain_specs"]], "core_work_chain_exit_codes() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[29, "aim2dat.aiida_workflows.cp2k.work_chain_specs.core_work_chain_exit_codes"]], "numerical_p_specs() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[29, "aim2dat.aiida_workflows.cp2k.work_chain_specs.numerical_p_specs"]], "seekpath_p_specs() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[29, "aim2dat.aiida_workflows.cp2k.work_chain_specs.seekpath_p_specs"]], "structural_p_specs() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[29, "aim2dat.aiida_workflows.cp2k.work_chain_specs.structural_p_specs"]], "calc_id (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation.savekeys attribute)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys.CALC_ID"]], "critic2calculation (class in aim2dat.aiida_workflows.critic2.calcjobs)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation"]], "critic2calculation.savekeys (class in aim2dat.aiida_workflows.critic2.calcjobs)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation attribute)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.critic2.calcjobs": [[30, "module-aim2dat.aiida_workflows.critic2.calcjobs"]], "build_process_type() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.init"]], "inputs (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation attribute)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.metadata"]], "name() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation.savekeys method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.node"]], "on_create() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_terminated"]], "options (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.options"]], "out() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out"]], "out_many() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out_many"]], "parse() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.presubmit"]], "report() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.report"]], "run() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.run"]], "runner (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.set_status"]], "spec() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.spec_options"]], "submit() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.submit"]], "terminate() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation static method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.uuid"]], "value() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation.savekeys method)": [[30, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys.value"]], "aim2dat.aiida_workflows.critic2": [[31, "module-aim2dat.aiida_workflows.critic2"]], "critic2parser (class in aim2dat.aiida_workflows.critic2.parsers)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser"]], "aim2dat.aiida_workflows.critic2.parsers": [[32, "module-aim2dat.aiida_workflows.critic2.parsers"]], "exit_codes (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.exit_codes"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.critic2.parsers.critic2parser method)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.logger"]], "node (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.node"]], "out() (aim2dat.aiida_workflows.critic2.parsers.critic2parser method)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.out"]], "outputs (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.outputs"]], "parse() (aim2dat.aiida_workflows.critic2.parsers.critic2parser method)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.critic2.parsers.critic2parser class method)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.parse_from_node"]], "retrieved (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[32, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.retrieved"]], "calc_id (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation.savekeys attribute)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys.CALC_ID"]], "enumlibcalculation (class in aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation"]], "enumlibcalculation.savekeys (class in aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation attribute)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob": [[33, "module-aim2dat.aiida_workflows.enumlib.enum_calcjob"]], "build_process_type() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.init"]], "inputs (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation attribute)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.metadata"]], "name() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation.savekeys method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.node"]], "on_create() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_terminated"]], "options (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.options"]], "out() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out"]], "out_many() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out_many"]], "parse() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.presubmit"]], "report() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.report"]], "run() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.run"]], "runner (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.set_status"]], "spec() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.spec_options"]], "submit() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.submit"]], "terminate() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation static method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.uuid"]], "validate_elements_to_enumerate() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_elements_to_enumerate"]], "validate_inputs() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_inputs"]], "validate_makestr_path() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_makeStr_path"]], "validate_sites_to_enumerate() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_sites_to_enumerate"]], "validate_structure() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_structure"]], "value() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation.savekeys method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys.value"]], "enumlibparser (class in aim2dat.aiida_workflows.enumlib.enum_parsers)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser"]], "aim2dat.aiida_workflows.enumlib.enum_parsers": [[34, "module-aim2dat.aiida_workflows.enumlib.enum_parsers"]], "exit_codes (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.exit_codes"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser method)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.logger"]], "node (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.node"]], "out() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser method)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.out"]], "outputs (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.outputs"]], "parse() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser method)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser class method)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.parse_from_node"]], "retrieved (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[34, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.retrieved"]], "aim2dat.aiida_workflows.enumlib": [[35, "module-aim2dat.aiida_workflows.enumlib"]], "aim2dat.aiida_workflows.enumlib.utils": [[36, "module-aim2dat.aiida_workflows.enumlib.utils"]], "check_kinds() (in module aim2dat.aiida_workflows.enumlib.utils)": [[36, "aim2dat.aiida_workflows.enumlib.utils.check_kinds"]], "get_kindnames() (in module aim2dat.aiida_workflows.enumlib.utils)": [[36, "aim2dat.aiida_workflows.enumlib.utils.get_kindnames"]], "aim2dat.aiida_workflows": [[37, "module-aim2dat.aiida_workflows"]], "aim2dat.aiida_workflows.utils": [[38, "module-aim2dat.aiida_workflows.utils"]], "concatenate_workflow_results() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.concatenate_workflow_results"]], "create_aiida_node() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.create_aiida_node"]], "create_surface_slab() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.create_surface_slab"]], "get_results_cp2k_legacy_wc() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.get_results_cp2k_legacy_wc"]], "obtain_value_from_aiida_node() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.obtain_value_from_aiida_node"]], "seekpath_structure_analysis() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.seekpath_structure_analysis"]], "workflow_queue() (in module aim2dat.aiida_workflows.utils)": [[38, "aim2dat.aiida_workflows.utils.workflow_queue"]], "aiidacode (in module aim2dat.aiida_workflows.workflow_builder)": [[39, "aim2dat.aiida_workflows.workflow_builder.AiidaCode"]], "multipleworkflowbuilder (class in aim2dat.aiida_workflows.workflow_builder)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder"]], "workflowbuilder (class in aim2dat.aiida_workflows.workflow_builder)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder"]], "workflowprotocolerror": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError"]], "workflowprotocolerror.args (class in aim2dat.aiida_workflows.workflow_builder)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError.args"]], "add_parent_node() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.add_parent_node"]], "add_to_task_queue() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.add_to_task_queue"]], "adopt_input_nodes_from_workflow() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.adopt_input_nodes_from_workflow"]], "adopt_input_nodes_from_workflow() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.adopt_input_nodes_from_workflow"]], "aiida_group (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.aiida_group"]], "aiida_group (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.aiida_group"]], "aim2dat.aiida_workflows.workflow_builder": [[39, "module-aim2dat.aiida_workflows.workflow_builder"]], "completed_tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.completed_tasks"]], "determine_workflow_state() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.determine_workflow_state"]], "execute_task_queue() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.execute_task_queue"]], "failed_tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.failed_tasks"]], "from_file() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder class method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.from_file"]], "from_file() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder class method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.from_file"]], "generate_inputs() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.generate_inputs"]], "generate_inputs() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.generate_inputs"]], "generate_provenance_graph() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.generate_provenance_graph"]], "generate_provenance_graph() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.generate_provenance_graph"]], "graph_attributes (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.graph_attributes"]], "import_parent_nodes_from_aiida_db() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.import_parent_nodes_from_aiida_db"]], "import_parent_nodes_from_pandas_df() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.import_parent_nodes_from_pandas_df"]], "parent_node (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.parent_node"]], "protocol (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.protocol"]], "protocol (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.protocol"]], "reset_task_queue() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.reset_task_queue"]], "results (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.results"]], "return_process_nodes() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_process_nodes"]], "return_results() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_results"]], "return_runtimes() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_runtimes"]], "return_workflow_states() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_workflow_states"]], "run_task() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.run_task"]], "run_task() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.run_task"]], "running_tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.running_tasks"]], "set_user_input() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.set_user_input"]], "set_user_input() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.set_user_input"]], "submit_task() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.submit_task"]], "submit_task() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.submit_task"]], "task_queue (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.task_queue"]], "tasks (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.tasks"]], "tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.tasks"]], "to_file() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.to_file"]], "to_file() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.to_file"]], "use_uuid (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.use_uuid"]], "use_uuid (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.use_uuid"]], "user_input (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.user_input"]], "user_input (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.user_input"]], "with_traceback() (aim2dat.aiida_workflows.workflow_builder.workflowprotocolerror method)": [[39, "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError.with_traceback"]], "aim2dat.ext_interfaces.aiida": [[40, "module-aim2dat.ext_interfaces.aiida"]], "aim2dat.ext_interfaces.ase_atoms": [[41, "module-aim2dat.ext_interfaces.ase_atoms"]], "aim2dat.ext_interfaces.ase_surface": [[42, "module-aim2dat.ext_interfaces.ase_surface"]], "aim2dat.ext_interfaces.dscribe": [[43, "module-aim2dat.ext_interfaces.dscribe"]], "calc_acsf_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[43, "aim2dat.ext_interfaces.dscribe.calc_acsf_descriptor"]], "calc_interaction_matrix() (in module aim2dat.ext_interfaces.dscribe)": [[43, "aim2dat.ext_interfaces.dscribe.calc_interaction_matrix"]], "calc_mbtr_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[43, "aim2dat.ext_interfaces.dscribe.calc_mbtr_descriptor"]], "calc_soap_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[43, "aim2dat.ext_interfaces.dscribe.calc_soap_descriptor"]], "return_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[43, "aim2dat.ext_interfaces.dscribe.return_descriptor"]], "aim2dat.ext_interfaces.graphs": [[44, "module-aim2dat.ext_interfaces.graphs"]], "aim2dat.ext_interfaces.hdf5": [[45, "module-aim2dat.ext_interfaces.hdf5"]], "aim2dat.ext_interfaces.import_opt_dependencies": [[46, "module-aim2dat.ext_interfaces.import_opt_dependencies"]], "aim2dat.ext_interfaces": [[47, "module-aim2dat.ext_interfaces"]], "aim2dat.ext_interfaces.mp": [[48, "module-aim2dat.ext_interfaces.mp"]], "aim2dat.ext_interfaces.mp_openapi": [[49, "module-aim2dat.ext_interfaces.mp_openapi"]], "aim2dat.ext_interfaces.optimade": [[50, "module-aim2dat.ext_interfaces.optimade"]], "aim2dat.ext_interfaces.oqmd": [[51, "module-aim2dat.ext_interfaces.oqmd"]], "aim2dat.ext_interfaces.pandas": [[52, "module-aim2dat.ext_interfaces.pandas"]], "aim2dat.ext_interfaces.phonopy": [[53, "module-aim2dat.ext_interfaces.phonopy"]], "aim2dat.ext_interfaces.pymatgen": [[54, "module-aim2dat.ext_interfaces.pymatgen"]], "nr_of_space_groups (in module aim2dat.ext_interfaces.pyxtal)": [[55, "aim2dat.ext_interfaces.pyxtal.NR_OF_SPACE_GROUPS"]], "space_group_limits (in module aim2dat.ext_interfaces.pyxtal)": [[55, "aim2dat.ext_interfaces.pyxtal.SPACE_GROUP_LIMITS"]], "aim2dat.ext_interfaces.pyxtal": [[55, "module-aim2dat.ext_interfaces.pyxtal"]], "aim2dat.ext_interfaces.seekpath": [[56, "module-aim2dat.ext_interfaces.seekpath"]], "centrosymmetric_pg (in module aim2dat.ext_interfaces.spglib)": [[57, "aim2dat.ext_interfaces.spglib.CENTROSYMMETRIC_PG"]], "aim2dat.ext_interfaces.spglib": [[57, "module-aim2dat.ext_interfaces.spglib"]], "discretizedaxis (class in aim2dat.fct.discretization)": [[58, "aim2dat.fct.discretization.DiscretizedAxis"]], "discretizedgrid (class in aim2dat.fct.discretization)": [[58, "aim2dat.fct.discretization.DiscretizedGrid"]], "t (aim2dat.fct.discretization.discretizedaxis property)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.T"]], "aim2dat.fct.discretization": [[58, "module-aim2dat.fct.discretization"]], "axis (aim2dat.fct.discretization.discretizedaxis property)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.axis"]], "axis_type (aim2dat.fct.discretization.discretizedaxis property)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.axis_type"]], "create_grid() (aim2dat.fct.discretization.discretizedgrid method)": [[58, "aim2dat.fct.discretization.DiscretizedGrid.create_grid"]], "discretization_method (aim2dat.fct.discretization.discretizedaxis property)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.discretization_method"]], "discretize_axis() (aim2dat.fct.discretization.discretizedaxis method)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.discretize_axis"]], "grid (aim2dat.fct.discretization.discretizedgrid property)": [[58, "aim2dat.fct.discretization.DiscretizedGrid.grid"]], "is_empty (aim2dat.fct.discretization.discretizedaxis property)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.is_empty"]], "is_empty (aim2dat.fct.discretization.discretizedgrid property)": [[58, "aim2dat.fct.discretization.DiscretizedGrid.is_empty"]], "limit_array() (in module aim2dat.fct.discretization)": [[58, "aim2dat.fct.discretization.limit_array"]], "plot_grid() (aim2dat.fct.discretization.discretizedgrid method)": [[58, "aim2dat.fct.discretization.DiscretizedGrid.plot_grid"]], "shape (aim2dat.fct.discretization.discretizedaxis property)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.shape"]], "transpose() (aim2dat.fct.discretization.discretizedaxis method)": [[58, "aim2dat.fct.discretization.DiscretizedAxis.transpose"]], "functiondiscretizationfingerprint (class in aim2dat.fct.fingerprint)": [[59, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint"]], "aim2dat.fct.fingerprint": [[59, "module-aim2dat.fct.fingerprint"]], "calculate_fingerprint() (aim2dat.fct.fingerprint.functiondiscretizationfingerprint method)": [[59, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint.calculate_fingerprint"]], "compare_fingerprints() (aim2dat.fct.fingerprint.functiondiscretizationfingerprint method)": [[59, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint.compare_fingerprints"]], "plot_fingerprint() (aim2dat.fct.fingerprint.functiondiscretizationfingerprint method)": [[59, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint.plot_fingerprint"]], "functionanalysis (class in aim2dat.fct.function_comparison)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis"]], "aim2dat.fct.function_comparison": [[60, "module-aim2dat.fct.function_comparison"]], "allowed_distance_methods (aim2dat.fct.function_comparison.functionanalysis property)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.allowed_distance_methods"]], "calculate_correlation() (aim2dat.fct.function_comparison.functionanalysis method)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.calculate_correlation"]], "calculate_discrete_fingerprint() (aim2dat.fct.function_comparison.functionanalysis method)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.calculate_discrete_fingerprint"]], "calculate_distance() (aim2dat.fct.function_comparison.functionanalysis method)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.calculate_distance"]], "compare_areas() (aim2dat.fct.function_comparison.functionanalysis method)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.compare_areas"]], "compare_functions_by_discrete_fingerprint() (aim2dat.fct.function_comparison.functionanalysis method)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.compare_functions_by_discrete_fingerprint"]], "import_data() (aim2dat.fct.function_comparison.functionanalysis method)": [[60, "aim2dat.fct.function_comparison.FunctionAnalysis.import_data"]], "aim2dat.fct.hull": [[61, "module-aim2dat.fct.hull"]], "get_convex_hull() (in module aim2dat.fct.hull)": [[61, "aim2dat.fct.hull.get_convex_hull"]], "get_minimum_maximum_points() (in module aim2dat.fct.hull)": [[61, "aim2dat.fct.hull.get_minimum_maximum_points"]], "discretizedaxis (class in aim2dat.fct)": [[62, "aim2dat.fct.DiscretizedAxis"]], "discretizedgrid (class in aim2dat.fct)": [[62, "aim2dat.fct.DiscretizedGrid"]], "functionanalysis (class in aim2dat.fct)": [[62, "aim2dat.fct.FunctionAnalysis"]], "functiondiscretizationfingerprint (class in aim2dat.fct)": [[62, "aim2dat.fct.FunctionDiscretizationFingerprint"]], "t (aim2dat.fct.discretizedaxis property)": [[62, "aim2dat.fct.DiscretizedAxis.T"]], "aim2dat.fct": [[62, "module-aim2dat.fct"]], "allowed_distance_methods (aim2dat.fct.functionanalysis property)": [[62, "aim2dat.fct.FunctionAnalysis.allowed_distance_methods"]], "axis (aim2dat.fct.discretizedaxis property)": [[62, "aim2dat.fct.DiscretizedAxis.axis"]], "axis_type (aim2dat.fct.discretizedaxis property)": [[62, "aim2dat.fct.DiscretizedAxis.axis_type"]], "calculate_correlation() (aim2dat.fct.functionanalysis method)": [[62, "aim2dat.fct.FunctionAnalysis.calculate_correlation"]], "calculate_discrete_fingerprint() (aim2dat.fct.functionanalysis method)": [[62, "aim2dat.fct.FunctionAnalysis.calculate_discrete_fingerprint"]], "calculate_distance() (aim2dat.fct.functionanalysis method)": [[62, "aim2dat.fct.FunctionAnalysis.calculate_distance"]], "calculate_fingerprint() (aim2dat.fct.functiondiscretizationfingerprint method)": [[62, "aim2dat.fct.FunctionDiscretizationFingerprint.calculate_fingerprint"]], "compare_areas() (aim2dat.fct.functionanalysis method)": [[62, "aim2dat.fct.FunctionAnalysis.compare_areas"]], "compare_fingerprints() (aim2dat.fct.functiondiscretizationfingerprint method)": [[62, "aim2dat.fct.FunctionDiscretizationFingerprint.compare_fingerprints"]], "compare_functions_by_discrete_fingerprint() (aim2dat.fct.functionanalysis method)": [[62, "aim2dat.fct.FunctionAnalysis.compare_functions_by_discrete_fingerprint"]], "create_grid() (aim2dat.fct.discretizedgrid method)": [[62, "aim2dat.fct.DiscretizedGrid.create_grid"]], "discretization_method (aim2dat.fct.discretizedaxis property)": [[62, "aim2dat.fct.DiscretizedAxis.discretization_method"]], "discretize_axis() (aim2dat.fct.discretizedaxis method)": [[62, "aim2dat.fct.DiscretizedAxis.discretize_axis"]], "grid (aim2dat.fct.discretizedgrid property)": [[62, "aim2dat.fct.DiscretizedGrid.grid"]], "import_data() (aim2dat.fct.functionanalysis method)": [[62, "aim2dat.fct.FunctionAnalysis.import_data"]], "is_empty (aim2dat.fct.discretizedaxis property)": [[62, "aim2dat.fct.DiscretizedAxis.is_empty"]], "is_empty (aim2dat.fct.discretizedgrid property)": [[62, "aim2dat.fct.DiscretizedGrid.is_empty"]], "plot_fingerprint() (aim2dat.fct.functiondiscretizationfingerprint method)": [[62, "aim2dat.fct.FunctionDiscretizationFingerprint.plot_fingerprint"]], "plot_grid() (aim2dat.fct.discretizedgrid method)": [[62, "aim2dat.fct.DiscretizedGrid.plot_grid"]], "shape (aim2dat.fct.discretizedaxis property)": [[62, "aim2dat.fct.DiscretizedAxis.shape"]], "transpose() (aim2dat.fct.discretizedaxis method)": [[62, "aim2dat.fct.DiscretizedAxis.transpose"]], "available_smearing_methods (in module aim2dat.fct.smearing)": [[63, "aim2dat.fct.smearing.AVAILABLE_SMEARING_METHODS"]], "aim2dat.fct.smearing": [[63, "module-aim2dat.fct.smearing"]], "apply_smearing() (in module aim2dat.fct.smearing)": [[63, "aim2dat.fct.smearing.apply_smearing"]], "aim2dat": [[64, "module-aim2dat"]], "aim2dat.io.cif": [[65, "module-aim2dat.io.cif"]], "read_file() (in module aim2dat.io.cif)": [[65, "aim2dat.io.cif.read_file"]], "aim2dat.io.cp2k.bands_dos": [[66, "module-aim2dat.io.cp2k.bands_dos"]], "read_atom_proj_density_of_states() (in module aim2dat.io.cp2k.bands_dos)": [[66, "aim2dat.io.cp2k.bands_dos.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.cp2k.bands_dos)": [[66, "aim2dat.io.cp2k.bands_dos.read_band_structure"]], "aim2dat.io.cp2k": [[67, "module-aim2dat.io.cp2k"]], "read_atom_proj_density_of_states() (in module aim2dat.io.cp2k)": [[67, "aim2dat.io.cp2k.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.cp2k)": [[67, "aim2dat.io.cp2k.read_band_structure"]], "read_optimized_structure() (in module aim2dat.io.cp2k)": [[67, "aim2dat.io.cp2k.read_optimized_structure"]], "read_restart_structure() (in module aim2dat.io.cp2k)": [[67, "aim2dat.io.cp2k.read_restart_structure"]], "read_stdout() (in module aim2dat.io.cp2k)": [[67, "aim2dat.io.cp2k.read_stdout"]], "aim2dat.io.cp2k.restart": [[68, "module-aim2dat.io.cp2k.restart"]], "read_optimized_structure() (in module aim2dat.io.cp2k.restart)": [[68, "aim2dat.io.cp2k.restart.read_optimized_structure"]], "read_restart_structure() (in module aim2dat.io.cp2k.restart)": [[68, "aim2dat.io.cp2k.restart.read_restart_structure"]], "aim2dat.io.cp2k.stdout": [[69, "module-aim2dat.io.cp2k.stdout"]], "read_stdout() (in module aim2dat.io.cp2k.stdout)": [[69, "aim2dat.io.cp2k.stdout.read_stdout"]], "aim2dat.io.critic2": [[70, "module-aim2dat.io.critic2"]], "read_plane() (in module aim2dat.io.critic2)": [[70, "aim2dat.io.critic2.read_plane"]], "read_stdout() (in module aim2dat.io.critic2)": [[70, "aim2dat.io.critic2.read_stdout"]], "aim2dat.io.fhi_aims": [[71, "module-aim2dat.io.fhi_aims"]], "read_atom_proj_density_of_states() (in module aim2dat.io.fhi_aims)": [[71, "aim2dat.io.fhi_aims.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.fhi_aims)": [[71, "aim2dat.io.fhi_aims.read_band_structure"]], "read_total_density_of_states() (in module aim2dat.io.fhi_aims)": [[71, "aim2dat.io.fhi_aims.read_total_density_of_states"]], "aim2dat.io": [[72, "module-aim2dat.io"]], "aim2dat.io.phonopy": [[73, "module-aim2dat.io.phonopy"]], "read_atom_proj_density_of_states() (in module aim2dat.io.phonopy)": [[73, "aim2dat.io.phonopy.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.phonopy)": [[73, "aim2dat.io.phonopy.read_band_structure"]], "read_qha_properties() (in module aim2dat.io.phonopy)": [[73, "aim2dat.io.phonopy.read_qha_properties"]], "read_thermal_properties() (in module aim2dat.io.phonopy)": [[73, "aim2dat.io.phonopy.read_thermal_properties"]], "read_total_density_of_states() (in module aim2dat.io.phonopy)": [[73, "aim2dat.io.phonopy.read_total_density_of_states"]], "aim2dat.io.qe": [[74, "module-aim2dat.io.qe"]], "read_atom_proj_density_of_states() (in module aim2dat.io.qe)": [[74, "aim2dat.io.qe.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.qe)": [[74, "aim2dat.io.qe.read_band_structure"]], "read_input_structure() (in module aim2dat.io.qe)": [[74, "aim2dat.io.qe.read_input_structure"]], "read_total_density_of_states() (in module aim2dat.io.qe)": [[74, "aim2dat.io.qe.read_total_density_of_states"]], "aim2dat.io.utils": [[75, "module-aim2dat.io.utils"]], "custom_open() (in module aim2dat.io.utils)": [[75, "aim2dat.io.utils.custom_open"]], "read_multiple() (in module aim2dat.io.utils)": [[75, "aim2dat.io.utils.read_multiple"]], "read_structure() (in module aim2dat.io.utils)": [[75, "aim2dat.io.utils.read_structure"]], "aim2dat.io.xmgrace": [[76, "module-aim2dat.io.xmgrace"]], "read_band_structure() (in module aim2dat.io.xmgrace)": [[76, "aim2dat.io.xmgrace.read_band_structure"]], "read_xmgrace_file() (in module aim2dat.io.xmgrace)": [[76, "aim2dat.io.xmgrace.read_xmgrace_file"]], "aim2dat.io.yaml": [[77, "module-aim2dat.io.yaml"]], "load_yaml_file() (in module aim2dat.io.yaml)": [[77, "aim2dat.io.yaml.load_yaml_file"]], "store_in_yaml_file() (in module aim2dat.io.yaml)": [[77, "aim2dat.io.yaml.store_in_yaml_file"]], "aim2dat.io.zeo": [[78, "module-aim2dat.io.zeo"]], "write_to_file() (in module aim2dat.io.zeo)": [[78, "aim2dat.io.zeo.write_to_file"]], "cellgridsearch (class in aim2dat.ml.cell_grid_search)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch"]], "aim2dat.ml.cell_grid_search": [[79, "module-aim2dat.ml.cell_grid_search"]], "fit() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.fit"]], "get_optimized_structure() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.get_optimized_structure"]], "return_initial_score() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.return_initial_score"]], "return_search_space() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.return_search_space"]], "set_initial_structure() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.set_initial_structure"]], "set_model() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.set_model"]], "set_target_structure() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[79, "aim2dat.ml.cell_grid_search.CellGridSearch.set_target_structure"]], "aim2dat.ml": [[80, "module-aim2dat.ml"]], "aim2dat.ml.kernels": [[81, "module-aim2dat.ml.kernels"]], "krr_ffprint_cosine() (in module aim2dat.ml.kernels)": [[81, "aim2dat.ml.kernels.krr_ffprint_cosine"]], "krr_ffprint_laplace() (in module aim2dat.ml.kernels)": [[81, "aim2dat.ml.kernels.krr_ffprint_laplace"]], "aim2dat.ml.metrics": [[82, "module-aim2dat.ml.metrics"]], "ffprint_cosine() (in module aim2dat.ml.metrics)": [[82, "aim2dat.ml.metrics.ffprint_cosine"]], "structureacsftransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer"]], "structurechemordertransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer"]], "structurecompositiontransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer"]], "structurecoordinationtransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer"]], "structuredensitytransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer"]], "structureffprinttransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer"]], "structurembtrtransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer"]], "structurematrixtransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer"]], "structureprdftransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer"]], "structuresoaptransformer (class in aim2dat.ml.transformers)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer"]], "add_precomputed_properties() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.add_precomputed_properties"]], "aim2dat.ml.transformers": [[83, "module-aim2dat.ml.transformers"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.clear_precomputed_properties"]], "feature_types (aim2dat.ml.transformers.structurecoordinationtransformer property)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.feature_types"]], "fit() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.fit"]], "fit() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.fit"]], "fit() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.fit"]], "fit() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.fit"]], "fit() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.fit"]], "fit_transform() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.fit_transform"]], "get_feature_names_out() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.get_feature_names_out"]], "get_metadata_routing() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.get_metadata_routing"]], "get_params() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.get_params"]], "precompute_parameter_space() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.precompute_parameter_space"]], "precomputed_properties (aim2dat.ml.transformers.structureacsftransformer property)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurechemordertransformer property)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurecompositiontransformer property)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurecoordinationtransformer property)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structuredensitytransformer property)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structureffprinttransformer property)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurembtrtransformer property)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurematrixtransformer property)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structureprdftransformer property)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structuresoaptransformer property)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.precomputed_properties"]], "set_output() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.set_output"]], "set_params() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.set_params"]], "transform() (aim2dat.ml.transformers.structureacsftransformer method)": [[83, "aim2dat.ml.transformers.StructureACSFTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurechemordertransformer method)": [[83, "aim2dat.ml.transformers.StructureChemOrderTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[83, "aim2dat.ml.transformers.StructureCompositionTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[83, "aim2dat.ml.transformers.StructureCoordinationTransformer.transform"]], "transform() (aim2dat.ml.transformers.structuredensitytransformer method)": [[83, "aim2dat.ml.transformers.StructureDensityTransformer.transform"]], "transform() (aim2dat.ml.transformers.structureffprinttransformer method)": [[83, "aim2dat.ml.transformers.StructureFFPrintTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurembtrtransformer method)": [[83, "aim2dat.ml.transformers.StructureMBTRTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurematrixtransformer method)": [[83, "aim2dat.ml.transformers.StructureMatrixTransformer.transform"]], "transform() (aim2dat.ml.transformers.structureprdftransformer method)": [[83, "aim2dat.ml.transformers.StructurePRDFTransformer.transform"]], "transform() (aim2dat.ml.transformers.structuresoaptransformer method)": [[83, "aim2dat.ml.transformers.StructureSOAPTransformer.transform"]], "aim2dat.ml.utils": [[84, "module-aim2dat.ml.utils"]], "train_test_split_crystals() (in module aim2dat.ml.utils)": [[84, "aim2dat.ml.utils.train_test_split_crystals"]], "bandstructure() (in module aim2dat.plots.band_structure_dos)": [[85, "aim2dat.plots.band_structure_dos.BandStructure"]], "bandstructuredosplot (class in aim2dat.plots.band_structure_dos)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot"]], "bandstructuredensityofstates() (in module aim2dat.plots.band_structure_dos)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDensityOfStates"]], "bandstructureplot (class in aim2dat.plots.band_structure_dos)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot"]], "dosplot (class in aim2dat.plots.band_structure_dos)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot"]], "densityofstates() (in module aim2dat.plots.band_structure_dos)": [[85, "aim2dat.plots.band_structure_dos.DensityOfStates"]], "add_hline() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.add_hline"]], "add_hline() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.add_hline"]], "add_vline() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.add_vline"]], "add_vline() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.add_vline"]], "add_vline() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.add_vline"]], "aim2dat.plots.band_structure_dos": [[85, "module-aim2dat.plots.band_structure_dos"]], "analyse_band() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.analyse_band"]], "analyse_band() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.analyse_band"]], "auto_set_axis_properties() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.backend"]], "backend (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.backend"]], "backend (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.backend"]], "calculate_band_gap() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_band_gap"]], "calculate_band_gap() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_band_gap"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_energy_diff_at_kpoint"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_energy_diff_at_kpoint"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_smallest_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_smallest_energy_diff"]], "create_default_gridspec() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_alpha"]], "custom_colors (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_colors"]], "custom_colors (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_colors"]], "custom_colors (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_markers"]], "custom_markers (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_markers"]], "custom_markers (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.custom_yticks"]], "data_labels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.data_labels"]], "data_labels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.data_labels"]], "data_labels (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.equal_aspect_ratio"]], "import_band_structure() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_band_structure"]], "import_band_structure() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.import_band_structure"]], "import_from_aiida_bandsdata() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_from_aiida_bandsdata"]], "import_from_aiida_bandsdata() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.import_from_aiida_bandsdata"]], "import_from_aiida_xydata() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_from_aiida_xydata"]], "import_from_aiida_xydata() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.import_from_aiida_xydata"]], "import_projected_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_projected_dos"]], "import_projected_dos() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.import_projected_dos"]], "import_total_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_total_dos"]], "import_total_dos() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.import_total_dos"]], "legend_bbox_to_anchor (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_loc"]], "legend_loc (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_loc"]], "legend_loc (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.legend_loc"]], "legend_ncol (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.legend_sort_entries"]], "pdos_plot_type (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.pdos_plot_type"]], "pdos_plot_type (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.pdos_plot_type"]], "plot() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.plot"]], "plot() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.plot"]], "plot() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.plot"]], "plot_grid (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.plot_grid"]], "plot_grid (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.plot_grid"]], "plot_grid (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.plot_grid"]], "ratio (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.ratio"]], "ratio (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.ratio"]], "ratio (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.return_data_labels"]], "set_reference_cell() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.set_reference_cell"]], "set_reference_cell() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.set_reference_cell"]], "shift_bands() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_bands"]], "shift_bands() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.shift_bands"]], "shift_bands_and_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_bands_and_dos"]], "shift_bands_and_dos_to_vbm() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_bands_and_dos_to_vbm"]], "shift_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_dos"]], "shift_dos() (aim2dat.plots.band_structure_dos.dosplot method)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.shift_dos"]], "show_colorbar (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.show_colorbar"]], "show_grid (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_grid"]], "show_grid (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_grid"]], "show_grid (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.show_grid"]], "show_legend (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_legend"]], "show_legend (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_legend"]], "show_legend (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.show_legend"]], "show_plot (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_plot"]], "show_plot (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_plot"]], "show_plot (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.show_plot"]], "smearing_delta (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.smearing_delta"]], "smearing_delta (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.smearing_delta"]], "smearing_method (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.smearing_method"]], "smearing_method (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.smearing_method"]], "smearing_sigma (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.smearing_sigma"]], "smearing_sigma (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.smearing_sigma"]], "store_path (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.store_path"]], "store_path (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.store_path"]], "store_path (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.store_path"]], "store_plot (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.store_plot"]], "store_plot (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.store_plot"]], "store_plot (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.store_plot"]], "style_sheet (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.style_sheet"]], "style_sheet (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.style_sheet"]], "style_sheet (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_wspace"]], "tdos_plot_type (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.tdos_plot_type"]], "tdos_plot_type (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.tdos_plot_type"]], "x_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.x_label"]], "x_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.x_label"]], "x_label (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.x_label"]], "x_range (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.x_range"]], "x_range (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.x_range"]], "x_range (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.x_range"]], "y_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.y_label"]], "y_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.y_label"]], "y_label (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.y_label"]], "y_range (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.y_range"]], "y_range (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[85, "aim2dat.plots.band_structure_dos.BandStructurePlot.y_range"]], "y_range (aim2dat.plots.band_structure_dos.dosplot property)": [[85, "aim2dat.plots.band_structure_dos.DOSPlot.y_range"]], "bandstructure() (in module aim2dat.plots)": [[86, "aim2dat.plots.BandStructure"]], "bandstructuredosplot (class in aim2dat.plots)": [[86, "aim2dat.plots.BandStructureDOSPlot"]], "bandstructuredensityofstates() (in module aim2dat.plots)": [[86, "aim2dat.plots.BandStructureDensityOfStates"]], "bandstructureplot (class in aim2dat.plots)": [[86, "aim2dat.plots.BandStructurePlot"]], "dosplot (class in aim2dat.plots)": [[86, "aim2dat.plots.DOSPlot"]], "densityofstates() (in module aim2dat.plots)": [[86, "aim2dat.plots.DensityOfStates"]], "partialchargesplot (class in aim2dat.plots)": [[86, "aim2dat.plots.PartialChargesPlot"]], "partialrdfplot (class in aim2dat.plots)": [[86, "aim2dat.plots.PartialRDFPlot"]], "phasediagram() (in module aim2dat.plots)": [[86, "aim2dat.plots.PhaseDiagram"]], "phaseplot (class in aim2dat.plots)": [[86, "aim2dat.plots.PhasePlot"]], "planarfieldplot (class in aim2dat.plots)": [[86, "aim2dat.plots.PlanarFieldPlot"]], "simpleplot (class in aim2dat.plots)": [[86, "aim2dat.plots.SimplePlot"]], "spectrum() (in module aim2dat.plots)": [[86, "aim2dat.plots.Spectrum"]], "spectrumplot (class in aim2dat.plots)": [[86, "aim2dat.plots.SpectrumPlot"]], "surfaceplot (class in aim2dat.plots)": [[86, "aim2dat.plots.SurfacePlot"]], "add_data_point() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.add_data_point"]], "add_hline() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.add_hline"]], "add_hline() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.add_hline"]], "add_hline() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.add_hline"]], "add_surface_facet() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.add_surface_facet"]], "add_vline() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.add_vline"]], "add_vline() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.add_vline"]], "add_vline() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.add_vline"]], "add_vline() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.add_vline"]], "add_vline() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.add_vline"]], "aim2dat.plots": [[86, "module-aim2dat.plots"]], "analyse_band() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.analyse_band"]], "analyse_band() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.analyse_band"]], "area_unit (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.area_unit"]], "auto_set_axis_properties() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.partialrdfplot method)": [[86, "aim2dat.plots.PartialRDFPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.backend"]], "backend (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.backend"]], "backend (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.backend"]], "backend (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.backend"]], "backend (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.backend"]], "backend (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.backend"]], "backend (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.backend"]], "backend (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.backend"]], "backend (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.backend"]], "backend (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.backend"]], "bulk_phase (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.bulk_phase"]], "calculate_band_gap() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.calculate_band_gap"]], "calculate_band_gap() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.calculate_band_gap"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.calculate_energy_diff_at_kpoint"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.calculate_energy_diff_at_kpoint"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.calculate_smallest_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.calculate_smallest_energy_diff"]], "coordinates_unit (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.coordinates_unit"]], "create_default_gridspec() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.partialrdfplot method)": [[86, "aim2dat.plots.PartialRDFPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_alpha"]], "custom_colors (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_colors"]], "custom_colors (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_colors"]], "custom_colors (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_colors"]], "custom_colors (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_colors"]], "custom_colors (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_colors"]], "custom_colors (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_colors"]], "custom_colors (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_colors"]], "custom_colors (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_colors"]], "custom_colors (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_colors"]], "custom_colors (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_markers"]], "custom_markers (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_markers"]], "custom_markers (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_markers"]], "custom_markers (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_markers"]], "custom_markers (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_markers"]], "custom_markers (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_markers"]], "custom_markers (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_markers"]], "custom_markers (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_markers"]], "custom_markers (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_markers"]], "custom_markers (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.custom_yticks"]], "data_labels (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.data_labels"]], "data_labels (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.data_labels"]], "data_labels (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.data_labels"]], "data_labels (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.data_labels"]], "data_labels (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.data_labels"]], "data_labels (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.data_labels"]], "data_labels (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.data_labels"]], "data_labels (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.data_labels"]], "data_labels (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.data_labels"]], "data_labels (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.data_labels"]], "elemental_phases (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.elemental_phases"]], "elements (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.elements"]], "energy_unit (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.energy_unit"]], "equal_aspect_ratio (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.equal_aspect_ratio"]], "import_band_structure() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.import_band_structure"]], "import_band_structure() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.import_band_structure"]], "import_bar_data_set() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.import_bar_data_set"]], "import_ffingerprint() (aim2dat.plots.partialrdfplot method)": [[86, "aim2dat.plots.PartialRDFPlot.import_ffingerprint"]], "import_field() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.import_field"]], "import_from_aiida_arraydata() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.import_from_aiida_arraydata"]], "import_from_aiida_bandsdata() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.import_from_aiida_bandsdata"]], "import_from_aiida_bandsdata() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.import_from_aiida_bandsdata"]], "import_from_aiida_list() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.import_from_aiida_list"]], "import_from_aiida_xydata() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.import_from_aiida_xydata"]], "import_from_aiida_xydata() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.import_from_aiida_xydata"]], "import_from_pandas_df() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.import_from_pandas_df"]], "import_from_pandas_df() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.import_from_pandas_df"]], "import_from_structure_collection() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.import_from_structure_collection"]], "import_partial_charges() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.import_partial_charges"]], "import_projected_dos() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.import_projected_dos"]], "import_projected_dos() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.import_projected_dos"]], "import_scatter_data_set() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.import_scatter_data_set"]], "import_spectrum() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.import_spectrum"]], "import_total_dos() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.import_total_dos"]], "import_total_dos() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.import_total_dos"]], "legend_bbox_to_anchor (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.legend_loc"]], "legend_loc (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.legend_loc"]], "legend_loc (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.legend_loc"]], "legend_loc (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.legend_loc"]], "legend_loc (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.legend_loc"]], "legend_loc (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.legend_loc"]], "legend_loc (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.legend_loc"]], "legend_loc (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.legend_loc"]], "legend_loc (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.legend_loc"]], "legend_loc (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.legend_loc"]], "legend_ncol (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.legend_sort_entries"]], "norm (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.norm"]], "pc_plot_order (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.pc_plot_order"]], "pc_plot_type (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.pc_plot_type"]], "pdos_plot_type (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.pdos_plot_type"]], "pdos_plot_type (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.pdos_plot_type"]], "peak_color (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_color"]], "peak_distance (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_distance"]], "peak_height (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_height"]], "peak_line_style (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_line_style"]], "peak_max_factor (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_max_factor"]], "peak_plateau_size (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_plateau_size"]], "peak_prominence (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_prominence"]], "peak_rel_height (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_rel_height"]], "peak_threshold (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_threshold"]], "peak_width (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_width"]], "peak_wlen (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_wlen"]], "peak_y_min (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peak_y_min"]], "peaks (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.peaks"]], "plot() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.plot"]], "plot() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.plot"]], "plot() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.plot"]], "plot() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.plot"]], "plot() (aim2dat.plots.partialrdfplot method)": [[86, "aim2dat.plots.PartialRDFPlot.plot"]], "plot() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.plot"]], "plot() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.plot"]], "plot() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.plot"]], "plot() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.plot"]], "plot() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.plot"]], "plot_grid (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.plot_grid"]], "plot_grid (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.plot_grid"]], "plot_grid (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.plot_grid"]], "plot_grid (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.plot_grid"]], "plot_grid (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.plot_grid"]], "plot_grid (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.plot_grid"]], "plot_grid (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.plot_grid"]], "plot_grid (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.plot_grid"]], "plot_grid (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.plot_grid"]], "plot_grid (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.plot_grid"]], "plot_properties (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.plot_properties"]], "plot_type (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.plot_type"]], "plot_type (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.plot_type"]], "plot_type (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.plot_type"]], "plot_unit_x (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.plot_unit_x"]], "ratio (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.ratio"]], "ratio (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.ratio"]], "ratio (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.ratio"]], "ratio (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.ratio"]], "ratio (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.ratio"]], "ratio (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.ratio"]], "ratio (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.ratio"]], "ratio (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.ratio"]], "ratio (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.ratio"]], "ratio (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.partialrdfplot method)": [[86, "aim2dat.plots.PartialRDFPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.partialchargesplot method)": [[86, "aim2dat.plots.PartialChargesPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.partialrdfplot method)": [[86, "aim2dat.plots.PartialRDFPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.phaseplot method)": [[86, "aim2dat.plots.PhasePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.planarfieldplot method)": [[86, "aim2dat.plots.PlanarFieldPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.simpleplot method)": [[86, "aim2dat.plots.SimplePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.spectrumplot method)": [[86, "aim2dat.plots.SpectrumPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.return_data_labels"]], "set_bulk_phase() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.set_bulk_phase"]], "set_elemental_phase() (aim2dat.plots.surfaceplot method)": [[86, "aim2dat.plots.SurfacePlot.set_elemental_phase"]], "set_reference_cell() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.set_reference_cell"]], "set_reference_cell() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.set_reference_cell"]], "shift_bands() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.shift_bands"]], "shift_bands() (aim2dat.plots.bandstructureplot method)": [[86, "aim2dat.plots.BandStructurePlot.shift_bands"]], "shift_bands_and_dos() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.shift_bands_and_dos"]], "shift_bands_and_dos_to_vbm() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.shift_bands_and_dos_to_vbm"]], "shift_dos() (aim2dat.plots.bandstructuredosplot method)": [[86, "aim2dat.plots.BandStructureDOSPlot.shift_dos"]], "shift_dos() (aim2dat.plots.dosplot method)": [[86, "aim2dat.plots.DOSPlot.shift_dos"]], "show_colorbar (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.show_colorbar"]], "show_crystal_system (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.show_crystal_system"]], "show_grid (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.show_grid"]], "show_grid (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.show_grid"]], "show_grid (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.show_grid"]], "show_grid (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.show_grid"]], "show_grid (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.show_grid"]], "show_grid (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.show_grid"]], "show_grid (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.show_grid"]], "show_grid (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.show_grid"]], "show_grid (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.show_grid"]], "show_grid (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.show_grid"]], "show_legend (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.show_legend"]], "show_legend (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.show_legend"]], "show_legend (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.show_legend"]], "show_legend (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.show_legend"]], "show_legend (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.show_legend"]], "show_legend (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.show_legend"]], "show_legend (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.show_legend"]], "show_legend (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.show_legend"]], "show_legend (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.show_legend"]], "show_legend (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.show_legend"]], "show_plot (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.show_plot"]], "show_plot (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.show_plot"]], "show_plot (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.show_plot"]], "show_plot (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.show_plot"]], "show_plot (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.show_plot"]], "show_plot (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.show_plot"]], "show_plot (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.show_plot"]], "show_plot (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.show_plot"]], "show_plot (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.show_plot"]], "show_plot (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.show_plot"]], "smearing_delta (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.smearing_delta"]], "smearing_delta (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.smearing_delta"]], "smearing_delta (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.smearing_delta"]], "smearing_method (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.smearing_method"]], "smearing_method (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.smearing_method"]], "smearing_method (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.smearing_method"]], "smearing_sigma (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.smearing_sigma"]], "smearing_sigma (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.smearing_sigma"]], "smearing_sigma (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.smearing_sigma"]], "store_path (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.store_path"]], "store_path (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.store_path"]], "store_path (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.store_path"]], "store_path (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.store_path"]], "store_path (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.store_path"]], "store_path (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.store_path"]], "store_path (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.store_path"]], "store_path (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.store_path"]], "store_path (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.store_path"]], "store_path (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.store_path"]], "store_plot (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.store_plot"]], "store_plot (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.store_plot"]], "store_plot (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.store_plot"]], "store_plot (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.store_plot"]], "store_plot (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.store_plot"]], "store_plot (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.store_plot"]], "store_plot (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.store_plot"]], "store_plot (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.store_plot"]], "store_plot (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.store_plot"]], "store_plot (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.store_plot"]], "style_sheet (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.style_sheet"]], "style_sheet (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.style_sheet"]], "style_sheet (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.style_sheet"]], "style_sheet (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.style_sheet"]], "style_sheet (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.style_sheet"]], "style_sheet (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.style_sheet"]], "style_sheet (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.style_sheet"]], "style_sheet (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.style_sheet"]], "style_sheet (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.style_sheet"]], "style_sheet (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.subplot_wspace"]], "tdos_plot_type (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.tdos_plot_type"]], "tdos_plot_type (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.tdos_plot_type"]], "top_labels (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.top_labels"]], "values_unit (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.values_unit"]], "x_label (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.x_label"]], "x_label (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.x_label"]], "x_label (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.x_label"]], "x_label (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.x_label"]], "x_label (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.x_label"]], "x_label (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.x_label"]], "x_label (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.x_label"]], "x_label (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.x_label"]], "x_label (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.x_label"]], "x_label (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.x_label"]], "x_range (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.x_range"]], "x_range (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.x_range"]], "x_range (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.x_range"]], "x_range (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.x_range"]], "x_range (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.x_range"]], "x_range (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.x_range"]], "x_range (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.x_range"]], "x_range (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.x_range"]], "x_range (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.x_range"]], "x_range (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.x_range"]], "x_unit (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.x_unit"]], "y_label (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.y_label"]], "y_label (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.y_label"]], "y_label (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.y_label"]], "y_label (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.y_label"]], "y_label (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.y_label"]], "y_label (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.y_label"]], "y_label (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.y_label"]], "y_label (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.y_label"]], "y_label (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.y_label"]], "y_label (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.y_label"]], "y_range (aim2dat.plots.bandstructuredosplot property)": [[86, "aim2dat.plots.BandStructureDOSPlot.y_range"]], "y_range (aim2dat.plots.bandstructureplot property)": [[86, "aim2dat.plots.BandStructurePlot.y_range"]], "y_range (aim2dat.plots.dosplot property)": [[86, "aim2dat.plots.DOSPlot.y_range"]], "y_range (aim2dat.plots.partialchargesplot property)": [[86, "aim2dat.plots.PartialChargesPlot.y_range"]], "y_range (aim2dat.plots.partialrdfplot property)": [[86, "aim2dat.plots.PartialRDFPlot.y_range"]], "y_range (aim2dat.plots.phaseplot property)": [[86, "aim2dat.plots.PhasePlot.y_range"]], "y_range (aim2dat.plots.planarfieldplot property)": [[86, "aim2dat.plots.PlanarFieldPlot.y_range"]], "y_range (aim2dat.plots.simpleplot property)": [[86, "aim2dat.plots.SimplePlot.y_range"]], "y_range (aim2dat.plots.spectrumplot property)": [[86, "aim2dat.plots.SpectrumPlot.y_range"]], "y_range (aim2dat.plots.surfaceplot property)": [[86, "aim2dat.plots.SurfacePlot.y_range"]], "partialchargesplot (class in aim2dat.plots.partial_charges)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot"]], "aim2dat.plots.partial_charges": [[87, "module-aim2dat.plots.partial_charges"]], "auto_set_axis_properties() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.backend"]], "create_default_gridspec() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_alpha"]], "custom_colors (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_yticks"]], "data_labels (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.equal_aspect_ratio"]], "import_from_aiida_list() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.import_from_aiida_list"]], "import_partial_charges() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.import_partial_charges"]], "legend_bbox_to_anchor (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_loc"]], "legend_ncol (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_sort_entries"]], "pc_plot_order (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.pc_plot_order"]], "pc_plot_type (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.pc_plot_type"]], "plot() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.plot"]], "plot_grid (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.plot_grid"]], "ratio (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.ratio"]], "reset_gridspec() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.partial_charges.partialchargesplot method)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.show_colorbar"]], "show_grid (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.show_grid"]], "show_legend (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.show_legend"]], "show_plot (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.show_plot"]], "store_path (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.store_path"]], "store_plot (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.store_plot"]], "style_sheet (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_wspace"]], "x_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.x_label"]], "x_range (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.x_range"]], "y_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.y_label"]], "y_range (aim2dat.plots.partial_charges.partialchargesplot property)": [[87, "aim2dat.plots.partial_charges.PartialChargesPlot.y_range"]], "partialrdfplot (class in aim2dat.plots.partial_rdf)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot"]], "aim2dat.plots.partial_rdf": [[88, "module-aim2dat.plots.partial_rdf"]], "auto_set_axis_properties() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.backend"]], "create_default_gridspec() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_alpha"]], "custom_colors (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_yticks"]], "data_labels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.equal_aspect_ratio"]], "import_ffingerprint() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.import_ffingerprint"]], "legend_bbox_to_anchor (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_loc"]], "legend_ncol (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_sort_entries"]], "plot() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.plot"]], "plot_grid (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.plot_grid"]], "ratio (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.ratio"]], "reset_gridspec() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_colorbar"]], "show_grid (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_grid"]], "show_legend (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_legend"]], "show_plot (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_plot"]], "store_path (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.store_path"]], "store_plot (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.store_plot"]], "style_sheet (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_wspace"]], "x_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.x_label"]], "x_range (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.x_range"]], "x_unit (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.x_unit"]], "y_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.y_label"]], "y_range (aim2dat.plots.partial_rdf.partialrdfplot property)": [[88, "aim2dat.plots.partial_rdf.PartialRDFPlot.y_range"]], "phasediagram() (in module aim2dat.plots.phase)": [[89, "aim2dat.plots.phase.PhaseDiagram"]], "phaseplot (class in aim2dat.plots.phase)": [[89, "aim2dat.plots.phase.PhasePlot"]], "add_data_point() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.add_data_point"]], "aim2dat.plots.phase": [[89, "module-aim2dat.plots.phase"]], "auto_set_axis_properties() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.backend"]], "create_default_gridspec() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_alpha"]], "custom_colors (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.custom_yticks"]], "data_labels (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.data_labels"]], "elements (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.elements"]], "equal_aspect_ratio (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.equal_aspect_ratio"]], "import_from_pandas_df() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.import_from_pandas_df"]], "import_from_structure_collection() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.import_from_structure_collection"]], "legend_bbox_to_anchor (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.legend_loc"]], "legend_ncol (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.legend_sort_entries"]], "plot() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.plot"]], "plot_grid (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.plot_grid"]], "plot_type (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.plot_type"]], "ratio (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.ratio"]], "reset_gridspec() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.phase.phaseplot method)": [[89, "aim2dat.plots.phase.PhasePlot.return_data_labels"]], "show_colorbar (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.show_colorbar"]], "show_crystal_system (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.show_crystal_system"]], "show_grid (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.show_grid"]], "show_legend (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.show_legend"]], "show_plot (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.show_plot"]], "store_path (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.store_path"]], "store_plot (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.store_plot"]], "style_sheet (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.subplot_wspace"]], "top_labels (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.top_labels"]], "x_label (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.x_label"]], "x_range (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.x_range"]], "y_label (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.y_label"]], "y_range (aim2dat.plots.phase.phaseplot property)": [[89, "aim2dat.plots.phase.PhasePlot.y_range"]], "planarfieldplot (class in aim2dat.plots.planar_fields)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot"]], "aim2dat.plots.planar_fields": [[90, "module-aim2dat.plots.planar_fields"]], "auto_set_axis_properties() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.backend"]], "coordinates_unit (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.coordinates_unit"]], "create_default_gridspec() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_alpha"]], "custom_colors (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_yticks"]], "data_labels (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.equal_aspect_ratio"]], "import_field() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.import_field"]], "import_from_aiida_arraydata() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.import_from_aiida_arraydata"]], "legend_bbox_to_anchor (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_loc"]], "legend_ncol (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_sort_entries"]], "norm (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.norm"]], "plot() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.plot"]], "plot_grid (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.plot_grid"]], "plot_type (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.plot_type"]], "ratio (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.ratio"]], "reset_gridspec() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.planar_fields.planarfieldplot method)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_colorbar"]], "show_grid (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_grid"]], "show_legend (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_legend"]], "show_plot (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_plot"]], "store_path (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.store_path"]], "store_plot (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.store_plot"]], "style_sheet (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_wspace"]], "values_unit (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.values_unit"]], "x_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.x_label"]], "x_range (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.x_range"]], "y_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.y_label"]], "y_range (aim2dat.plots.planar_fields.planarfieldplot property)": [[90, "aim2dat.plots.planar_fields.PlanarFieldPlot.y_range"]], "simpleplot (class in aim2dat.plots.simple_plot)": [[91, "aim2dat.plots.simple_plot.SimplePlot"]], "add_hline() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.add_hline"]], "add_vline() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.add_vline"]], "aim2dat.plots.simple_plot": [[91, "module-aim2dat.plots.simple_plot"]], "auto_set_axis_properties() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.backend"]], "create_default_gridspec() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_alpha"]], "custom_colors (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.custom_yticks"]], "data_labels (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.equal_aspect_ratio"]], "import_bar_data_set() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.import_bar_data_set"]], "import_scatter_data_set() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.import_scatter_data_set"]], "legend_bbox_to_anchor (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.legend_loc"]], "legend_ncol (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.legend_sort_entries"]], "plot() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.plot"]], "plot_grid (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.plot_grid"]], "ratio (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.simple_plot.simpleplot method)": [[91, "aim2dat.plots.simple_plot.SimplePlot.return_data_labels"]], "show_colorbar (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.show_colorbar"]], "show_grid (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.show_grid"]], "show_legend (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.show_legend"]], "show_plot (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.show_plot"]], "store_path (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.store_path"]], "store_plot (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.store_plot"]], "style_sheet (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.subplot_wspace"]], "x_label (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.x_label"]], "x_range (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.x_range"]], "y_label (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.y_label"]], "y_range (aim2dat.plots.simple_plot.simpleplot property)": [[91, "aim2dat.plots.simple_plot.SimplePlot.y_range"]], "spectrum() (in module aim2dat.plots.spectroscopy)": [[92, "aim2dat.plots.spectroscopy.Spectrum"]], "spectrumplot (class in aim2dat.plots.spectroscopy)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot"]], "add_vline() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.add_vline"]], "aim2dat.plots.spectroscopy": [[92, "module-aim2dat.plots.spectroscopy"]], "auto_set_axis_properties() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.backend"]], "create_default_gridspec() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_alpha"]], "custom_colors (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_yticks"]], "data_labels (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.equal_aspect_ratio"]], "import_spectrum() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.import_spectrum"]], "legend_bbox_to_anchor (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_loc"]], "legend_ncol (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_sort_entries"]], "peak_color (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_color"]], "peak_distance (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_distance"]], "peak_height (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_height"]], "peak_line_style (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_line_style"]], "peak_max_factor (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_max_factor"]], "peak_plateau_size (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_plateau_size"]], "peak_prominence (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_prominence"]], "peak_rel_height (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_rel_height"]], "peak_threshold (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_threshold"]], "peak_width (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_width"]], "peak_wlen (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_wlen"]], "peak_y_min (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_y_min"]], "peaks (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.peaks"]], "plot() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.plot"]], "plot_grid (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.plot_grid"]], "plot_unit_x (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.plot_unit_x"]], "ratio (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.spectroscopy.spectrumplot method)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.show_colorbar"]], "show_grid (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.show_grid"]], "show_legend (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.show_legend"]], "show_plot (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.show_plot"]], "smearing_delta (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.smearing_delta"]], "smearing_method (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.smearing_method"]], "smearing_sigma (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.smearing_sigma"]], "store_path (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.store_path"]], "store_plot (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.store_plot"]], "style_sheet (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_wspace"]], "x_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.x_label"]], "x_range (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.x_range"]], "y_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.y_label"]], "y_range (aim2dat.plots.spectroscopy.spectrumplot property)": [[92, "aim2dat.plots.spectroscopy.SpectrumPlot.y_range"]], "surfaceplot (class in aim2dat.plots.surface)": [[93, "aim2dat.plots.surface.SurfacePlot"]], "add_surface_facet() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.add_surface_facet"]], "aim2dat.plots.surface": [[93, "module-aim2dat.plots.surface"]], "area_unit (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.area_unit"]], "auto_set_axis_properties() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.backend"]], "bulk_phase (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.bulk_phase"]], "create_default_gridspec() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_alpha"]], "custom_colors (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.custom_yticks"]], "data_labels (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.data_labels"]], "elemental_phases (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.elemental_phases"]], "energy_unit (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.energy_unit"]], "equal_aspect_ratio (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.equal_aspect_ratio"]], "import_from_pandas_df() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.import_from_pandas_df"]], "legend_bbox_to_anchor (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.legend_loc"]], "legend_ncol (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.legend_sort_entries"]], "plot() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.plot"]], "plot_grid (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.plot_grid"]], "plot_properties (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.plot_properties"]], "plot_type (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.plot_type"]], "ratio (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.ratio"]], "reset_gridspec() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.return_data_labels"]], "set_bulk_phase() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.set_bulk_phase"]], "set_elemental_phase() (aim2dat.plots.surface.surfaceplot method)": [[93, "aim2dat.plots.surface.SurfacePlot.set_elemental_phase"]], "show_colorbar (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.show_colorbar"]], "show_grid (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.show_grid"]], "show_legend (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.show_legend"]], "show_plot (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.show_plot"]], "store_path (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.store_path"]], "store_plot (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.store_plot"]], "style_sheet (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.subplot_wspace"]], "x_label (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.x_label"]], "x_range (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.x_range"]], "y_label (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.y_label"]], "y_range (aim2dat.plots.surface.surfaceplot property)": [[93, "aim2dat.plots.surface.SurfacePlot.y_range"]], "qhaplot (class in aim2dat.plots.thermal_properties)": [[94, "aim2dat.plots.thermal_properties.QHAPlot"]], "thermalpropertiesplot (class in aim2dat.plots.thermal_properties)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot"]], "aim2dat.plots.thermal_properties": [[94, "module-aim2dat.plots.thermal_properties"]], "auto_set_axis_properties() (aim2dat.plots.thermal_properties.qhaplot method)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.backend"]], "backend (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.backend"]], "create_default_gridspec() (aim2dat.plots.thermal_properties.qhaplot method)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_alpha"]], "custom_colors (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_colors"]], "custom_colors (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_markers"]], "custom_markers (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_yticks"]], "data_labels (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.data_labels"]], "data_labels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.equal_aspect_ratio"]], "import_qha_properties() (aim2dat.plots.thermal_properties.qhaplot method)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.import_qha_properties"]], "import_thermal_properties() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.import_thermal_properties"]], "legend_bbox_to_anchor (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.legend_loc"]], "legend_loc (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_loc"]], "legend_ncol (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_sort_entries"]], "plot() (aim2dat.plots.thermal_properties.qhaplot method)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.plot"]], "plot() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.plot"]], "plot_grid (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.plot_grid"]], "plot_grid (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.plot_grid"]], "plot_properties (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.plot_properties"]], "plot_properties (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.plot_properties"]], "ratio (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.ratio"]], "ratio (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.ratio"]], "reset_gridspec() (aim2dat.plots.thermal_properties.qhaplot method)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.thermal_properties.qhaplot method)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_colorbar"]], "show_grid (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.show_grid"]], "show_grid (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_grid"]], "show_legend (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.show_legend"]], "show_legend (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_legend"]], "show_plot (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.show_plot"]], "show_plot (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_plot"]], "store_path (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.store_path"]], "store_path (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.store_path"]], "store_plot (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.store_plot"]], "store_plot (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.store_plot"]], "style_sheet (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.style_sheet"]], "style_sheet (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_wspace"]], "x_label (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.x_label"]], "x_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.x_label"]], "x_range (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.x_range"]], "x_range (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.x_range"]], "y_label (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.y_label"]], "y_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.y_label"]], "y_range (aim2dat.plots.thermal_properties.qhaplot property)": [[94, "aim2dat.plots.thermal_properties.QHAPlot.y_range"]], "y_range (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[94, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.y_range"]], "c_rect_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[95, "aim2dat.strct.brillouin_zone_2d.C_RECT_LGS"]], "p_hex_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[95, "aim2dat.strct.brillouin_zone_2d.P_HEX_LGS"]], "p_obl_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[95, "aim2dat.strct.brillouin_zone_2d.P_OBL_LGS"]], "p_rect_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[95, "aim2dat.strct.brillouin_zone_2d.P_RECT_LGS"]], "p_squ_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[95, "aim2dat.strct.brillouin_zone_2d.P_SQU_LGS"]], "p_trig_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[95, "aim2dat.strct.brillouin_zone_2d.P_TRIG_LGS"]], "aim2dat.strct.brillouin_zone_2d": [[95, "module-aim2dat.strct.brillouin_zone_2d"]], "aim2dat.strct.ext_analysis.decorator": [[96, "module-aim2dat.strct.ext_analysis.decorator"]], "external_analysis_method() (in module aim2dat.strct.ext_analysis.decorator)": [[96, "aim2dat.strct.ext_analysis.decorator.external_analysis_method"]], "aim2dat.strct.ext_analysis.dscribe_descriptors": [[97, "module-aim2dat.strct.ext_analysis.dscribe_descriptors"]], "calculate_acsf_descriptor() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[97, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_acsf_descriptor"]], "calculate_interaction_matrix() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[97, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_interaction_matrix"]], "calculate_mbtr_descriptor() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[97, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_mbtr_descriptor"]], "calculate_soap_descriptor() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[97, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_soap_descriptor"]], "aim2dat.strct.ext_analysis.ffprint_order_p": [[98, "module-aim2dat.strct.ext_analysis.ffprint_order_p"]], "calculate_ffingerprint_order_p() (in module aim2dat.strct.ext_analysis.ffprint_order_p)": [[98, "aim2dat.strct.ext_analysis.ffprint_order_p.calculate_ffingerprint_order_p"]], "aim2dat.strct.ext_analysis.fragmentation": [[99, "module-aim2dat.strct.ext_analysis.fragmentation"]], "determine_molecular_fragments() (in module aim2dat.strct.ext_analysis.fragmentation)": [[99, "aim2dat.strct.ext_analysis.fragmentation.determine_molecular_fragments"]], "aim2dat.strct.ext_analysis.graphs": [[100, "module-aim2dat.strct.ext_analysis.graphs"]], "create_graph() (in module aim2dat.strct.ext_analysis.graphs)": [[100, "aim2dat.strct.ext_analysis.graphs.create_graph"]], "aim2dat.strct.ext_analysis": [[101, "module-aim2dat.strct.ext_analysis"]], "calculate_acsf_descriptor() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_acsf_descriptor"]], "calculate_ffingerprint_order_p() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_ffingerprint_order_p"]], "calculate_interaction_matrix() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_interaction_matrix"]], "calculate_mbtr_descriptor() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_mbtr_descriptor"]], "calculate_planes() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_planes"]], "calculate_prdf() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_prdf"]], "calculate_soap_descriptor() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_soap_descriptor"]], "calculate_warren_cowley_order_p() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.calculate_warren_cowley_order_p"]], "create_graph() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.create_graph"]], "determine_molecular_fragments() (in module aim2dat.strct.ext_analysis)": [[101, "aim2dat.strct.ext_analysis.determine_molecular_fragments"]], "aim2dat.strct.ext_analysis.planes": [[102, "module-aim2dat.strct.ext_analysis.planes"]], "calculate_planes() (in module aim2dat.strct.ext_analysis.planes)": [[102, "aim2dat.strct.ext_analysis.planes.calculate_planes"]], "aim2dat.strct.ext_analysis.prdf": [[103, "module-aim2dat.strct.ext_analysis.prdf"]], "calculate_prdf() (in module aim2dat.strct.ext_analysis.prdf)": [[103, "aim2dat.strct.ext_analysis.prdf.calculate_prdf"]], "aim2dat.strct.ext_analysis.warren_cowley_order_parameters": [[104, "module-aim2dat.strct.ext_analysis.warren_cowley_order_parameters"]], "calculate_warren_cowley_order_p() (in module aim2dat.strct.ext_analysis.warren_cowley_order_parameters)": [[104, "aim2dat.strct.ext_analysis.warren_cowley_order_parameters.calculate_warren_cowley_order_p"]], "add_functional_group() (in module aim2dat.strct.ext_manipulation.add_functional_group)": [[105, "aim2dat.strct.ext_manipulation.add_functional_group.add_functional_group"]], "aim2dat.strct.ext_manipulation.add_functional_group": [[105, "module-aim2dat.strct.ext_manipulation.add_functional_group"]], "add_structure_coord() (in module aim2dat.strct.ext_manipulation.add_structure)": [[106, "aim2dat.strct.ext_manipulation.add_structure.add_structure_coord"]], "add_structure_random() (in module aim2dat.strct.ext_manipulation.add_structure)": [[106, "aim2dat.strct.ext_manipulation.add_structure.add_structure_random"]], "aim2dat.strct.ext_manipulation.add_structure": [[106, "module-aim2dat.strct.ext_manipulation.add_structure"]], "cwd (in module aim2dat.strct.ext_manipulation.add_structure)": [[106, "aim2dat.strct.ext_manipulation.add_structure.cwd"]], "aim2dat.strct.ext_manipulation.decorator": [[107, "module-aim2dat.strct.ext_manipulation.decorator"]], "external_manipulation_method() (in module aim2dat.strct.ext_manipulation.decorator)": [[107, "aim2dat.strct.ext_manipulation.decorator.external_manipulation_method"]], "add_functional_group() (in module aim2dat.strct.ext_manipulation)": [[108, "aim2dat.strct.ext_manipulation.add_functional_group"]], "add_structure_coord() (in module aim2dat.strct.ext_manipulation)": [[108, "aim2dat.strct.ext_manipulation.add_structure_coord"]], "add_structure_random() (in module aim2dat.strct.ext_manipulation)": [[108, "aim2dat.strct.ext_manipulation.add_structure_random"]], "aim2dat.strct.ext_manipulation": [[108, "module-aim2dat.strct.ext_manipulation"]], "structure (class in aim2dat.strct)": [[109, "aim2dat.strct.Structure"]], "structurecollection (class in aim2dat.strct)": [[109, "aim2dat.strct.StructureCollection"]], "structureimporter (class in aim2dat.strct)": [[109, "aim2dat.strct.StructureImporter"]], "surfacegeneration (class in aim2dat.strct)": [[109, "aim2dat.strct.SurfaceGeneration"]], "add_chem_formula_constraint() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.add_chem_formula_constraint"]], "aim2dat.strct": [[109, "module-aim2dat.strct"]], "analysis_methods (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.analysis_methods"]], "append() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.append"]], "append_from_aiida_structuredata() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.append_from_aiida_structuredata"]], "append_from_ase_atoms() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.append_from_ase_atoms"]], "append_from_file() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.append_from_file"]], "append_from_mp_by_id() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.append_from_mp_by_id"]], "append_from_pymatgen_structure() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.append_from_pymatgen_structure"]], "append_structure() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.append_structure"]], "attribute_constraints (aim2dat.strct.structureimporter property)": [[109, "aim2dat.strct.StructureImporter.attribute_constraints"]], "attributes (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.attributes"]], "calculate_angle() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.calculate_angle"]], "calculate_coordination() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.calculate_ffingerprint"]], "calculate_voronoi_tessellation() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.calculate_voronoi_tessellation"]], "cell (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.cell"]], "cell_angles (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.cell_angles"]], "cell_lengths (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.cell_lengths"]], "cell_volume (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.cell_volume"]], "chem_formula (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.chem_formula"]], "chem_formula_constraints (aim2dat.strct.structureimporter property)": [[109, "aim2dat.strct.StructureImporter.chem_formula_constraints"]], "concentration_constraints (aim2dat.strct.structureimporter property)": [[109, "aim2dat.strct.StructureImporter.concentration_constraints"]], "copy() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.copy"]], "copy() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.copy"]], "create_pandas_df() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.create_pandas_df"]], "create_surface() (aim2dat.strct.surfacegeneration method)": [[109, "aim2dat.strct.SurfaceGeneration.create_surface"]], "delete_atoms() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.delete_atoms"]], "determine_point_group() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.determine_point_group"]], "determine_space_group() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.determine_space_group"]], "duplicate_structure() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.duplicate_structure"]], "elements (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.elements"]], "export_methods (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.export_methods"]], "extras (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.extras"]], "from_aiida_structuredata() (aim2dat.strct.structure class method)": [[109, "aim2dat.strct.Structure.from_aiida_structuredata"]], "from_ase_atoms() (aim2dat.strct.structure class method)": [[109, "aim2dat.strct.Structure.from_ase_atoms"]], "from_file() (aim2dat.strct.structure class method)": [[109, "aim2dat.strct.Structure.from_file"]], "from_pymatgen_structure() (aim2dat.strct.structure class method)": [[109, "aim2dat.strct.Structure.from_pymatgen_structure"]], "function_args (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.function_args"]], "generate_random_crystals() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.generate_random_crystals"]], "generate_surface_slabs() (aim2dat.strct.surfacegeneration method)": [[109, "aim2dat.strct.SurfaceGeneration.generate_surface_slabs"]], "get() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.get"]], "get_all_attribute_keys() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.get_all_attribute_keys"]], "get_all_elements() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.get_all_elements"]], "get_all_kinds() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.get_all_kinds"]], "get_all_structures() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.get_all_structures"]], "get_positions() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.get_positions"]], "get_structure() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.get_structure"]], "import_from_aiida_db() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.import_from_aiida_db"]], "import_from_hdf5_file() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.import_from_hdf5_file"]], "import_from_mp() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.import_from_mp"]], "import_from_optimade() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.import_from_optimade"]], "import_from_oqmd() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.import_from_oqmd"]], "import_from_pandas_df() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.import_from_pandas_df"]], "import_methods (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.import_methods"]], "index() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.index"]], "items() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.items"]], "iter_sites() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.iter_sites"]], "keys() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.keys"]], "kinds (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.kinds"]], "label (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.label"]], "labels (aim2dat.strct.structurecollection property)": [[109, "aim2dat.strct.StructureCollection.labels"]], "manipulation_methods (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.manipulation_methods"]], "neglect_elemental_structures (aim2dat.strct.structureimporter property)": [[109, "aim2dat.strct.StructureImporter.neglect_elemental_structures"]], "pbc (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.pbc"]], "perform_analysis() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.perform_analysis"]], "perform_manipulation() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.perform_manipulation"]], "pop() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.pop"]], "positions (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.positions"]], "remove_constraints() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.remove_constraints"]], "return_optimade_database_ids() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.return_optimade_database_ids"]], "scale_unit_cell() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.scale_unit_cell"]], "scaled_positions (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.scaled_positions"]], "set_attribute() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.set_attribute"]], "set_attribute_constraint() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.set_attribute_constraint"]], "set_concentration_constraint() (aim2dat.strct.structureimporter method)": [[109, "aim2dat.strct.StructureImporter.set_concentration_constraint"]], "set_positions() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.set_positions"]], "set_site_attribute() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.set_site_attribute"]], "site_attributes (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.site_attributes"]], "store_calculated_properties (aim2dat.strct.structure property)": [[109, "aim2dat.strct.Structure.store_calculated_properties"]], "store_in_aiida_db() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.store_in_aiida_db"]], "store_in_hdf5_file() (aim2dat.strct.structurecollection method)": [[109, "aim2dat.strct.StructureCollection.store_in_hdf5_file"]], "store_surfaces_in_aiida_db() (aim2dat.strct.surfacegeneration method)": [[109, "aim2dat.strct.SurfaceGeneration.store_surfaces_in_aiida_db"]], "structures (aim2dat.strct.structureimporter property)": [[109, "aim2dat.strct.StructureImporter.structures"]], "substitute_elements() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.substitute_elements"]], "to_aiida_structuredata() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.to_aiida_structuredata"]], "to_aiida_surfacedata() (aim2dat.strct.surfacegeneration method)": [[109, "aim2dat.strct.SurfaceGeneration.to_aiida_surfacedata"]], "to_ase_atoms() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.to_ase_atoms"]], "to_dict() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.to_dict"]], "to_file() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.to_file"]], "to_pymatgen_structure() (aim2dat.strct.structure method)": [[109, "aim2dat.strct.Structure.to_pymatgen_structure"]], "analysismixin (class in aim2dat.strct.mixin)": [[110, "aim2dat.strct.mixin.AnalysisMixin"]], "constrainterror": [[110, "aim2dat.strct.mixin.ConstraintError"]], "constrainterror.args (class in aim2dat.strct.mixin)": [[110, "aim2dat.strct.mixin.ConstraintError.args"]], "constraintsmixin (class in aim2dat.strct.mixin)": [[110, "aim2dat.strct.mixin.ConstraintsMixin"]], "manipulationmixin (class in aim2dat.strct.mixin)": [[110, "aim2dat.strct.mixin.ManipulationMixin"]], "add_chem_formula_constraint() (aim2dat.strct.mixin.constraintsmixin method)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.add_chem_formula_constraint"]], "aim2dat.strct.mixin": [[110, "module-aim2dat.strct.mixin"]], "analysis_method() (in module aim2dat.strct.mixin)": [[110, "aim2dat.strct.mixin.analysis_method"]], "analysis_methods (aim2dat.strct.mixin.analysismixin property)": [[110, "aim2dat.strct.mixin.AnalysisMixin.analysis_methods"]], "attribute_constraints (aim2dat.strct.mixin.constraintsmixin property)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.attribute_constraints"]], "calculate_angle() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.calculate_angle"]], "calculate_coordination() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.calculate_ffingerprint"]], "calculate_voronoi_tessellation() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.calculate_voronoi_tessellation"]], "chem_formula_constraints (aim2dat.strct.mixin.constraintsmixin property)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.chem_formula_constraints"]], "concentration_constraints (aim2dat.strct.mixin.constraintsmixin property)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.concentration_constraints"]], "delete_atoms() (aim2dat.strct.mixin.manipulationmixin method)": [[110, "aim2dat.strct.mixin.ManipulationMixin.delete_atoms"]], "determine_point_group() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.determine_point_group"]], "determine_space_group() (aim2dat.strct.mixin.analysismixin method)": [[110, "aim2dat.strct.mixin.AnalysisMixin.determine_space_group"]], "manipulates_structure() (in module aim2dat.strct.mixin)": [[110, "aim2dat.strct.mixin.manipulates_structure"]], "manipulation_methods (aim2dat.strct.mixin.manipulationmixin property)": [[110, "aim2dat.strct.mixin.ManipulationMixin.manipulation_methods"]], "neglect_elemental_structures (aim2dat.strct.mixin.constraintsmixin property)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.neglect_elemental_structures"]], "perform_manipulation() (aim2dat.strct.mixin.manipulationmixin method)": [[110, "aim2dat.strct.mixin.ManipulationMixin.perform_manipulation"]], "remove_constraints() (aim2dat.strct.mixin.constraintsmixin method)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.remove_constraints"]], "scale_unit_cell() (aim2dat.strct.mixin.manipulationmixin method)": [[110, "aim2dat.strct.mixin.ManipulationMixin.scale_unit_cell"]], "set_attribute_constraint() (aim2dat.strct.mixin.constraintsmixin method)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.set_attribute_constraint"]], "set_concentration_constraint() (aim2dat.strct.mixin.constraintsmixin method)": [[110, "aim2dat.strct.mixin.ConstraintsMixin.set_concentration_constraint"]], "substitute_elements() (aim2dat.strct.mixin.manipulationmixin method)": [[110, "aim2dat.strct.mixin.ManipulationMixin.substitute_elements"]], "with_traceback() (aim2dat.strct.mixin.constrainterror method)": [[110, "aim2dat.strct.mixin.ConstraintError.with_traceback"]], "aim2dat.strct.stability": [[111, "module-aim2dat.strct.stability"]], "structure (class in aim2dat.strct.strct)": [[112, "aim2dat.strct.strct.Structure"]], "aiida (in module aim2dat.strct.strct)": [[112, "aim2dat.strct.strct.aiida"]], "aim2dat.strct.strct": [[112, "module-aim2dat.strct.strct"]], "analysis_methods (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.analysis_methods"]], "attributes (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.attributes"]], "calculate_angle() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.calculate_angle"]], "calculate_coordination() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.calculate_ffingerprint"]], "calculate_voronoi_tessellation() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.calculate_voronoi_tessellation"]], "cell (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.cell"]], "cell_angles (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.cell_angles"]], "cell_lengths (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.cell_lengths"]], "cell_volume (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.cell_volume"]], "chem_formula (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.chem_formula"]], "copy() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.copy"]], "delete_atoms() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.delete_atoms"]], "determine_point_group() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.determine_point_group"]], "determine_space_group() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.determine_space_group"]], "elements (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.elements"]], "export_method() (in module aim2dat.strct.strct)": [[112, "aim2dat.strct.strct.export_method"]], "export_methods (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.export_methods"]], "extras (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.extras"]], "from_aiida_structuredata() (aim2dat.strct.strct.structure class method)": [[112, "aim2dat.strct.strct.Structure.from_aiida_structuredata"]], "from_ase_atoms() (aim2dat.strct.strct.structure class method)": [[112, "aim2dat.strct.strct.Structure.from_ase_atoms"]], "from_file() (aim2dat.strct.strct.structure class method)": [[112, "aim2dat.strct.strct.Structure.from_file"]], "from_pymatgen_structure() (aim2dat.strct.strct.structure class method)": [[112, "aim2dat.strct.strct.Structure.from_pymatgen_structure"]], "function_args (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.function_args"]], "get() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.get"]], "get_positions() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.get_positions"]], "import_method() (in module aim2dat.strct.strct)": [[112, "aim2dat.strct.strct.import_method"]], "import_methods (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.import_methods"]], "iter_sites() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.iter_sites"]], "keys() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.keys"]], "kinds (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.kinds"]], "label (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.label"]], "manipulation_methods (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.manipulation_methods"]], "pbc (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.pbc"]], "perform_analysis() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.perform_analysis"]], "perform_manipulation() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.perform_manipulation"]], "positions (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.positions"]], "pymatgen (in module aim2dat.strct.strct)": [[112, "aim2dat.strct.strct.pymatgen"]], "scale_unit_cell() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.scale_unit_cell"]], "scaled_positions (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.scaled_positions"]], "set_attribute() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.set_attribute"]], "set_positions() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.set_positions"]], "set_site_attribute() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.set_site_attribute"]], "site_attributes (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.site_attributes"]], "store_calculated_properties (aim2dat.strct.strct.structure property)": [[112, "aim2dat.strct.strct.Structure.store_calculated_properties"]], "substitute_elements() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.substitute_elements"]], "to_aiida_structuredata() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.to_aiida_structuredata"]], "to_ase_atoms() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.to_ase_atoms"]], "to_dict() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.to_dict"]], "to_file() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.to_file"]], "to_pymatgen_structure() (aim2dat.strct.strct.structure method)": [[112, "aim2dat.strct.strct.Structure.to_pymatgen_structure"]], "aim2dat.strct.strct_comparison": [[113, "module-aim2dat.strct.strct_comparison"]], "aim2dat.strct.strct_coordination": [[114, "module-aim2dat.strct.strct_coordination"]], "calculate_coordination() (in module aim2dat.strct.strct_coordination)": [[114, "aim2dat.strct.strct_coordination.calculate_coordination"]], "aim2dat.strct.strct_io": [[115, "module-aim2dat.strct.strct_io"]], "get_structure_from_file() (in module aim2dat.strct.strct_io)": [[115, "aim2dat.strct.strct_io.get_structure_from_file"]], "aim2dat.strct.strct_manipulation": [[116, "module-aim2dat.strct.strct_manipulation"]], "cwd (in module aim2dat.strct.strct_manipulation)": [[116, "aim2dat.strct.strct_manipulation.cwd"]], "delete_atoms() (in module aim2dat.strct.strct_manipulation)": [[116, "aim2dat.strct.strct_manipulation.delete_atoms"]], "scale_unit_cell() (in module aim2dat.strct.strct_manipulation)": [[116, "aim2dat.strct.strct_manipulation.scale_unit_cell"]], "substitute_elements() (in module aim2dat.strct.strct_manipulation)": [[116, "aim2dat.strct.strct_manipulation.substitute_elements"]], "aim2dat.strct.strct_misc": [[117, "module-aim2dat.strct.strct_misc"]], "calculate_angle() (in module aim2dat.strct.strct_misc)": [[117, "aim2dat.strct.strct_misc.calculate_angle"]], "calculate_dihedral_angle() (in module aim2dat.strct.strct_misc)": [[117, "aim2dat.strct.strct_misc.calculate_dihedral_angle"]], "calculate_distance() (in module aim2dat.strct.strct_misc)": [[117, "aim2dat.strct.strct_misc.calculate_distance"]], "aim2dat.strct.strct_point_groups": [[118, "module-aim2dat.strct.strct_point_groups"]], "determine_point_group() (in module aim2dat.strct.strct_point_groups)": [[118, "aim2dat.strct.strct_point_groups.determine_point_group"]], "aim2dat.strct.strct_prdf": [[119, "module-aim2dat.strct.strct_prdf"]], "calculate_ffingerprint() (in module aim2dat.strct.strct_prdf)": [[119, "aim2dat.strct.strct_prdf.calculate_ffingerprint"]], "aim2dat.strct.strct_space_groups": [[120, "module-aim2dat.strct.strct_space_groups"]], "determine_space_group() (in module aim2dat.strct.strct_space_groups)": [[120, "aim2dat.strct.strct_space_groups.determine_space_group"]], "aim2dat.strct.strct_super_cell": [[121, "module-aim2dat.strct.strct_super_cell"]], "calculate_voronoi_tessellation() (in module aim2dat.strct.strct_super_cell)": [[121, "aim2dat.strct.strct_super_cell.calculate_voronoi_tessellation"]], "aim2dat.strct.strct_validation": [[122, "module-aim2dat.strct.strct_validation"]], "structurecollection (class in aim2dat.strct.structure_collection)": [[123, "aim2dat.strct.structure_collection.StructureCollection"]], "aiida (in module aim2dat.strct.structure_collection)": [[123, "aim2dat.strct.structure_collection.aiida"]], "aim2dat.strct.structure_collection": [[123, "module-aim2dat.strct.structure_collection"]], "append() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.append"]], "append_from_aiida_structuredata() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.append_from_aiida_structuredata"]], "append_from_ase_atoms() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.append_from_ase_atoms"]], "append_from_file() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.append_from_file"]], "append_from_pymatgen_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.append_from_pymatgen_structure"]], "append_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.append_structure"]], "copy() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.copy"]], "create_pandas_df() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.create_pandas_df"]], "duplicate_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.duplicate_structure"]], "get_all_attribute_keys() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.get_all_attribute_keys"]], "get_all_elements() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.get_all_elements"]], "get_all_kinds() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.get_all_kinds"]], "get_all_structures() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.get_all_structures"]], "get_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.get_structure"]], "import_from_aiida_db() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.import_from_aiida_db"]], "import_from_hdf5_file() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.import_from_hdf5_file"]], "import_from_pandas_df() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.import_from_pandas_df"]], "index() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.index"]], "items() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.items"]], "labels (aim2dat.strct.structure_collection.structurecollection property)": [[123, "aim2dat.strct.structure_collection.StructureCollection.labels"]], "pop() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.pop"]], "pymatgen (in module aim2dat.strct.structure_collection)": [[123, "aim2dat.strct.structure_collection.pymatgen"]], "store_in_aiida_db() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.store_in_aiida_db"]], "store_in_hdf5_file() (aim2dat.strct.structure_collection.structurecollection method)": [[123, "aim2dat.strct.structure_collection.StructureCollection.store_in_hdf5_file"]], "structureimporter (class in aim2dat.strct.structure_importer)": [[124, "aim2dat.strct.structure_importer.StructureImporter"]], "add_chem_formula_constraint() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.add_chem_formula_constraint"]], "aim2dat.strct.structure_importer": [[124, "module-aim2dat.strct.structure_importer"]], "append_from_mp_by_id() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.append_from_mp_by_id"]], "attribute_constraints (aim2dat.strct.structure_importer.structureimporter property)": [[124, "aim2dat.strct.structure_importer.StructureImporter.attribute_constraints"]], "chem_formula_constraints (aim2dat.strct.structure_importer.structureimporter property)": [[124, "aim2dat.strct.structure_importer.StructureImporter.chem_formula_constraints"]], "concentration_constraints (aim2dat.strct.structure_importer.structureimporter property)": [[124, "aim2dat.strct.structure_importer.StructureImporter.concentration_constraints"]], "generate_random_crystals() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.generate_random_crystals"]], "import_from_mp() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.import_from_mp"]], "import_from_optimade() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.import_from_optimade"]], "import_from_oqmd() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.import_from_oqmd"]], "neglect_elemental_structures (aim2dat.strct.structure_importer.structureimporter property)": [[124, "aim2dat.strct.structure_importer.StructureImporter.neglect_elemental_structures"]], "remove_constraints() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.remove_constraints"]], "return_optimade_database_ids() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.return_optimade_database_ids"]], "set_attribute_constraint() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.set_attribute_constraint"]], "set_concentration_constraint() (aim2dat.strct.structure_importer.structureimporter method)": [[124, "aim2dat.strct.structure_importer.StructureImporter.set_concentration_constraint"]], "structures (aim2dat.strct.structure_importer.structureimporter property)": [[124, "aim2dat.strct.structure_importer.StructureImporter.structures"]], "structureoperations (class in aim2dat.strct.structure_operations)": [[125, "aim2dat.strct.structure_operations.StructureOperations"]], "aim2dat.strct.structure_operations": [[125, "module-aim2dat.strct.structure_operations"]], "analysis_methods (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.analysis_methods"]], "calculate_angle() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_angle"]], "calculate_coordination() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_ffingerprint"]], "calculate_stabilities() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_stabilities"]], "calculate_voronoi_tessellation() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.calculate_voronoi_tessellation"]], "chunksize (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.chunksize"]], "compare_sites_via_coordination() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.compare_sites_via_coordination"]], "compare_sites_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.compare_sites_via_ffingerprint"]], "compare_structures() (in module aim2dat.strct.structure_operations)": [[125, "aim2dat.strct.structure_operations.compare_structures"]], "compare_structures_via_comp_sym() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.compare_structures_via_comp_sym"]], "compare_structures_via_direct_comp() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.compare_structures_via_direct_comp"]], "compare_structures_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.compare_structures_via_ffingerprint"]], "copy() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.copy"]], "delete_atoms() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.delete_atoms"]], "determine_point_group() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.determine_point_group"]], "determine_space_group() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.determine_space_group"]], "find_duplicates_via_comp_sym() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.find_duplicates_via_comp_sym"]], "find_duplicates_via_direct_comp() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.find_duplicates_via_direct_comp"]], "find_duplicates_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.find_duplicates_via_ffingerprint"]], "find_eq_sites_via_coordination() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.find_eq_sites_via_coordination"]], "find_eq_sites_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.find_eq_sites_via_ffingerprint"]], "manipulation_methods (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.manipulation_methods"]], "n_procs (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.n_procs"]], "output_format (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.output_format"]], "perform_analysis() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.perform_analysis"]], "perform_manipulation() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.perform_manipulation"]], "scale_unit_cell() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.scale_unit_cell"]], "structure_wrapper() (in module aim2dat.strct.structure_operations)": [[125, "aim2dat.strct.structure_operations.structure_wrapper"]], "structures (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.structures"]], "substitute_elements() (aim2dat.strct.structure_operations.structureoperations method)": [[125, "aim2dat.strct.structure_operations.StructureOperations.substitute_elements"]], "supported_output_formats (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.supported_output_formats"]], "verbose (aim2dat.strct.structure_operations.structureoperations property)": [[125, "aim2dat.strct.structure_operations.StructureOperations.verbose"]], "surfacegeneration (class in aim2dat.strct.surface)": [[126, "aim2dat.strct.surface.SurfaceGeneration"]], "aim2dat.strct.surface": [[126, "module-aim2dat.strct.surface"]], "create_surface() (aim2dat.strct.surface.surfacegeneration method)": [[126, "aim2dat.strct.surface.SurfaceGeneration.create_surface"]], "generate_surface_slabs() (aim2dat.strct.surface.surfacegeneration method)": [[126, "aim2dat.strct.surface.SurfaceGeneration.generate_surface_slabs"]], "store_surfaces_in_aiida_db() (aim2dat.strct.surface.surfacegeneration method)": [[126, "aim2dat.strct.surface.SurfaceGeneration.store_surfaces_in_aiida_db"]], "to_aiida_surfacedata() (aim2dat.strct.surface.surfacegeneration method)": [[126, "aim2dat.strct.surface.SurfaceGeneration.to_aiida_surfacedata"]], "space_group_hn_to_layer_group (in module aim2dat.strct.surface_utils)": [[127, "aim2dat.strct.surface_utils.SPACE_GROUP_HN_TO_LAYER_GROUP"]], "aim2dat.strct.surface_utils": [[127, "module-aim2dat.strct.surface_utils"]], "aim2dat.utils.chem_formula": [[128, "module-aim2dat.utils.chem_formula"]], "compare_formulas() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.compare_formulas"]], "reduce_formula() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.reduce_formula"]], "transform_dict_to_latexstr() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.transform_dict_to_latexstr"]], "transform_dict_to_str() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.transform_dict_to_str"]], "transform_list_to_dict() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.transform_list_to_dict"]], "transform_list_to_str() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.transform_list_to_str"]], "transform_str_to_dict() (in module aim2dat.utils.chem_formula)": [[128, "aim2dat.utils.chem_formula.transform_str_to_dict"]], "aim2dat.utils.dict_tools": [[129, "module-aim2dat.utils.dict_tools"]], "dict_create_tree() (in module aim2dat.utils.dict_tools)": [[129, "aim2dat.utils.dict_tools.dict_create_tree"]], "dict_merge() (in module aim2dat.utils.dict_tools)": [[129, "aim2dat.utils.dict_tools.dict_merge"]], "dict_retrieve_parameter() (in module aim2dat.utils.dict_tools)": [[129, "aim2dat.utils.dict_tools.dict_retrieve_parameter"]], "dict_set_parameter() (in module aim2dat.utils.dict_tools)": [[129, "aim2dat.utils.dict_tools.dict_set_parameter"]], "aim2dat.utils.element_properties": [[130, "module-aim2dat.utils.element_properties"]], "element_groups (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.element_groups"], [130, "id0"]], "get_atomic_mass() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_atomic_mass"]], "get_atomic_number() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_atomic_number"]], "get_atomic_radius() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_atomic_radius"]], "get_electronegativity() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_electronegativity"]], "get_element_groups() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_element_groups"]], "get_element_symbol() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_element_symbol"]], "get_group() (in module aim2dat.utils.element_properties)": [[130, "aim2dat.utils.element_properties.get_group"]], "aim2dat.utils": [[131, "module-aim2dat.utils"]], "aim2dat.utils.maths": [[132, "module-aim2dat.utils.maths"]], "calc_angle() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.calc_angle"]], "calc_circular_segment_area() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.calc_circular_segment_area"]], "calc_plane_equation() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.calc_plane_equation"]], "calc_polygon_area() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.calc_polygon_area"]], "calc_reflection_matrix() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.calc_reflection_matrix"]], "calc_solid_angle() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.calc_solid_angle"]], "gaussian_function() (in module aim2dat.utils.maths)": [[132, "aim2dat.utils.maths.gaussian_function"]], "max_str_length (in module aim2dat.utils.print)": [[133, "aim2dat.utils.print.MAX_STR_LENGTH"]], "aim2dat.utils.print": [[133, "module-aim2dat.utils.print"]], "aim2dat.utils.space_groups": [[134, "module-aim2dat.utils.space_groups"]], "get_crystal_system() (in module aim2dat.utils.space_groups)": [[134, "aim2dat.utils.space_groups.get_crystal_system"]], "get_lattice_type() (in module aim2dat.utils.space_groups)": [[134, "aim2dat.utils.space_groups.get_lattice_type"]], "get_space_group_details() (in module aim2dat.utils.space_groups)": [[134, "aim2dat.utils.space_groups.get_space_group_details"]], "transform_to_nr() (in module aim2dat.utils.space_groups)": [[134, "aim2dat.utils.space_groups.transform_to_nr"]], "transform_to_str() (in module aim2dat.utils.space_groups)": [[134, "aim2dat.utils.space_groups.transform_to_str"]], "energy (class in aim2dat.utils.units)": [[135, "aim2dat.utils.units.Energy"]], "frequency (class in aim2dat.utils.units)": [[135, "aim2dat.utils.units.Frequency"]], "length (class in aim2dat.utils.units)": [[135, "aim2dat.utils.units.Length"]], "unitconverter (class in aim2dat.utils.units)": [[135, "aim2dat.utils.units.UnitConverter"]], "wavevector (class in aim2dat.utils.units)": [[135, "aim2dat.utils.units.Wavevector"]], "aim2dat.utils.units": [[135, "module-aim2dat.utils.units"]], "available_units (aim2dat.utils.units.energy property)": [[135, "aim2dat.utils.units.Energy.available_units"]], "available_units (aim2dat.utils.units.frequency property)": [[135, "aim2dat.utils.units.Frequency.available_units"]], "available_units (aim2dat.utils.units.length property)": [[135, "aim2dat.utils.units.Length.available_units"]], "available_units (aim2dat.utils.units.unitconverter attribute)": [[135, "aim2dat.utils.units.UnitConverter.available_units"]], "available_units (aim2dat.utils.units.wavevector property)": [[135, "aim2dat.utils.units.Wavevector.available_units"]], "convert_units() (aim2dat.utils.units.unitconverter class method)": [[135, "aim2dat.utils.units.UnitConverter.convert_units"]], "energy (in module aim2dat.utils.units)": [[135, "aim2dat.utils.units.energy"]], "frequency (in module aim2dat.utils.units)": [[135, "aim2dat.utils.units.frequency"]], "get_unit() (aim2dat.utils.units.energy method)": [[135, "aim2dat.utils.units.Energy.get_unit"]], "get_unit() (aim2dat.utils.units.frequency method)": [[135, "aim2dat.utils.units.Frequency.get_unit"]], "get_unit() (aim2dat.utils.units.length method)": [[135, "aim2dat.utils.units.Length.get_unit"]], "get_unit() (aim2dat.utils.units.wavevector method)": [[135, "aim2dat.utils.units.Wavevector.get_unit"]], "length (in module aim2dat.utils.units)": [[135, "aim2dat.utils.units.length"]], "plot_labels (aim2dat.utils.units.unitconverter attribute)": [[135, "aim2dat.utils.units.UnitConverter.plot_labels"]], "wavevector (in module aim2dat.utils.units)": [[135, "aim2dat.utils.units.wavevector"]]}, "docurls": ["aim2dat/index.html", "api-aiida_processes.html", "autoapi/aim2dat/aiida_data/gaussian_cube_data/index.html", "autoapi/aim2dat/aiida_data/index.html", "autoapi/aim2dat/aiida_data/surface_data/index.html", "autoapi/aim2dat/aiida_workflows/_workflow_builder_utils/index.html", "autoapi/aim2dat/aiida_workflows/chargemol/calcjobs/index.html", "autoapi/aim2dat/aiida_workflows/chargemol/index.html", "autoapi/aim2dat/aiida_workflows/chargemol/parsers/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/auxiliary_functions/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/band_structure_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/calcjobs/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/cell_opt_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/combined_work_chains/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_handlers/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_inputs/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_opt/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_scf/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/cube_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/eigenvalues_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/el_properties_utils/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/find_scf_p_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/geo_opt_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/parsers/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/partial_charges_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/pdos_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/planar_fields_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/surface_opt_utils/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/work_chain_specs/index.html", "autoapi/aim2dat/aiida_workflows/critic2/calcjobs/index.html", "autoapi/aim2dat/aiida_workflows/critic2/index.html", "autoapi/aim2dat/aiida_workflows/critic2/parsers/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/enum_calcjob/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/enum_parsers/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/utils/index.html", "autoapi/aim2dat/aiida_workflows/index.html", "autoapi/aim2dat/aiida_workflows/utils/index.html", "autoapi/aim2dat/aiida_workflows/workflow_builder/index.html", "autoapi/aim2dat/ext_interfaces/aiida/index.html", "autoapi/aim2dat/ext_interfaces/ase_atoms/index.html", "autoapi/aim2dat/ext_interfaces/ase_surface/index.html", "autoapi/aim2dat/ext_interfaces/dscribe/index.html", "autoapi/aim2dat/ext_interfaces/graphs/index.html", "autoapi/aim2dat/ext_interfaces/hdf5/index.html", "autoapi/aim2dat/ext_interfaces/import_opt_dependencies/index.html", "autoapi/aim2dat/ext_interfaces/index.html", "autoapi/aim2dat/ext_interfaces/mp/index.html", "autoapi/aim2dat/ext_interfaces/mp_openapi/index.html", "autoapi/aim2dat/ext_interfaces/optimade/index.html", "autoapi/aim2dat/ext_interfaces/oqmd/index.html", "autoapi/aim2dat/ext_interfaces/pandas/index.html", "autoapi/aim2dat/ext_interfaces/phonopy/index.html", "autoapi/aim2dat/ext_interfaces/pymatgen/index.html", "autoapi/aim2dat/ext_interfaces/pyxtal/index.html", "autoapi/aim2dat/ext_interfaces/seekpath/index.html", "autoapi/aim2dat/ext_interfaces/spglib/index.html", "autoapi/aim2dat/fct/discretization/index.html", "autoapi/aim2dat/fct/fingerprint/index.html", "autoapi/aim2dat/fct/function_comparison/index.html", "autoapi/aim2dat/fct/hull/index.html", "autoapi/aim2dat/fct/index.html", "autoapi/aim2dat/fct/smearing/index.html", "autoapi/aim2dat/index.html", "autoapi/aim2dat/io/cif/index.html", "autoapi/aim2dat/io/cp2k/bands_dos/index.html", "autoapi/aim2dat/io/cp2k/index.html", "autoapi/aim2dat/io/cp2k/restart/index.html", "autoapi/aim2dat/io/cp2k/stdout/index.html", "autoapi/aim2dat/io/critic2/index.html", "autoapi/aim2dat/io/fhi_aims/index.html", "autoapi/aim2dat/io/index.html", "autoapi/aim2dat/io/phonopy/index.html", "autoapi/aim2dat/io/qe/index.html", "autoapi/aim2dat/io/utils/index.html", "autoapi/aim2dat/io/xmgrace/index.html", "autoapi/aim2dat/io/yaml/index.html", "autoapi/aim2dat/io/zeo/index.html", "autoapi/aim2dat/ml/cell_grid_search/index.html", "autoapi/aim2dat/ml/index.html", "autoapi/aim2dat/ml/kernels/index.html", "autoapi/aim2dat/ml/metrics/index.html", "autoapi/aim2dat/ml/transformers/index.html", "autoapi/aim2dat/ml/utils/index.html", "autoapi/aim2dat/plots/band_structure_dos/index.html", "autoapi/aim2dat/plots/index.html", "autoapi/aim2dat/plots/partial_charges/index.html", "autoapi/aim2dat/plots/partial_rdf/index.html", "autoapi/aim2dat/plots/phase/index.html", "autoapi/aim2dat/plots/planar_fields/index.html", "autoapi/aim2dat/plots/simple_plot/index.html", "autoapi/aim2dat/plots/spectroscopy/index.html", "autoapi/aim2dat/plots/surface/index.html", "autoapi/aim2dat/plots/thermal_properties/index.html", "autoapi/aim2dat/strct/brillouin_zone_2d/index.html", "autoapi/aim2dat/strct/ext_analysis/decorator/index.html", "autoapi/aim2dat/strct/ext_analysis/dscribe_descriptors/index.html", "autoapi/aim2dat/strct/ext_analysis/ffprint_order_p/index.html", "autoapi/aim2dat/strct/ext_analysis/fragmentation/index.html", "autoapi/aim2dat/strct/ext_analysis/graphs/index.html", "autoapi/aim2dat/strct/ext_analysis/index.html", "autoapi/aim2dat/strct/ext_analysis/planes/index.html", "autoapi/aim2dat/strct/ext_analysis/prdf/index.html", "autoapi/aim2dat/strct/ext_analysis/warren_cowley_order_parameters/index.html", "autoapi/aim2dat/strct/ext_manipulation/add_functional_group/index.html", "autoapi/aim2dat/strct/ext_manipulation/add_structure/index.html", "autoapi/aim2dat/strct/ext_manipulation/decorator/index.html", "autoapi/aim2dat/strct/ext_manipulation/index.html", "autoapi/aim2dat/strct/index.html", "autoapi/aim2dat/strct/mixin/index.html", "autoapi/aim2dat/strct/stability/index.html", "autoapi/aim2dat/strct/strct/index.html", "autoapi/aim2dat/strct/strct_comparison/index.html", "autoapi/aim2dat/strct/strct_coordination/index.html", "autoapi/aim2dat/strct/strct_io/index.html", "autoapi/aim2dat/strct/strct_manipulation/index.html", "autoapi/aim2dat/strct/strct_misc/index.html", "autoapi/aim2dat/strct/strct_point_groups/index.html", "autoapi/aim2dat/strct/strct_prdf/index.html", "autoapi/aim2dat/strct/strct_space_groups/index.html", "autoapi/aim2dat/strct/strct_super_cell/index.html", "autoapi/aim2dat/strct/strct_validation/index.html", "autoapi/aim2dat/strct/structure_collection/index.html", "autoapi/aim2dat/strct/structure_importer/index.html", "autoapi/aim2dat/strct/structure_operations/index.html", "autoapi/aim2dat/strct/surface/index.html", "autoapi/aim2dat/strct/surface_utils/index.html", "autoapi/aim2dat/utils/chem_formula/index.html", "autoapi/aim2dat/utils/dict_tools/index.html", "autoapi/aim2dat/utils/element_properties/index.html", "autoapi/aim2dat/utils/index.html", "autoapi/aim2dat/utils/maths/index.html", "autoapi/aim2dat/utils/print/index.html", "autoapi/aim2dat/utils/space_groups/index.html", "autoapi/aim2dat/utils/units/index.html", "changelog.html", "examples.html", "examples/fct-discretization.html", "examples/fct-fingerprint_comparison.html", "examples/plots-band_structure_and_pdos_cp2k.html", "examples/plots-band_structure_and_pdos_fhi-aims.html", "examples/plots-band_structure_and_pdos_phonopy.html", "examples/plots-band_structure_and_pdos_qe.html", "examples/plots-band_structure_materials_project.html", "examples/plots-partial_charges_critic2.html", "examples/plots-planar_fields_critic2.html", "examples/plots-simple_plot.html", "examples/plots-spectroscopy.html", "examples/strct-coordination_number_analysis.html", "examples/strct-odb_interfaces.html", "examples/strct-partial_rdf.html", "fa-overview.html", "htw-cp2k_calculations.html", "htw-overview.html", "htw-workflow_builders.html", "index.html", "inst_linux.html", "inst_windows.html", "installation.html", "ml-overview.html", "ml-scikit_learn.html", "plots-overview.html", "plots-properties_and_functions.html", "plots-simple_plot.html", "plots-subplots.html", "stra-multiple_structures.html", "stra-overview.html", "stra-structure.html", "stra-structure_importer.html", "stra-surfaces.html", "user_guide.html"]})