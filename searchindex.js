Search.setIndex({"titles": ["AiiDA Processes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_data.gaussian_cube_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_data.surface_data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows._workflow_builder_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.chargemol.calcjobs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.chargemol</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.chargemol.parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.auxiliary_functions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.band_structure_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.calcjobs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.cell_opt_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.combined_work_chains</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_handlers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_inputs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_opt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.core_work_chain_scf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.cube_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.el_properties_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.geo_opt_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.partial_charges_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.pdos_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.planar_fields_work_chain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.surface_opt_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.cp2k.work_chain_specs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.critic2.calcjobs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.critic2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.critic2.parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib.enum_calcjob</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib.enum_parsers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.enumlib.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.aiida_workflows.workflow_builder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.aiida</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.ase_atoms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.ase_surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.dscribe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.graphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.hdf5</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.import_opt_dependencies</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.mp</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.mp_openapi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.optimade</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.oqmd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.pandas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.phonopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.pymatgen</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.pyxtal</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.seekpath</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ext_interfaces.spglib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.discretization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.fingerprint</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.function_comparison</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.hull</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.fct.smearing</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cif</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k.bands_dos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k.restart</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.cp2k.stdout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.critic2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.fhi_aims</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.phonopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.qe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.xmgrace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.yaml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.io.zeo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.cell_grid_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.kernels</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.metrics</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.transformers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.ml.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.band_structure_dos</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.partial_charges</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.partial_rdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.phase</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.planar_fields</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.simple_plot</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.spectroscopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.plots.thermal_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.brillouin_zone_2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.dscribe_descriptors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.ffprint_order_p</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.fragmentation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.graphs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.planes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.prdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_analysis.warren_cowley_order_parameters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation.add_functional_group</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation.add_structure</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation.decorator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.ext_manipulation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.mixin</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.stability</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_comparison</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_coordination</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_io</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_manipulation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_misc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_point_groups</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_prdf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_space_groups</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_super_cell</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.strct_validation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.structure_collection</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.structure_importer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.structure_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.strct.surface_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.chem_formula</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.dict_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.element_properties</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.maths</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.print</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.space_groups</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aim2dat.utils.units</span></code>", "Changelog", "Example List", "Creating a discretized grid to analyse functions", "Comparing two functions on a discretized grid", "Plotting the band structure and projected density of states (pDOS) from CP2K output-files", "Plotting the band structure and projected density of states (pDOS) from FHI-aims output files", "Plotting the band structure, projected density of states (pDOS) and thermal properties from phonopy output-files", "Plotting the band structure and projected density of states (pDOS) from Quantum ESPRESSO output-files", "Plotting the band structure and projected density of states (pDOS) from Materials Project", "Plotting atomic partial charges from Critic2 output-files", "Plotting planar fields from Critic2 output files", "Using the <code class=\"docutils literal notranslate\"><span class=\"pre\">SimplePlot</span></code> class as a flexible plotting framework", "How to use the plots package to plot a x-ray absorption spectrum", "Calculating the coordination numbers for different atomic sites", "Querying the structure pool for the Cs-Te binary system", "Calculating the F-Fingerprint to compare crystal structures", "Function Analysis", "Running high-throughput calculations using CP2K", "High-throughput Workflows", "Handling complex workflows using the workflow builders", "aim2dat Documentation", "Linux operating systems", "Windows operating systems", "Overview and Package Dependencies", "Machine Learning", "Scikit-learn integration", "Plots", "Common features", "Plotting with the <code class=\"docutils literal notranslate\"><span class=\"pre\">SimplePlot</span></code> class", "Subplots and grids", "Handling multiple structures at once", "Structural Analysis", "Representation of molecules and crystals", "Interfaces to online databases and random crystal generation", "Creating surfaces from bulk crystals", "Overview"], "terms": {"input": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 38, 66, 73, 76, 77, 78, 82, 83, 84, 85, 90, 91, 92, 121, 128, 131, 134, 135, 138, 140, 142, 145, 147, 152, 159, 162, 165, 166, 167, 168], "output": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 42, 64, 65, 66, 68, 69, 70, 72, 73, 76, 82, 93, 96, 100, 108, 111, 124, 127, 128, 134, 135, 136, 143, 152, 155, 161, 165, 167, 169], "paramet": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 37, 38, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 121, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 137, 139, 140, 142, 144, 145, 148, 152, 159, 160, 164, 167, 168, 169], "all": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 35, 38, 64, 72, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 102, 105, 107, 108, 109, 111, 113, 115, 122, 123, 124, 125, 129, 134, 135, 140, 142, 144, 145, 146, 148, 149, 153, 154, 157, 158, 159, 163, 165, 166, 167, 168, 169], "work": [0, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 28, 37, 38, 60, 82, 84, 85, 135, 136, 153, 154, 155, 157, 158, 165, 166], "chain": [0, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26, 28, 37, 38, 137, 153, 154, 155], "calcul": [0, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 38, 42, 58, 59, 61, 66, 67, 70, 72, 73, 78, 82, 84, 85, 86, 88, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 113, 116, 118, 120, 122, 124, 131, 135, 136, 138, 140, 142, 144, 149, 151, 153, 154, 155, 158, 159, 160, 165, 167, 169], "job": [0, 5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 66, 67, 82, 96, 100, 152, 155], "calcjob": [0, 6, 7, 22, 23, 30, 31, 32, 33, 153], "chargemolcalcul": [0, 5, 24], "sourc": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 37, 38, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 149, 155, 156], "softwar": [0, 5, 6, 7, 10, 22, 29, 30, 31, 34], "packag": [0, 5, 6, 7, 10, 22, 29, 30, 31, 34, 42, 54, 63, 82, 96, 111, 135, 136, 139, 140, 141, 142, 144, 145, 148, 149, 151, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 169], "charge_density_filenam": 0, "option": [0, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 45, 64, 66, 68, 70, 76, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 128, 129, 133, 140, 142, 144, 151, 165], "name": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 35, 72, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 111, 122, 129, 133, 139, 140, 142, 146, 147, 153, 154, 157, 162, 165, 167], "cube": [0, 1, 17, 152], "file": [0, 1, 3, 5, 10, 17, 29, 32, 33, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 111, 114, 122, 135, 136, 138, 143, 148, 151, 152, 154, 155, 158, 161, 162, 165, 167], "contain": [0, 1, 5, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 32, 37, 38, 57, 61, 65, 66, 67, 68, 70, 71, 72, 73, 75, 82, 83, 84, 85, 86, 88, 96, 100, 102, 103, 105, 107, 108, 109, 111, 122, 123, 124, 125, 129, 131, 133, 134, 137, 139, 140, 142, 144, 147, 149, 152, 154, 159, 165, 167, 169], "valenc": [0, 8, 84, 85, 86, 139, 140, 142, 144], "densiti": [0, 25, 26, 65, 66, 70, 72, 73, 82, 84, 85, 96, 100, 108, 123, 136, 145, 152, 155, 160, 161], "system": [0, 11, 20, 85, 88, 108, 123, 124, 133, 136, 139, 141, 142, 153, 158, 168, 169], "charge_density_fold": 0, "requir": [0, 7, 23, 28, 31, 33, 151], "folder": [0, 5, 7, 10, 23, 29, 31, 32, 33, 65, 66, 67, 70, 72, 73, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 142, 154, 155], "carg": 0, "code": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 66, 153, 155, 161], "The": [0, 1, 3, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 57, 58, 59, 61, 70, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 127, 128, 129, 133, 135, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169], "us": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 46, 48, 57, 60, 61, 72, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 104, 105, 107, 108, 109, 111, 122, 123, 124, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "thi": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 57, 60, 61, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 104, 107, 108, 109, 111, 122, 123, 124, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 169], "i": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 37, 38, 57, 58, 61, 62, 66, 67, 70, 75, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 127, 129, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "unless": [0, 1, 3], "remote_fold": [0, 12], "specifi": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 61, 62, 72, 85, 88, 98, 99, 100, 104, 105, 107, 108, 109, 111, 123, 124, 137, 141, 145, 147, 148, 149, 151, 165, 167], "which": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 32, 38, 57, 61, 82, 84, 85, 96, 100, 104, 105, 107, 108, 109, 111, 124, 131, 135, 137, 144, 145, 149, 151, 154, 155, 159, 162, 163, 165, 168, 169], "mean": [0, 5, 10, 29, 32, 124, 137, 144, 159, 168], "an": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 61, 74, 78, 82, 84, 85, 96, 98, 100, 101, 104, 105, 107, 108, 109, 111, 120, 122, 123, 124, 137, 139, 140, 142, 145, 146, 148, 149, 152, 153, 154, 155, 159, 160, 162, 163, 165, 166, 167, 168, 169], "exist": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 85, 88, 120], "being": [0, 1, 3, 7, 23, 31, 33, 66, 68, 85, 87, 167], "import": [0, 5, 10, 29, 32, 38, 39, 44, 59, 61, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 111, 122, 123, 124, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 154, 155, 159, 162, 164, 165, 167, 168, 169], "actual": [0, 7, 23, 31, 33, 149, 151, 165], "run": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 37, 38, 66, 67, 149, 153, 154, 155, 159], "kind_info": 0, "list": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 57, 59, 60, 61, 66, 67, 70, 72, 74, 75, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 111, 114, 115, 120, 122, 123, 124, 125, 127, 128, 131, 133, 134, 137, 139, 141, 142, 144, 145, 147, 153, 154, 159, 164, 165, 167, 168], "atom": [0, 1, 3, 9, 11, 12, 17, 18, 21, 24, 26, 40, 65, 66, 70, 72, 73, 78, 82, 84, 85, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 115, 116, 118, 122, 123, 124, 129, 135, 136, 139, 140, 142, 145, 149, 152, 155, 158, 160, 161, 165, 167], "number": [0, 1, 3, 8, 9, 11, 17, 18, 20, 21, 24, 25, 26, 37, 72, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 103, 104, 105, 107, 108, 109, 111, 113, 122, 123, 124, 125, 127, 129, 131, 133, 135, 136, 139, 140, 142, 144, 149, 152, 154, 159, 160, 162, 164, 165, 167, 168, 169], "core": [0, 13, 14, 16, 28, 82, 96, 100, 108, 111, 122, 154, 158], "electron": [0, 8, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 84, 85, 86, 108, 123, 144, 145, 152, 155, 161], "metadata": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 82], "namespac": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "port": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38], "call_link_label": 0, "label": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 58, 59, 61, 72, 75, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 104, 105, 107, 108, 109, 111, 122, 124, 125, 129, 135, 138, 142, 145, 147, 148, 149, 152, 161, 162, 163, 165, 167, 169], "call": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 137, 147, 152, 154, 163, 165, 166, 167, 169], "link": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 162], "anoth": [0, 1, 3, 38, 115, 134, 140, 142, 165, 167], "comput": [0, 1, 3, 58, 153, 159], "when": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 82, 84, 85, 96, 100, 153, 165], "local": [0, 140, 142], "set": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 72, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 108, 109, 111, 122, 123, 124, 125, 127, 128, 129, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 146, 148, 149, 151, 152, 155, 161, 165, 167, 168, 169], "should": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 57, 61, 78, 82, 83, 84, 85, 97, 100, 102, 108, 109, 111, 124, 150, 153, 155, 158, 162, 165, 167], "descript": [0, 1, 3, 108, 122, 125, 139, 140, 141, 143, 152, 154, 160, 162], "node": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 84, 85, 86, 88, 108, 111, 122, 125, 169], "dry_run": 0, "true": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 60, 64, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 100, 102, 108, 109, 111, 122, 123, 124, 125, 127, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 159, 164, 165, 167, 168, 169], "prepar": [0, 5, 10, 29, 32, 85], "submiss": [0, 5, 29, 37], "launch": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "account": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 83, 84, 85], "queue": [0, 38, 154], "remot": 0, "additional_retrieve_list": 0, "rel": [0, 1, 3, 82, 84, 85, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 148, 159], "path": [0, 1, 3, 5, 7, 9, 10, 23, 29, 31, 32, 33, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 108, 111, 122, 128, 138, 139, 140, 141, 142, 154, 158, 162], "retriev": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 78, 108, 111, 128, 129, 143, 152, 155, 158, 165], "addit": [0, 1, 3, 11, 12, 21, 27, 72, 82, 85, 88, 91, 108, 111, 122, 137, 139, 141, 142, 144, 146, 151, 154, 155, 158, 165, 167, 168], "what": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "plugin": [0, 2, 5, 10, 29, 32, 153, 154], "append_text": 0, "specif": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 32, 38, 85, 108, 111, 135, 147, 152, 154, 159, 161, 162, 163, 164, 167, 168, 169], "append": [0, 108, 111, 122, 123, 145, 165], "text": [0, 1, 3, 85, 89], "go": 0, "schedul": [0, 5, 10, 29, 32], "script": [0, 5, 10, 29, 32], "just": [0, 84, 85, 140, 154], "after": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 27, 29, 32, 37, 157], "execut": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 155], "custom_scheduler_command": 0, "possibli": [0, 159], "multilin": 0, "string": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 61, 62, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 105, 107, 108, 109, 111, 122, 123, 127, 133, 135, 137, 147, 149, 155, 162, 165, 167, 168], "command": [0, 5, 10, 17, 29, 32, 155, 156, 158], "user": [0, 1, 3, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 38, 82, 108, 109, 111, 124, 153, 154, 159, 162, 166], "want": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 149, 162], "manual": [0, 162], "differ": [0, 7, 12, 23, 31, 33, 57, 60, 61, 62, 72, 78, 82, 84, 85, 97, 99, 100, 102, 108, 109, 111, 124, 129, 136, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169], "respect": [0, 85, 88, 92, 98, 99, 100, 104, 105, 107, 108, 109, 111, 123, 124, 135, 139, 140, 142, 148, 149, 165, 166, 167, 169], "prepend_text": 0, "posit": [0, 1, 3, 11, 12, 21, 75, 84, 85, 90, 91, 104, 105, 107, 108, 109, 111, 116, 122, 124, 135, 145, 148, 152, 164, 165, 167, 169], "where": [0, 7, 9, 11, 17, 18, 20, 21, 23, 24, 25, 26, 31, 33, 149, 159, 162], "insert": 0, "befor": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 84, 85, 127, 137, 140, 142, 145, 155, 159, 165, 168, 169], "ani": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 145, 153, 154, 159], "non": [0, 3, 84, 85, 108, 109, 111, 124, 139, 141, 142, 148, 167, 169], "environment_vari": 0, "dictionari": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 64, 65, 66, 67, 68, 70, 72, 73, 75, 82, 84, 85, 86, 87, 100, 102, 103, 108, 109, 111, 122, 123, 124, 125, 127, 128, 135, 138, 139, 140, 142, 143, 144, 147, 154, 165, 167, 169], "custom": [0, 23, 36, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 122, 131, 137, 152, 159, 163], "environ": [0, 82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 135, 143, 156, 158], "variabl": [0, 8, 9, 11, 17, 18, 20, 21, 24, 25, 26, 37, 38, 78, 82, 84, 85, 88, 91, 96, 100, 108, 109, 123, 165], "environment_variables_double_quot": 0, "If": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 72, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 105, 107, 108, 109, 111, 122, 123, 124, 127, 129, 152, 154, 157, 165, 166, 167, 168], "doubl": 0, "quot": 0, "instead": [0, 1, 3, 38, 72, 82, 104, 107, 108, 111, 122, 123, 135, 165, 167], "singl": [0, 1, 3, 78, 105, 107, 124, 139, 142, 154, 165, 166, 167], "escap": 0, "import_sys_environ": 0, "load": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 70, 72, 76, 139, 140, 141, 142, 150, 163], "input_filenam": 0, "filenam": 0, "written": [0, 154, 165, 167], "max_memory_kb": 0, "maximum": [0, 9, 12, 17, 18, 20, 24, 25, 26, 27, 37, 57, 60, 72, 78, 82, 84, 85, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 123, 124, 137, 139, 140, 142], "memori": [0, 58, 59, 61, 167], "kilobyt": 0, "ask": 0, "max_wallclock_second": 0, "wallclock": 0, "second": [0, 1, 37, 57, 58, 59, 61, 84, 85, 90, 124, 137, 140, 142, 149, 162, 164], "mpirun_extra_param": 0, "extra": [0, 1, 3, 108, 111, 122, 123, 143, 167], "param": [0, 82], "pass": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 57, 61, 84, 85, 108, 109, 111, 123, 124, 142, 149, 154, 165, 167, 169], "mpirun": 0, "equival": [0, 64, 84, 85, 124, 165, 169], "one": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 105, 107, 108, 109, 111, 122, 123, 124, 134, 137, 139, 140, 141, 142, 148, 152, 154, 162, 163, 165, 166, 167, 168, 169], "provid": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 123, 138, 158, 166], "mpirun_command": 0, "exampl": [0, 82, 127, 138, 139, 140, 141, 143, 144, 145, 149, 155, 159, 169], "np": [0, 1, 3, 57, 58, 59, 61, 62, 82, 83, 84, 85, 96, 100, 108, 122, 131, 138, 147, 151], "8": [0, 78, 82, 85, 90, 96, 100, 105, 107, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 155, 159, 163, 165, 167, 168], "extra_param": 0, "0": [0, 3, 8, 9, 11, 17, 18, 20, 21, 24, 25, 26, 37, 60, 62, 72, 78, 82, 84, 85, 86, 88, 90, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 123, 124, 125, 127, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 159, 162, 163, 164, 165, 167, 169], "1": [0, 3, 8, 56, 62, 76, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 104, 105, 107, 108, 109, 111, 123, 124, 125, 127, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 159, 160, 162, 163, 164, 165, 167, 168, 169], "exec": 0, "x": [0, 32, 33, 57, 58, 59, 60, 61, 62, 75, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 111, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 151, 154, 161, 162, 163], "output_filenam": 0, "content": [0, 165], "stdout": [0, 63, 66, 71], "parser_nam": 0, "parser": [0, 5, 6, 10, 22, 29, 30, 32, 33, 135, 152, 155], "can": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 35, 38, 57, 61, 62, 83, 84, 85, 88, 108, 109, 111, 123, 124, 125, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "none": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 58, 61, 62, 72, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 101, 105, 107, 108, 109, 111, 115, 120, 122, 123, 124, 125, 127, 128, 129, 135, 141, 142, 145, 147, 148, 159, 162, 165, 167, 169], "avail": [0, 57, 61, 84, 85, 134, 151, 152, 162], "need": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 57, 61, 72, 81, 84, 85, 108, 111, 122, 123, 137, 138, 139, 140, 141, 142, 144, 152, 157, 158, 162, 165, 167], "prepend": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "prioriti": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26], "queu": 0, "qo": 0, "qualiti": [0, 155], "servic": 0, "queue_nam": 0, "rerunn": 0, "determin": [0, 8, 9, 11, 17, 18, 20, 21, 24, 25, 26, 38, 60, 82, 84, 85, 88, 108, 109, 111, 117, 119, 122, 124, 125, 127, 135, 148, 149, 154, 167, 169], "requeu": 0, "rerun": 0, "resourc": [0, 159], "like": [0, 57, 61, 82, 100, 103, 108, 122, 144, 147, 149, 155, 160, 161, 165], "cpu": 0, "etc": [0, 152, 164], "depend": [0, 140, 142, 144, 154, 156, 163], "look": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 142, 163, 168], "document": [0, 5, 10, 29, 32, 108, 111, 152, 153, 154, 158, 162, 167], "more": [0, 1, 3, 108, 123, 135, 138, 139, 140, 141, 143, 149, 151, 153, 154, 155, 157, 159, 160, 163, 164, 165, 166, 167], "detail": [0, 69, 85, 88, 108, 109, 111, 124, 133, 135, 138, 139, 140, 141, 143, 149, 151, 153, 154, 155, 158, 159, 160, 162, 166, 167, 169], "scheduler_stderr": 0, "stderr": 0, "scheduler_stdout": 0, "stash": 0, "direct": [0, 1, 3, 82, 84, 85, 90, 105, 107, 108, 109, 111, 124, 125, 135, 137, 142, 155, 167, 169], "ha": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 129, 135, 145, 147, 149, 152, 155, 157, 159, 166, 168, 169], "complet": [0, 7, 9, 11, 17, 18, 20, 21, 23, 24, 25, 26, 31, 33, 38, 108, 111, 147, 152, 154], "source_list": 0, "sequenc": [0, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 83], "filepath": 0, "repres": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 57, 61, 108, 111, 122, 149, 159, 167], "directori": [0, 1, 3, 9, 11, 17, 18, 20, 21, 24, 25, 26, 147], "stash_mod": 0, "mode": [0, 74, 82, 96, 100], "perform": [0, 7, 12, 23, 31, 33, 57, 61, 83, 104, 105, 107, 108, 109, 111, 124, 137, 152, 154, 155, 165, 167], "valu": [0, 1, 3, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 57, 58, 59, 60, 61, 62, 66, 68, 70, 75, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 128, 129, 131, 134, 135, 137, 138, 148, 151, 152, 154, 159, 162, 163, 167], "common": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "datastructur": [0, 5, 10, 29, 32], "stashmod": 0, "target_bas": 0, "base": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 43, 57, 58, 59, 61, 64, 76, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 105, 107, 108, 109, 111, 123, 124, 125, 134, 135, 139, 140, 142, 148, 149, 150, 151, 154, 155, 158, 159, 160, 161, 162, 165, 169], "locat": [0, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "stashd": 0, "For": [0, 72, 108, 111, 139, 141, 142, 156, 159, 165, 167, 169], "copi": [0, 5, 10, 29, 32, 108, 111, 122, 124, 137, 166], "absolut": [0, 1, 3, 7, 23, 31, 32, 33, 100, 101, 105, 107, 151, 159], "submit_script_filenam": 0, "withmpi": 0, "mpi": 0, "store_proven": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "fals": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 38, 64, 70, 74, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 100, 101, 102, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 127, 133, 140, 142, 144, 145, 146, 147, 149, 150, 159, 162, 165, 167, 168, 169], "proven": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 153, 155], "store": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 44, 58, 61, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 111, 122, 125, 135, 137, 138, 139, 141, 142, 143, 144, 145, 147, 149, 159, 162, 163, 164, 165, 166, 167, 169], "databas": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 47, 48, 49, 50, 108, 122, 123, 125, 143, 155, 158, 165, 166, 169], "monitor": [0, 5, 10, 29, 32], "add": [0, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 38, 64, 74, 82, 84, 85, 88, 90, 91, 92, 104, 105, 107, 108, 109, 122, 123, 135, 144, 149, 152, 159, 167, 169], "function": [0, 1, 3, 5, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 24, 25, 26, 29, 38, 39, 40, 51, 53, 56, 58, 59, 61, 71, 78, 79, 82, 86, 87, 89, 90, 92, 93, 108, 110, 122, 126, 135, 136, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 154, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170], "inspect": 0, "while": [0, 1, 3, 9, 11, 17, 18, 20, 21, 24, 25, 26, 154, 165], "decid": 0, "prematur": [0, 152], "termin": [0, 3, 5, 10, 12, 29, 32, 85, 92, 108, 125, 157, 169], "path_atomic_dens": 0, "absolt": 0, "result": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 69, 85, 92, 105, 107, 108, 109, 111, 124, 139, 153, 154, 155, 165, 167], "alreadi": [0, 1, 3, 7, 23, 31, 33, 150, 155, 167, 168, 169], "without": [0, 7, 23, 31, 33, 154, 159], "normal": [0, 42, 82, 84, 85, 96, 100, 108, 125, 131, 137, 169], "engin": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 99, 100, 154, 158], "recreat": 0, "proce": 0, "straight": [0, 139, 140, 142, 149, 157, 169], "step": [0, 9, 11, 17, 18, 20, 21, 23, 24, 25, 26, 137, 142, 145, 149, 155, 158, 159], "remotedata": 0, "had": 0, "been": [0, 1, 3, 5, 7, 9, 10, 17, 18, 20, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 66, 67, 149, 153, 154, 155, 159], "through": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 111], "defin": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 38, 66, 68, 78, 81, 82, 84, 85, 96, 98, 99, 100, 103, 104, 105, 107, 108, 109, 111, 123, 124, 135, 140, 144, 145, 148, 149, 151, 152, 154, 159, 160, 164, 165, 167, 169], "ar": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 27, 29, 31, 32, 33, 38, 57, 58, 61, 66, 68, 70, 73, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 107, 108, 109, 111, 122, 123, 124, 127, 129, 130, 135, 137, 139, 140, 142, 144, 145, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169], "pars": [0, 5, 7, 10, 23, 29, 31, 32, 33, 66, 68, 74, 108, 111, 127, 133, 135, 139, 140, 141, 142, 144, 149], "attach": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 104, 105, 107], "usual": [0, 159, 162, 166, 169], "spin_density_filenam": 0, "spin": [0, 70, 73, 84, 85, 140, 142, 167], "output_ddec3_popul": 0, "ddec3": 0, "popul": [0, 1, 3, 85, 86, 144], "output_ddec6_popul": 0, "ddec6": 0, "output_paramet": 0, "necessari": [0, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 133, 139, 167], "remote_stash": 0, "daemon": [0, 5, 10, 29, 32, 154], "By": [0, 5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 167], "default": [0, 1, 3, 5, 8, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 58, 59, 61, 62, 70, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 108, 109, 111, 122, 123, 124, 125, 142, 146, 147, 148, 162], "ad": [0, 57, 82, 84, 85, 90, 91, 104, 105, 107, 108, 125, 135, 152, 165, 169], "them": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 64, 108, 111, 138, 142, 144, 145, 148, 149, 150], "calcinfo": [0, 5, 10, 29, 32], "retrieve_list": 0, "cp2kcalcul": [0, 10, 12, 28], "from": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 35, 37, 38, 42, 49, 60, 65, 66, 67, 70, 72, 73, 82, 83, 84, 85, 88, 89, 92, 98, 99, 100, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 127, 128, 129, 131, 133, 135, 136, 137, 138, 146, 147, 148, 150, 151, 154, 155, 158, 160, 161, 162, 163, 164, 165, 167, 168], "offici": [0, 10], "parent_calc_fold": 0, "previous": 0, "ran": [0, 152], "restart": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 63, 66, 71], "structur": [0, 1, 3, 8, 9, 12, 18, 28, 32, 35, 37, 39, 42, 44, 49, 64, 65, 66, 67, 70, 72, 73, 74, 75, 77, 78, 82, 83, 84, 85, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 135, 136, 144, 145, 147, 148, 152, 153, 154, 155, 158, 159, 161, 162, 169, 170], "main": [0, 154, 155], "output_band": [0, 72], "band": [0, 9, 18, 65, 66, 70, 72, 73, 75, 84, 85, 92, 108, 123, 136, 152, 155, 161, 162], "output_cub": 0, "output_eigenvalu": 0, "eigenvalu": [0, 8, 65, 66, 70, 72, 73, 84, 85, 139, 140, 141, 142, 152], "output_hirshfeld_popul": 0, "final": [0, 78, 108, 123, 139, 143, 149, 159], "hirshfeld": [0, 152], "charg": [0, 1, 23, 24, 26, 85, 86, 108, 111, 136, 152, 161], "output_kind_info": 0, "kind": [0, 1, 3, 35, 65, 66, 72, 78, 82, 84, 85, 97, 100, 102, 108, 109, 111, 122, 124, 135, 139, 142, 148, 154, 167], "inform": [0, 1, 5, 8, 10, 23, 29, 32, 66, 67, 73, 82, 84, 85, 108, 109, 111, 122, 123, 124, 132, 133, 135, 139, 140, 142, 144, 149, 152, 154, 166, 167, 168, 169], "includ": [0, 23, 38, 60, 82, 84, 85, 88, 108, 111, 123, 124, 139, 140, 141, 142, 147, 148, 152, 155, 158, 165, 169], "each": [0, 1, 23, 32, 57, 58, 60, 61, 65, 66, 70, 72, 73, 82, 84, 85, 86, 92, 97, 100, 102, 108, 109, 111, 123, 124, 127, 137, 144, 145, 148, 151, 154, 155, 159, 160, 162, 163, 165, 167, 169], "output_motion_step_info": 0, "optim": [0, 11, 12, 15, 21, 66, 67, 78, 152, 154, 159], "molecular": [0, 98, 100, 104, 108, 115, 122, 123, 153, 155, 159, 167], "dynam": 0, "simul": 0, "output_mulliken_popul": 0, "mulliken": [0, 152], "output_pdo": 0, "project": [0, 25, 47, 48, 65, 66, 70, 72, 73, 84, 85, 108, 123, 136, 145, 152, 155, 158, 161, 168], "state": [0, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 65, 66, 70, 72, 73, 84, 85, 105, 107, 108, 123, 136, 149, 152, 155, 161], "output_structur": 0, "relax": [0, 12, 108, 123, 152], "workchain": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 152, 153], "findscfparametersworkchain": [0, 20], "find": [0, 12, 18, 20, 24, 25, 98, 100, 101, 124, 127, 135, 149, 152, 165, 168], "mix": [0, 8, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 149, 167], "converg": [0, 9, 12, 17, 18, 20, 24, 25, 26, 27, 82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 152, 169], "kohn": [0, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 152], "sham": [0, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 152], "equat": [0, 8, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 97, 100, 108, 109, 111, 124, 152], "always_add_unocc_st": 0, "alwai": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 135, 140, 142, 163], "some": [0, 1, 3, 146, 152, 153, 158], "unoccupi": [0, 8, 20, 84, 85, 152], "even": 0, "smear": [0, 8, 61, 63, 78, 82, 84, 85, 91, 97, 100, 108, 109, 111, 124, 139, 142, 147], "clean_workdir": 0, "clean": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26], "end": [0, 98, 100, 147], "custom_scf_method": 0, "enable_rok": 0, "restrict": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 100, 101, 149], "open": [0, 1, 9, 11, 17, 18, 20, 21, 24, 25, 26, 50, 74, 108, 123, 138, 151, 155, 157, 158, 168], "shell": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 82, 100, 103], "unrestrict": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26], "calcualt": [0, 42], "factor_unocc_st": [0, 8], "factor": [0, 8, 78, 108, 109, 111, 123, 124, 159], "orbit": [0, 70, 84, 85, 140, 142, 152, 161], "handler_overrid": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26], "map": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 82], "kei": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 64, 84, 85, 87, 108, 111, 122, 123, 124, 128, 135, 139, 140, 142, 143, 149, 159, 163, 165, 167, 169], "handler": [0, 9, 11, 13, 17, 18, 20, 21, 24, 25, 26], "enabl": [0, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "toggl": 0, "origin": [0, 1, 84, 85, 91, 108, 109, 111, 124, 133, 149, 160, 165, 167], "declar": 0, "max_iter": 0, "iter": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 111, 148], "finish": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 145, 152], "successfulli": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26], "numerical_p": 0, "basis_fil": 0, "basi": [0, 82, 84, 85, 96, 100, 133, 140, 142, 150, 153, 165, 167], "basis_set": 0, "speci": 0, "cutoff_valu": 0, "cut": [0, 78, 82, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 124], "off": [0, 78, 82, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 124, 162, 167], "grid": [0, 18, 42, 57, 58, 59, 61, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 105, 107, 136, 147, 151, 159, 162], "kpoints_ref_dist": 0, "refer": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 72, 84, 85, 105, 107, 108, 111, 148, 151, 159], "distanc": [0, 59, 61, 62, 78, 80, 81, 82, 85, 87, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 116, 124, 131, 148, 149, 150, 151, 160, 165, 167], "between": [0, 3, 37, 59, 61, 62, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 116, 123, 124, 131, 142, 145, 146, 148, 151, 152, 154, 162, 165, 166, 167], "two": [0, 3, 37, 58, 59, 61, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 124, 127, 128, 131, 136, 139, 140, 141, 142, 146, 148, 149, 150, 151, 152, 153, 154, 155, 161, 165, 167, 169], "k": [0, 9, 18, 65, 66, 70, 72, 73, 75, 84, 85, 93, 94, 139, 140, 141, 142, 143, 149, 160], "point": [0, 1, 3, 5, 10, 18, 29, 32, 60, 72, 75, 84, 85, 90, 98, 100, 105, 107, 108, 109, 111, 117, 124, 131, 133, 137, 139, 141, 142, 143, 147, 149, 152, 154, 163, 169], "reciproc": [0, 82, 84, 85, 96, 100], "space": [0, 64, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 108, 109, 111, 119, 123, 124, 125, 131, 133, 135, 149, 159, 162, 167, 169], "pseudo_fil": 0, "pseudopotenti": [0, 8], "xc_function": [0, 8], "exchang": [0, 8, 167], "correl": [0, 8, 59, 61, 151], "scf_extended_system": 0, "appli": [0, 62, 84, 85, 108, 109, 111, 124, 125, 139, 149, 153, 162, 165, 168], "larger": [0, 98, 100, 108, 125, 135, 149, 155, 165, 169], "scf": [0, 9, 11, 16, 17, 18, 20, 21, 24, 25, 26, 152], "cycl": [0, 9, 17, 18, 24, 26, 152], "extend": [0, 98, 154], "scf_method": 0, "method": [0, 60, 62, 95, 96, 98, 99, 100, 104, 105, 106, 107, 112, 113, 135, 137, 138, 145, 147, 148, 149, 151, 154, 155, 159, 160, 165, 166], "density_mix": 0, "orbital_transform": 0, "structural_p": 0, "scf_paramet": [0, 8, 12], "initi": [0, 1, 3, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 27, 78, 105, 107, 108, 123, 124, 137, 145, 153, 154, 155, 165, 166, 169], "system_charact": 0, "charact": [0, 20, 145], "possibl": [0, 1, 3, 82, 108, 123, 137, 167], "metal": 0, "insul": 0, "In": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 57, 58, 61, 66, 67, 84, 85, 86, 105, 107, 108, 109, 123, 137, 139, 140, 142, 145, 147, 149, 152, 154, 156, 159, 162, 164, 165, 166, 167, 168, 169], "case": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 58, 61, 66, 67, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 105, 107, 108, 109, 123, 135, 136, 137, 138, 139, 140, 142, 145, 147, 149, 154, 156, 162, 163, 165, 167, 169], "never": 0, "run_time_stat": 0, "time": [0, 37, 108, 123, 149, 150, 154, 159, 163, 167], "geooptworkchain": [0, 21], "adjust_scf_paramet": 0, "custom_opt_method": 0, "optimz": 0, "initial_opt_paramet": 0, "optimization_p": 0, "eps_symmetri": 0, "toler": [0, 60, 78, 82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 123, 124, 125, 127, 148, 149, 169], "group": [0, 37, 38, 64, 75, 78, 84, 85, 86, 88, 104, 105, 107, 108, 109, 111, 117, 119, 122, 123, 124, 125, 129, 133, 135, 144, 149, 159, 165, 167, 169], "keep_space_group": 0, "constrain": [0, 78, 108, 109, 111, 122, 124, 125, 154], "via": [0, 57, 61, 78, 108, 109, 111, 122, 123, 124, 129, 135, 137, 142, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 164, 167, 168], "spglib": [0, 46, 78, 108, 109, 111, 124, 125, 133, 135, 149, 158, 167, 169], "max_dr": 0, "criterion": 0, "geometri": [0, 11, 21, 42, 82, 96, 100, 135], "chang": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 61, 104, 115, 135, 137, 140, 142, 148, 149, 155, 159, 162, 163, 165, 166, 167], "max_forc": 0, "forc": [0, 72, 78, 108, 111, 152], "compon": [0, 82], "rms_dr": 0, "root": [0, 155], "squar": [0, 127, 165], "rm": 0, "rms_forc": 0, "space_group_info": 0, "keep_spacegroup": 0, "celloptworkchain": [0, 11], "unit": [0, 1, 3, 7, 11, 12, 23, 31, 33, 38, 63, 84, 85, 87, 88, 89, 91, 92, 104, 105, 107, 108, 109, 111, 115, 122, 123, 124, 130, 135, 139, 141, 142, 150, 152, 167, 169], "cell": [0, 1, 3, 11, 12, 25, 72, 78, 84, 85, 104, 105, 107, 108, 109, 111, 115, 122, 123, 124, 125, 135, 137, 139, 141, 142, 145, 150, 152, 160, 165, 167, 169], "period": [0, 3, 11, 42, 82, 96, 98, 100, 108, 122, 125, 145, 148, 160, 167, 169], "cell_symmetri": 0, "symmetri": [0, 64, 72, 84, 85, 108, 109, 111, 117, 124, 133, 135, 142, 144, 149, 167], "dure": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 78, 159, 167], "keep_angl": 0, "lattic": [0, 124, 133, 154, 159], "angl": [0, 78, 108, 109, 111, 116, 124, 131, 154, 165, 167], "keep_symmetri": 0, "pressure_toler": 0, "pressur": [0, 152], "achiev": [0, 159], "ref_cell_scaling_factor": 0, "scale": [0, 3, 62, 78, 82, 84, 85, 90, 91, 96, 100, 101, 108, 109, 111, 115, 122, 124, 129, 139, 141, 142, 146, 159, 167], "cell_ref": 0, "bandstructureworkchain": [0, 9], "adjust": [0, 135, 139, 140, 142, 144, 161, 163], "clycl": 0, "path_paramet": 0, "seekpath": [0, 28, 37, 46, 154], "seekpath_paramet": 0, "argument": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 61, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 122, 124, 125, 137, 149, 162, 163, 165, 167, 168, 169], "analysi": [0, 95, 108, 109, 111, 119, 124, 135, 145, 154, 155, 170], "conv_structur": 0, "convent": [0, 108, 123, 150, 152, 169], "gener": [0, 7, 8, 23, 28, 31, 33, 38, 72, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 123, 125, 126, 135, 137, 138, 149, 151, 153, 154, 155, 158, 159, 162, 163, 166, 167], "explicit_kpoint": 0, "explicit": 0, "kpoint": [0, 75, 84, 85, 139, 140, 142, 143], "primitive_structur": 0, "primit": [0, 108, 109, 111, 123, 124, 150, 169], "eigenvaluesworkchain": [0, 18], "pdosworkchain": [0, 25], "maximum_cell_length": 0, "minimum_cell_length": 0, "resolve_atom": 0, "wfn_cube_list": 0, "data": [0, 1, 2, 3, 5, 7, 8, 10, 23, 29, 31, 32, 33, 37, 38, 59, 60, 61, 73, 75, 76, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 111, 122, 123, 125, 138, 142, 143, 146, 149, 151, 153, 155, 158, 161, 162, 164, 165, 166, 167, 169], "wfn_n_homo": 0, "print": [0, 1, 3, 17, 18, 82, 124, 139, 140, 142, 143, 145, 149, 150, 151, 154, 159, 163, 165, 167, 168, 169], "certain": [0, 1, 3, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 38, 84, 85, 108, 111, 123, 125, 131, 142, 144, 162, 168, 169], "occupi": [0, 32, 84, 85], "wfn_n_lumo": 0, "partialchargesworkchain": [0, 24], "partial": [0, 23, 24, 26, 82, 85, 86, 87, 100, 102, 136, 150, 152, 160, 161, 167], "item": [0, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 122, 145, 162, 164, 167], "line": [0, 1, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 138, 140, 142, 147, 149, 162, 165], "store_cub": 0, "whether": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 27, 29, 32, 35, 38, 57, 60, 61, 64, 70, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 100, 101, 102, 108, 109, 111, 122, 123, 124, 125, 127, 133, 149, 154, 159, 162, 165, 167, 169], "onli": [0, 1, 3, 32, 38, 60, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 108, 109, 111, 123, 124, 125, 127, 135, 137, 147, 149, 152, 159, 162, 165, 168], "support": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 66, 68, 70, 73, 74, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 104, 105, 107, 108, 109, 111, 122, 124, 127, 129, 135, 137, 142, 146, 154, 164, 165, 168], "output_bader_popul": 0, "bader": [0, 152], "output_plan": 0, "plane": [0, 69, 100, 108, 125, 131, 169], "cubeworkchain": [0, 17], "cube_typ": 0, "planarfieldsworkchain": [0, 26], "planar": [0, 26, 85, 89, 100, 101, 135, 136, 152, 161], "field": [0, 1, 3, 26, 64, 85, 89, 136, 152, 161], "field_typ": 0, "type": [0, 1, 3, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 57, 60, 61, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 125, 129, 137, 146, 148, 152, 153, 154, 160, 162, 163, 165, 167], "up": [0, 12, 19, 75, 84, 85, 89, 108, 109, 111, 124, 135, 139, 140, 142, 143, 167], "now": [0, 75, 135, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 159, 163, 165, 168], "deformation_dens": 0, "elf": 0, "plane_vector": 0, "vector": [0, 3, 84, 85, 100, 101, 105, 107, 108, 109, 111, 122, 124, 131, 133, 137, 159, 160, 165, 167], "given": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 57, 64, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 105, 107, 108, 109, 122, 123, 125, 131, 133, 137, 139, 140, 141, 142, 143, 144, 152, 153, 154, 155, 158, 159, 162, 164, 165, 167, 168, 169], "crystallograph": [0, 133], "coordin": [0, 3, 43, 82, 85, 87, 89, 98, 99, 100, 101, 104, 105, 107, 108, 109, 111, 113, 122, 124, 135, 136, 160, 167], "angstrom": [0, 1, 3, 82, 85, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 124, 134], "boundari": [0, 82, 96, 100, 108, 122, 125, 145, 167, 169], "condit": [0, 9, 11, 17, 18, 20, 21, 24, 25, 26, 82, 96, 100, 108, 122, 125, 145, 152, 167, 169], "deform": [0, 145], "total_dens": 0, "total": [0, 70, 72, 73, 84, 85, 88, 92, 97, 100, 139, 140, 141, 142, 149, 151], "electronicpropertiesworkchain": [0, 12, 19], "properti": [0, 72, 78, 100, 129, 135, 136, 142, 146, 147, 149, 152, 154, 155, 159, 161, 163, 164, 165, 167, 168, 169], "about": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 111, 122, 167], "forward": 0, "e": [0, 57, 61, 62, 78, 82, 84, 85, 86, 88, 97, 100, 102, 108, 109, 111, 123, 124, 127, 133, 137, 144, 148, 150, 151, 152, 155, 159, 160, 161, 162, 163, 165, 167, 168, 169], "g": [0, 61, 78, 82, 84, 85, 86, 88, 96, 97, 100, 102, 108, 109, 111, 123, 124, 127, 133, 137, 144, 148, 150, 151, 152, 155, 159, 160, 161, 163, 165, 167, 168, 169], "wore": 0, "workflow": [0, 4, 11, 15, 20, 21, 36, 37, 38, 85, 92, 155, 158, 159, 168, 170], "calc_band_structur": 0, "calc_eigenvalu": 0, "calc_partial_charg": 0, "calc_pdo": 0, "pdo": [0, 65, 66, 70, 73, 84, 85, 136, 152, 161], "custom_protocol": 0, "protocol": [0, 19, 38], "standard": [0, 8, 23, 37, 66, 68, 69, 72, 82, 96, 100, 108, 109, 111, 124, 137, 139, 140, 142, 154, 159], "run_cell_optim": 0, "bader_popul": 0, "band_structur": [0, 65, 66, 70, 73, 75, 139, 140, 141, 142, 143, 152], "crysal": 0, "ddec6_popul": 0, "eigenvalue_info": 0, "general_info": 0, "hirshfeld_popul": 0, "mulliken_popul": 0, "optimized_structur": [0, 37, 85, 88, 108, 122], "crystal": [0, 12, 64, 78, 82, 83, 85, 88, 98, 99, 100, 108, 111, 123, 125, 133, 136, 152, 154, 155, 158, 159, 165, 166], "surfaceoptworkchain": [0, 12, 27], "slab": [0, 3, 12, 27, 37, 85, 92, 108, 125, 152, 169], "size": [0, 12, 27, 38, 78, 82, 83, 84, 85, 90, 97, 100, 102, 108, 109, 111, 123, 124, 125, 137, 144, 147, 154, 159, 169], "bulk_refer": 0, "energi": [0, 57, 61, 72, 84, 85, 88, 92, 93, 110, 124, 134, 135, 137, 139, 140, 141, 142, 143, 149, 161, 162], "bulk": [0, 85, 92, 93, 108, 125, 159], "preopt_numerical_p": 0, "pre": [0, 135, 140, 152, 154, 155], "preopt_optimization_p": 0, "slab_conv": 0, "criteria": [0, 12, 27, 149], "choos": [0, 11, 16, 21, 142, 149], "threshold": [0, 82, 84, 85, 96, 98, 99, 100, 101, 104, 105, 107, 108, 109, 111, 124, 145, 149, 152], "surfac": [0, 3, 27, 37, 41, 85, 108, 126, 152, 154, 161, 166], "format": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 76, 82, 85, 88, 96, 100, 108, 110, 111, 124, 127, 129, 135, 149, 152, 154, 161, 165], "maximum_slab_s": 0, "vacuum": [0, 108, 125, 169], "bottom": [0, 3, 84, 85, 90, 91, 108, 125, 145, 146, 169], "top": [0, 3, 84, 85, 90, 91, 108, 125, 152, 160, 169], "minimum_slab_s": 0, "plan": [0, 156], "vacuum_factor": [0, 108, 125, 169], "last": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 137, 147, 149, 166, 167, 169], "primitive_slab": 0, "unrelax": 0, "critic2calcul": [0, 24, 26, 29], "element": [0, 3, 42, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 100, 102, 104, 105, 107, 108, 109, 111, 115, 122, 123, 124, 127, 129, 135, 139, 140, 142, 144, 146, 147, 148, 149, 150, 159, 160, 162, 165, 167, 168, 169], "enumlibcalcul": [0, 32], "implement": [0, 1, 3, 5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 33, 62, 82, 96, 100, 104, 105, 108, 109, 111, 115, 122, 123, 124, 125, 128, 135, 137, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169], "enum": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 33], "librari": [0, 32, 33, 46, 51, 52, 55, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 123, 133, 134, 136, 143, 146, 147, 149, 152, 153, 155, 156, 157, 158, 159, 162, 166], "concentration_restrict": [0, 32], "concentr": [0, 82, 108, 109, 123, 149, 159, 160], "enumer": 0, "have": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 66, 67, 82, 84, 85, 108, 109, 111, 123, 124, 125, 127, 135, 137, 140, 142, 144, 149, 150, 152, 153, 154, 155, 162, 163, 165, 167, 168, 169], "follow": [0, 8, 9, 11, 17, 18, 20, 21, 24, 25, 26, 129, 137, 138, 146, 147, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169], "shape": [0, 1, 57, 60, 61, 82, 85, 90, 137], "numerator1": 0, "numerator2": 0, "denomin": 0, "limit": [0, 1, 3, 57, 75, 108, 109, 123], "rang": [0, 57, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 123, 137, 139, 140, 142, 154, 155, 161, 162], "elements_to_enumer": [0, 32], "consist": [0, 82, 84, 85, 147, 149, 154, 160, 164, 165, 167, 168], "well": [0, 65, 66, 70, 73, 82, 84, 85, 108, 111, 127, 133, 135, 140, 142, 154, 155, 162, 164, 165, 167, 168], "site": [0, 32, 64, 84, 85, 97, 100, 102, 104, 105, 107, 108, 109, 111, 113, 124, 135, 136, 149, 154, 165, 167], "place": [0, 11, 21, 159], "ep": 0, "small": 0, "real": [0, 82, 96, 100], "epsilon": 0, "compar": [0, 58, 59, 61, 84, 85, 87, 88, 89, 92, 108, 109, 123, 124, 135, 136, 148, 151, 155, 159, 161, 167], "avoid": [0, 145, 166], "finit": 0, "precis": [0, 137, 138, 152], "error": [0, 9, 11, 13, 17, 18, 20, 21, 24, 25, 26, 38, 59, 61, 105, 107, 108, 109, 122, 152, 153], "max_cell_s": 0, "super": [0, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 124, 152], "parent": [0, 1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38], "min_cell_s": 0, "minimum": [0, 57, 60, 72, 84, 85, 108, 109, 123, 124, 137, 142], "path_to_makestr": 0, "makestr": [0, 32], "py": [0, 32, 82, 139, 149, 154], "sites_to_enumer": [0, 32], "ni1": [0, 78, 82, 97, 100, 102, 108, 109, 111, 122, 124], "ca0": 0, "also": [0, 1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 84, 85, 137, 139, 140, 141, 142, 145, 146, 147, 149, 150, 151, 153, 154, 155, 159, 164, 165, 166, 167, 168, 169], "structures_hard_cutoff": 0, "creat": [0, 1, 3, 5, 8, 9, 10, 11, 12, 14, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 43, 57, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 108, 111, 120, 122, 123, 125, 127, 128, 136, 139, 140, 142, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 162, 163, 164, 165, 166, 167], "rais": [0, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 57, 61, 105, 107, 108, 122, 129], "No": [0, 149, 152], "cutoff": [0, 82, 96, 100], "structures_to_return": 0, "indic": [0, 3, 9, 11, 17, 18, 20, 21, 24, 25, 26, 57, 61, 84, 85, 105, 107, 108, 109, 111, 124, 125, 138, 142, 165, 169], "return": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 42, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 122, 123, 124, 125, 127, 128, 129, 131, 133, 134, 135, 137, 138, 140, 149, 154, 159, 165, 167, 168, 169], "aiida": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 46, 74, 84, 85, 86, 88, 89, 108, 111, 122, 125, 135, 152, 154, 155, 156, 157, 158, 165], "gaussian": [1, 62, 78, 82, 84, 85, 91, 96, 97, 100, 108, 109, 111, 124, 131, 137, 139, 147], "gaussiancubedata": 1, "kwarg": [1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 57, 58, 59, 61, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 114, 119, 124], "orm": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 84, 85, 86, 108, 111, 122, 165], "object": [1, 3, 4, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 40, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 105, 107, 108, 111, 122, 123, 124, 135, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 154, 159, 163, 165, 166, 168, 169], "overview": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 58, 59, 61, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 122, 123, 124, 125, 134, 149, 153, 159, 160, 167, 168], "atomic_charg": 1, "atomic_numb": 1, "atomic_posit": 1, "bohr": 1, "backend": [1, 3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 122, 124, 135, 142, 146, 147, 149, 155, 163, 167], "get": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 35, 37, 60, 78, 82, 108, 111, 114, 122, 133, 149, 153, 165], "entiti": [1, 3], "backend_ent": [1, 3], "comment": 1, "creator": [1, 3], "doe": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 85, 88, 137, 167], "ctime": [1, 3], "dset_id": 1, "identifi": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 84, 85, 108, 122, 149, 152, 165, 167], "id": [1, 3, 108, 123, 167], "is_stor": [1, 3], "is_valid_cach": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "hook": [1, 3], "exclud": [1, 3, 38, 83, 98, 100, 108, 122, 123, 149], "consid": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 78, 82, 83, 84, 85, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 124, 148, 159], "valid": [1, 3, 32, 121, 124, 129], "cach": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "logger": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "configur": [1, 3, 82, 149, 158], "mtime": [1, 3], "node_typ": [1, 3, 8, 37], "pk": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 154, 169], "primari": [1, 3, 38, 84, 85, 108, 111, 122], "process_typ": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "process": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 35, 38, 78, 79, 82, 124, 145, 154, 155, 159, 165], "describ": [1, 3, 82, 138, 148, 151, 155, 159, 161, 165], "titl": [1, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 142, 144, 147, 162], "uuid": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 84, 85, 108, 111, 122, 154, 169], "collect": [1, 3, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 57, 61, 108, 109, 111, 122, 124, 125, 149, 165, 168, 169], "class_node_typ": [1, 3], "sub": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 135, 139, 140, 141, 142, 144, 145, 148, 149, 151, 155, 163], "clone": [1, 3], "convert": [1, 3, 127, 134, 137], "object_format": [1, 3], "arg": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 84, 85, 88, 91, 109, 119], "structuredata": [1, 3, 10, 12, 23, 25, 108, 111, 122, 165], "python": [1, 3, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 42, 54, 82, 96, 100, 108, 111, 128, 149, 153, 154, 155, 157, 158, 159, 160, 165, 167, 168, 169], "entry_point": [1, 3, 154], "entri": [1, 3, 5, 10, 29, 32, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 123, 124, 154, 162, 168], "associ": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "export": [1, 3, 108, 111, 149, 154, 167], "fileformat": [1, 3], "overwrit": [1, 3, 100, 101, 108, 122, 169], "save": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "match": [1, 3, 64, 78, 124, 127, 154, 168], "filter": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 149, 165], "get_collect": [1, 3], "get_cont": 1, "get_cube_data": 1, "get_descript": [1, 3], "get_export_format": [1, 3], "get_structur": [1, 108, 122, 165], "underli": [1, 38, 108, 125, 166], "importfil": [1, 3], "fname": [1, 3], "importstr": [1, 3], "inputstr": [1, 3], "other": [1, 3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 127, 137, 140, 142, 145, 149, 159, 160, 161, 162], "instanc": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 82, 85, 88, 137, 145, 166], "attribut": [1, 3, 5, 7, 9, 11, 17, 18, 20, 21, 29, 31, 32, 33, 57, 61, 81, 83, 85, 88, 108, 109, 123, 135, 137, 139, 140, 141, 142, 144, 147, 148, 149, 159, 163, 167, 168], "open_cub": 1, "set_from_fil": 1, "file_obj": 1, "set_sourc": [1, 3], "its": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 82, 84, 85, 96, 100, 108, 124, 125, 133, 142, 144, 153, 156, 159, 165, 167], "repositori": [1, 3, 5, 10, 29, 32, 155], "store_al": [1, 3], "togeth": [1, 3], "storagebackend": [1, 3], "backendentitytyp": [1, 3], "datetim": [1, 3], "str": [1, 3, 5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 37, 38, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 114, 115, 122, 123, 124, 125, 127, 128, 129, 133, 134], "int": [1, 3, 5, 8, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 57, 62, 72, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 113, 115, 122, 123, 124, 125, 128, 129, 133, 147], "guarante": [1, 3], "uniqu": [1, 3, 38, 163], "amongst": [1, 3], "same": [1, 3, 5, 7, 10, 23, 29, 31, 32, 33, 66, 67, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 102, 108, 109, 111, 115, 124, 125, 135, 139, 140, 142, 147, 149, 150, 154, 159, 162, 163, 164, 165, 167], "": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 58, 61, 74, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 105, 107, 108, 109, 111, 122, 124, 139, 140, 142, 143, 149, 154, 155, 159, 160, 162, 165, 167, 169], "bool": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 60, 61, 64, 70, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 100, 101, 102, 104, 105, 107, 108, 109, 111, 115, 122, 123, 124, 125, 127, 133, 147, 167], "assum": [1, 3, 84, 85, 105, 107, 152], "_valid_cache_kei": [1, 3], "explicitli": [1, 3], "subclass": [1, 3], "overrid": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "logic": [1, 3, 7, 9, 11, 17, 18, 20, 21, 23, 24, 25, 26, 31, 154], "probabl": [1, 3, 149], "log": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "princip": [1, 3, 84, 85, 139, 140, 142], "db_name": [1, 3], "db_uri": [1, 3], "uri": [1, 3], "perman": [1, 3], "version": [1, 3, 5, 10, 29, 32, 82, 108, 109, 111, 123, 124, 140, 149, 154, 157, 158], "source_md5": [1, 3], "md5": [1, 3], "checksum": [1, 3], "human": [1, 3], "readabl": [1, 3], "free": [1, 3, 93], "form": [1, 3, 82, 131], "licens": [1, 3], "see": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 62, 82, 131, 149, 150, 151, 152, 154, 165], "_valid": [1, 3], "represent": [1, 3, 105, 107, 127, 137, 138, 158, 160, 165, 168], "nodecollect": [1, 3], "deprec": [1, 3, 154], "here": [1, 3, 7, 23, 31, 108, 123, 138, 139, 140, 142, 148, 149, 151, 152, 153, 154, 155, 159, 160, 161, 162, 169], "backward": [1, 3], "compat": [1, 3, 108, 123], "warn": [1, 3, 149], "nodebas": [1, 3], "unstor": [1, 3, 9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "collectiontyp": [1, 3], "access": [1, 3, 124, 147, 149, 167, 168], "importlib_metadata": [1, 3], "entrypoint": [1, 3], "isn": [1, 3], "t": [1, 3, 57, 61, 137, 143, 162, 168], "known": [1, 3, 137], "present": [1, 3, 58, 61, 108, 111, 122, 162, 167], "try": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 127, 149, 155, 162], "extens": [1, 3, 151, 155, 163, 167], "found": [1, 3, 124, 128, 149, 152, 154, 155, 159, 160, 162, 169], "_exportcont": [1, 3], "classmethod": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 108, 111, 134], "current": [1, 3, 38, 137, 151, 152, 154, 155, 168], "profil": [1, 3, 154], "A": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 82, 84, 85, 105, 107, 135, 138, 139, 140, 141, 142, 143, 151, 153, 154, 155, 159, 162, 165, 167], "conent": 1, "arrai": [1, 3, 57, 58, 59, 61, 62, 80, 81, 82, 84, 85, 89, 96, 100, 108, 122, 131, 137, 138, 139, 141, 142, 147, 151], "length": [1, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 100, 101, 104, 105, 107, 108, 111, 134, 145, 164, 165, 167], "constructor": [1, 3], "sinc": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 144, 149, 169], "remov": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 84, 85, 90, 91, 104, 107, 108, 109, 111, 123, 124, 145, 146, 149, 154, 168], "v3": [1, 3, 154], "handl": [1, 5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 45, 114, 122, 128, 153, 155, 158], "cannot": [1, 3, 5, 10, 29, 32], "anymor": [1, 3, 159], "success": [1, 3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "storag": [1, 3, 152, 153, 165], "those": [1, 3, 9, 11, 17, 18, 20, 21, 24, 25, 26, 162], "automat": [1, 3, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 144, 153, 155, 169], "remain": [1, 3, 124, 167], "incom": [1, 3], "linkswil": [1, 3], "gaussian_cube_data": [2, 63], "surface_data": [2, 63], "surfacedata": [3, 12, 85, 92, 108, 125, 169], "aperiodic_dir": 3, "2": [3, 56, 60, 76, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 100, 108, 109, 111, 124, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 159, 162, 163, 164, 165, 167, 168, 169], "miller_indic": [3, 85, 92, 108, 125, 169], "bottom_terminating_structur": 3, "miller": [3, 108, 125, 169], "facet": [3, 85, 92, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 169], "repeating_structur": [3, 169], "repeat": [3, 169], "surface_area": [3, 85, 92], "area": [3, 59, 61, 82, 85, 90, 92, 96, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 131, 145, 151], "top_terminating_structur": 3, "top_terminating_structure_nsym": 3, "symmetr": [3, 108, 125, 169], "set_bottom_terminating_structur": 3, "is_cartesian": [3, 108, 111, 122, 167, 169], "set_repeating_structur": 3, "translational_vector": 3, "set_top_terminating_structur": 3, "set_top_terminating_structure_nsym": 3, "nest": [3, 66, 67, 72, 75, 82, 84, 85, 86, 89, 108, 111, 122, 128, 131, 135, 139, 141, 142, 162, 167], "either": [3, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 108, 111, 122, 137, 151, 152, 167], "cartesian": [3, 108, 111, 122, 167], "3x3": [3, 84, 85, 108, 122], "translat": [3, 108, 111, 133, 169], "shift": [3, 8, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 137, 138, 139, 140, 142, 162], "layer": [3, 169], "util": [4, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 34, 36, 63, 71, 79, 135, 142, 159, 167], "builder": [4, 5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 85, 92], "savekei": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "thing": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "bundl": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "member": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 122, 149], "calc_id": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "empti": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 61], "were": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 135], "wa": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 82, 137, 149, 150], "processnod": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "itself": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 108, 111, 145, 167], "runner": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "correspond": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 57, 58, 61, 78, 84, 85, 91, 108, 109, 111, 124, 125, 133, 135, 137, 139, 140, 142, 145, 147, 148, 149, 151, 161, 163, 165, 167], "build_process_typ": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "decode_input_arg": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "encod": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "decod": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "thei": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 135, 150, 165], "came": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "spec": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "outlin": [5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32], "encode_input_arg": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "mai": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 124, 140, 142, 159, 162, 168, 169], "exit_cod": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "exit": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 28, 29, 31, 32, 33], "processspec": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "exposed_input": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "process_class": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "agglomer": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "gather": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "expos": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "under": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 149], "exposed_output": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "emit": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "get_build": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "get_exit_status": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "exit_code_label": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "statu": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 154], "integ": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 152, 154, 164, 165], "get_import": [5, 10, 29, 32], "entry_point_nam": [5, 10, 29, 32], "calcjobimport": [5, 10, 29, 32], "get_or_create_db_record": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "happen": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "get_parent_calc": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "get_provenance_inputs_iter": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "get_state_class": [5, 10, 29, 32], "constant": [5, 8, 10, 29, 32, 84, 85], "init": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "check": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 27, 29, 32, 35, 57, 61, 64, 82, 105, 107, 127, 135, 137, 149, 155, 163, 168], "kill": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "msg": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "children": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "load_instance_st": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "saved_st": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "load_context": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_creat": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_ent": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "from_stat": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "enter": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "new": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 82, 85, 88, 104, 105, 107, 108, 122, 124, 135, 149, 153, 154, 155, 157, 162, 165, 167, 168], "checkpoint": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "updat": [5, 9, 10, 11, 12, 14, 16, 17, 18, 20, 21, 24, 25, 26, 27, 29, 32, 82, 135, 149], "latest": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 149, 152, 154], "timestamp": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_except": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "exc_info": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "except": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 109], "report": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 155], "stack": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "trace": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 153], "info": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_finish": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_output_emit": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "output_port": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_paus": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "paus": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "so": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 60, 82, 149, 152, 157, 159, 162, 168], "on_plai": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "unpaus": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "on_termin": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "cleanup": [5, 10, 29, 32], "delet": [5, 10, 29, 32, 108, 109, 111, 115, 124, 165, 167], "calul": [5, 10, 29, 32], "out": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 84, 85, 91, 144, 147, 149, 152, 162, 165], "out_mani": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "out_dict": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "multipl": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 74, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 122, 124, 125, 137, 144, 151, 154, 166, 168, 169], "retrieved_temporary_fold": [5, 7, 10, 23, 29, 31, 32, 33], "existing_exit_cod": [5, 10, 29, 32], "parse_retrieved_output": [5, 10, 29, 32], "parse_scheduler_output": [5, 10, 29, 32], "prepare_for_submiss": [5, 10, 29, 32], "presubmit": [5, 10, 29, 32], "readi": [5, 10, 29, 32, 145, 155], "cluster": [5, 10, 29, 32, 98, 100], "messag": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "dbloghandl": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "save_instance_st": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "out_stat": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "save_context": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "set_statu": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "we": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 152, 154, 155, 159, 162, 163, 164, 165, 166, 167, 168, 169], "reflect": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 131], "proxi": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "spec_metadata": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "spec_opt": [5, 10, 29, 32], "submit": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 38, 154, 155], "static": [5, 10, 12, 29, 32], "immedi": [5, 10, 29, 32], "update_output": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "single_output_linknam": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "link_label_retriev": [5, 10, 29, 32], "plumpi": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "attributesfrozendict": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "becaus": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 149, 152], "ensur": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 105, 107, 159], "extendeddict": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "attributedict": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "calcjobnod": [5, 7, 10, 23, 29, 31, 32, 33], "could": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 105, 107, 152, 159], "made": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "order": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 82, 85, 86, 97, 100, 103, 127, 144, 149, 152, 159, 160, 162, 165, 166, 167, 168, 169], "would": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 78, 82, 97, 100, 102, 108, 109, 111, 124], "metaclass": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "http": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 123, 131, 149], "bug": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 135, 155], "org": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 123, 131, 149], "issue20659": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "dict": [5, 7, 8, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 64, 65, 66, 67, 68, 69, 70, 72, 73, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 102, 103, 108, 109, 111, 114, 120, 122, 123, 124, 125, 127, 128, 133, 165], "serial": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "exitcodesnamespac": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "getitem": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "getattr": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "oper": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 64, 76, 77, 133, 158, 167], "exitcod": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33], "addition": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 109, 111, 124, 140, 144, 149, 161, 162, 164, 165, 168], "tupl": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 61, 75, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 100, 102, 105, 107, 108, 109, 111, 115, 120, 122, 123, 124, 125, 133, 135, 147, 165, 167], "whose": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 139], "portnamespac": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "search": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 78, 82, 98, 100, 101, 105, 107, 108, 109, 111, 124, 125, 159], "lower": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 60], "ly": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "take": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 78, 84, 85, 86, 148, 149, 155, 159, 169], "preced": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "processbuild": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "attributeerror": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "least": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 122, 166], "howev": [5, 10, 29, 32, 149, 154, 162, 165, 167], "overridden": [5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32], "inputport": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "hashabl": [5, 10, 29, 32], "process_st": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "wait": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 37, 108, 123], "allow": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 59, 61, 108, 122, 135, 137, 147, 154, 155, 160, 168], "modifi": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 144], "make": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 124, 145, 149, 153, 157, 158, 159, 168, 169], "sure": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 157], "_node": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "otherwis": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 84, 85, 124, 135, 159, 167], "invalidates_cach": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "keyword": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 72, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 122, 137, 140, 149, 162, 165, 167, 168, 169], "effect": [5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 148], "futur": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 108, 109, 111, 124], "mutablemap": [5, 10, 29, 32], "persist": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "loadsavecontext": [5, 10, 29, 32], "tracebacktyp": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "sy": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "traceback": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "done": [5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 140, 142, 156, 157, 159], "seal": [5, 10, 29, 32], "put": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 84, 85, 86], "insid": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "onc": [5, 10, 29, 32, 38, 78, 82, 124, 145, 149, 153, 159, 162], "temporari": [5, 10, 29, 32], "sandboxfold": [5, 10, 29, 32], "write": [5, 10, 29, 32, 64, 66, 71, 74, 77, 114, 150, 158, 162], "caller": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "stop": [5, 10, 29, 32, 152], "invok": [5, 10, 29, 32], "Then": [5, 10, 29, 32, 157], "move": [5, 9, 10, 11, 17, 18, 20, 21, 24, 25, 26, 29, 32, 135], "upload": [5, 10, 29, 32], "transport": [5, 10, 29, 32], "task": [5, 10, 12, 29, 32, 38, 83, 109, 124, 152, 159, 165], "start": [5, 10, 29, 32, 37, 38, 154, 157, 163, 164, 169], "dry": [5, 10, 29, 32], "process_spec": [5, 10, 29, 32], "trigger": [5, 10, 29, 32], "skip": [5, 10, 29, 32], "It": [5, 7, 10, 23, 29, 31, 32, 33, 108, 122, 137, 149, 153, 155, 157, 159, 162, 165, 167, 169], "construct": [5, 10, 29, 32, 105, 107, 124, 169], "tell": [5, 10, 29, 32], "caus": [5, 10, 29, 32], "noth": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32], "self": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 38, 82, 109], "framework": [6, 22, 30, 34, 135, 136, 159, 160, 161, 163], "chargemolpars": 7, "preconfigur": [7, 23, 31, 33], "regist": [7, 23, 31, 33], "get_outputs_for_pars": [7, 23, 31, 33], "link_label": [7, 23, 31, 33], "receiv": [7, 23, 31, 168], "parse_from_nod": [7, 23, 31, 33], "directli": [7, 9, 11, 17, 18, 20, 21, 23, 24, 25, 26, 31, 33, 124, 140, 142, 151, 155, 156, 160, 167, 169], "folderdata": [7, 23, 31, 33], "mark": [7, 23, 31, 33, 109, 111, 147], "pass_to_pars": [7, 23, 31, 33], "modificationnotallow": [7, 23, 31, 33], "calcfunctionnod": [7, 23, 31, 33], "still": [7, 23, 31, 33, 84, 149, 167], "disabl": [7, 23, 31, 33], "imposs": [7, 23, 31, 33], "afterward": [7, 23, 31, 33, 137], "expect": [7, 23, 31, 33, 131, 137, 138, 162, 164, 165, 167], "produc": [7, 23, 31, 33, 155, 158, 162, 168], "test": [7, 23, 31, 33, 83, 90, 138, 143, 146, 147, 154, 155, 158, 162, 163, 164, 165, 169], "mock": [7, 23, 31, 33], "re": [7, 23, 31, 33], "retrieved_temporary_list": [7, 23, 31, 33], "auxiliari": [8, 19, 27, 38, 39], "calc_nr_explicit_electron": 8, "nelectron": 8, "calculate_added_mo": 8, "3": [8, 56, 82, 84, 85, 86, 94, 96, 100, 103, 108, 109, 111, 123, 124, 127, 131, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 159, 162, 163, 164, 165, 167, 168, 169], "return_n_electron": 8, "temperatur": [8, 72, 93], "formula": [8, 64, 85, 88, 92, 108, 109, 111, 123, 127, 135, 149, 165, 167, 168], "max": [8, 82, 96, 100, 137, 138, 151], "10": [8, 37, 38, 58, 59, 61, 72, 78, 80, 81, 82, 84, 85, 94, 96, 97, 100, 102, 103, 108, 109, 111, 123, 124, 125, 129, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 154, 159, 160, 162, 165, 167, 168, 169], "electronic_temperatur": 8, "1000": [8, 72, 93, 108, 123, 147, 149], "float": [8, 37, 57, 58, 59, 60, 61, 62, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 115, 120, 123, 124, 125, 127, 128, 129, 131, 134, 148, 154, 162], "empir": 8, "added_mo": 8, "create_aiida_nod": [8, 37], "aiida_nod": [8, 37, 108, 122], "estimate_comp_resourc": 8, "resources_dict": 8, "coeff": 8, "exp": [8, 82, 96, 100, 147], "12": [8, 84, 85, 137, 140, 142, 143, 144, 145, 147, 149, 154, 165, 167], "estim": [8, 82, 159, 160], "ntask": 8, "nelec": 8, "give": [8, 78, 124, 146, 159, 160, 164, 165, 167, 168, 169], "num_mpiprocs_per_machin": 8, "coeffici": 8, "lead": [8, 82, 137, 140, 142], "term": 8, "expon": 8, "return_rec_space_eigenvalu": 8, "cp2k_output": 8, "calcfunt": 8, "summar": 8, "1st": 8, "brillouin": [8, 94], "zone": [8, 94], "return_runtime_stat": 8, "calcjob_output_paramet": 8, "runtim": [8, 38], "statist": 8, "return_scf_paramet": 8, "return_work_chain_info": 8, "set_xc_funct": 8, "input_dict": 8, "paramt": 8, "parmat": 8, "base_core_work_chain": [9, 17, 18, 20, 24, 25, 26], "_basecoreworkchain": [9, 17, 18, 20, 24, 25, 26], "ctx": [9, 11, 12, 17, 18, 19, 20, 21, 24, 25, 26, 27], "context": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "loop": [9, 11, 17, 18, 20, 21, 24, 25, 26, 37, 166], "check_scf_converg": [9, 11, 17, 18, 20, 21, 24, 25, 26], "calc": [9, 11, 17, 18, 20, 21, 24, 25, 26], "convergenc": [9, 11, 17, 18, 20, 21, 24, 25, 26], "increment": [9, 11, 17, 18, 20, 21, 24, 25, 26], "get_output": [9, 11, 17, 18, 20, 21, 24, 25, 26], "get_process_handl": [9, 11, 17, 18, 20, 21, 24, 25, 26], "get_process_handlers_by_prior": [9, 11, 17, 18, 20, 21, 24, 25, 26], "taken": [9, 11, 17, 18, 20, 21, 24, 25, 26, 83, 148], "initialize_scf_paramet": [9, 11, 17, 18, 20, 21, 24, 25, 26], "inspect_process": [9, 11, 17, 18, 20, 21, 24, 25, 26], "analys": [9, 11, 17, 18, 20, 21, 24, 25, 26, 84, 85, 93, 117, 136, 151, 155, 161, 162, 163, 165, 167, 168], "previou": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 84, 85, 139, 140, 141, 142, 149, 161], "is_process_handl": [9, 11, 17, 18, 20, 21, 24, 25, 26], "process_handler_nam": [9, 11, 17, 18, 20, 21, 24, 25, 26], "on_exit": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "on_run": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "on_wait": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "await": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "post_process": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "run_process": [9, 11, 17, 18, 20, 21, 24, 25, 26], "next": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 38, 139, 140, 142, 154, 157], "setup": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 82, 96, 100], "flow": [9, 11, 17, 18, 20, 21, 24, 25, 26], "baserestartworkchain": [9, 11, 17, 18, 20, 21, 24, 25, 26], "setup_input": [9, 11, 17, 18, 20, 21, 24, 25, 26], "setup_wc_specific_input": [9, 11, 17, 18, 20, 21, 24, 25, 26], "should_run_process": [9, 11, 17, 18, 20, 21, 24, 25, 26], "switch_to_atomic_scf_guess": [9, 17, 18, 24, 26], "switch": [9, 11, 17, 18, 20, 21, 24, 25, 26, 142, 146, 162, 167], "guess": [9, 17, 18, 24, 26], "do": [9, 17, 18, 23, 24, 26, 57, 58, 61, 84, 85, 137, 138, 140, 141, 142, 149, 151, 157, 159, 168], "switch_to_broyden_mix": [9, 11, 17, 18, 20, 21, 24, 25, 26], "broyden": [9, 11, 17, 18, 20, 21, 24, 25, 26], "scheme": [9, 11, 17, 18, 20, 21, 24, 25, 26, 152], "numer": [9, 11, 17, 18, 20, 21, 24, 25, 26, 28, 84, 85, 100, 101, 108, 125, 152, 158, 159, 169], "instabl": [9, 11, 17, 18, 20, 21, 24, 25, 26], "pulai": [9, 11, 17, 18, 20, 21, 24, 25, 26], "switch_to_open_shell_k": [9, 11, 17, 18, 20, 21, 24, 25, 26], "turn": [9, 11, 17, 18, 20, 21, 24, 25, 26], "odd": [9, 11, 17, 18, 20, 21, 24, 25, 26, 152], "to_context": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "wc_specific_post_process": [9, 11, 17, 18, 20, 21, 24, 25, 26], "workchainnod": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "note": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 75, 104, 107, 135, 149, 159], "intern": [9, 11, 17, 18, 20, 21, 24, 25, 26, 57, 58, 59, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 114, 123, 124, 133, 135, 137, 138, 152, 163, 165, 167, 168], "level": [9, 11, 17, 18, 20, 21, 24, 25, 26, 84, 85, 139], "calcfunct": [9, 11, 17, 18, 20, 21, 24, 25, 26, 37, 154], "lose": [9, 11, 17, 18, 20, 21, 24, 25, 26], "functiontyp": [9, 11, 17, 18, 20, 21, 24, 25, 26], "abort": [9, 11, 17, 18, 20, 21, 24, 25, 26], "fail": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 38, 149, 152], "unhandl": [9, 11, 17, 18, 20, 21, 24, 25, 26], "failur": [9, 11, 17, 18, 20, 21, 24, 25, 26], "relaunch": [9, 11, 17, 18, 20, 21, 24, 25, 26], "twice": [9, 11, 17, 18, 20, 21, 24, 25, 26], "row": [9, 11, 17, 18, 20, 21, 24, 25, 26, 58, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 147, 162, 164], "matrix": [9, 11, 17, 18, 20, 21, 24, 25, 26, 42, 82, 96, 100, 108, 123, 131, 133, 152], "action": [9, 11, 17, 18, 20, 21, 24, 25, 26], "ye": [9, 11, 17, 18, 20, 21, 24, 25, 26], "boolean": [9, 11, 17, 18, 20, 21, 24, 25, 26, 147, 165, 167], "abc": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 57, 61, 108, 109, 111, 124], "tocontext": [9, 11, 17, 18, 20, 21, 24, 25, 26], "long": [9, 17, 18, 20, 24, 25, 26], "yet": [9, 17, 18, 20, 24, 25, 26, 38, 70, 73, 108, 122, 142], "exceed": [9, 12, 17, 18, 20, 24, 25, 26, 27], "workchainspec": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "conveni": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 162, 165], "syntact": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "sugar": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "interstep": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26], "assign": [9, 11, 12, 17, 18, 20, 21, 24, 25, 26, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 165, 167], "bandsdata": [10, 23, 84, 85], "xydata": [10, 23], "base_opt_work_chain": [11, 21], "_baseoptimizationworkchain": [11, 21], "initialize_opt_paramet": [11, 21], "opt_post_process": [11, 21], "resubmit_unconverged_geometri": [11, 21], "resubmit": [11, 21], "unconverg": [11, 21], "tighter": [11, 21], "resubmit_unfinished_calcul": [11, 21], "walltim": [11, 21, 152], "hit": [11, 21], "interrupt": [11, 21], "set_additional_optimization_p": [11, 21], "holder": [11, 21], "stress": 11, "tensor": [11, 160], "analyst": 11, "algorithm": [11, 21, 148, 169], "advanc": 12, "combin": [12, 81, 84, 85, 138, 139, 140, 141, 142, 144, 154, 159, 160, 161], "basic": [12, 147, 163], "enable_persist": 12, "dft_cell_opt": 12, "electronic_structur": 12, "find_scf_paramet": 12, "post": [12, 24, 26, 155], "routin": [12, 16, 105, 152, 155, 158], "run_el_prop_wc": 12, "task_label": [12, 19, 38], "work_chain": [12, 38], "extra_input": 12, "set_input_paramet": 12, "work_chain_build": 12, "input_kei": 12, "child": 12, "should_run_cell_opt": 12, "find_scf_p": [12, 152], "findscfparamet": 12, "geo_opt": [12, 152], "geoopt": 12, "geo_preopt": 12, "inspect_find_scf_p_result": 12, "inspect_geo_opt_result": 12, "should_run_add_calc": 12, "should_run_slab_conv": 12, "fulfil": [12, 27], "bandstructurewc": 12, "celloptwc": 12, "eigenvalueswc": 12, "findscfparameterswc": 12, "geooptwc": 12, "pdoswc": 12, "partialchargeswc": 12, "cwd": [14, 15, 16, 19, 105, 115], "full": [18, 133, 167], "statement": 18, "elprop_setup": 19, "set_ctx_parameters_from_protocol": 19, "protocol_dict": 19, "general_paramet": 19, "auxiliary_funct": 22, "band_structure_work_chain": 22, "cell_opt_work_chain": 22, "combined_work_chain": 22, "core_work_chain_handl": 22, "core_work_chain_input": 22, "core_work_chain_opt": 22, "core_work_chain_scf": 22, "cube_work_chain": 22, "eigenvalues_work_chain": 22, "el_properties_util": 22, "find_scf_p_work_chain": 22, "geo_opt_work_chain": 22, "partial_charges_work_chain": 22, "pdos_work_chain": 22, "planar_fields_work_chain": 22, "surface_opt_util": 22, "work_chain_spec": 22, "cp2kpartialchargespars": 23, "_cp2kbasepars": 23, "design": [23, 152, 153, 154, 163, 167], "extra_output_funct": 23, "_parse_gaussian_cub": 23, "parser_typ": [23, 66, 68], "partial_charg": [23, 66, 68, 85, 144, 152], "cp2kstandardpars": 23, "_parse_pdo": 23, "cp2ktrajectorypars": 23, "motion": 23, "trajectori": [23, 66, 68], "gcubedata": 23, "setup_external_partial_charge_analysi": 24, "extern": [24, 26, 45, 95, 106, 107, 108, 109, 111, 124, 135, 165], "deriv": [25, 160], "2d": [26, 57, 58, 61, 94, 151], "setup_critic2_calcul": 26, "surfopt_setup": 27, "surfopt_should_run_add_calc": 27, "surfopt_should_run_slab_conv": 27, "update_surf_slab": 27, "create_surface_slab": [27, 37, 169], "core_work_chain_exit_cod": 28, "numerical_p_spec": 28, "seekpath_p_spec": 28, "structural_p_spec": 28, "critic2pars": 31, "validate_elements_to_enumer": 32, "_": [32, 127, 147], "validate_input": 32, "elements_to_emnumer": 32, "validate_makestr_path": 32, "validate_sites_to_enumer": 32, "validate_structur": 32, "fraction": [32, 82, 127, 145, 159], "occup": [32, 65, 66, 70, 73, 84, 85, 139, 140, 142], "enumlibpars": 33, "poscar": 33, "strucuredata": 33, "enum_calcjob": 34, "enum_pars": 34, "enumlibcalcjob": 35, "check_kind": 35, "kind_nam": 35, "get_kindnam": 35, "to_enumer": 35, "workflow_build": [36, 63, 154], "sever": [37, 38, 66, 67, 105, 107, 108, 109, 111, 122, 124, 128, 130, 146, 147, 148, 152, 154, 155, 158, 159, 161, 162, 163, 165, 166, 168], "concatenate_workflow_result": 37, "workflow_results1": 37, "workflow_results2": 37, "map_result1": 37, "map_result2": 37, "parent_nod": [37, 38, 154], "concaten": [37, 58, 61], "panda": [37, 38, 46, 82, 85, 88, 92, 108, 122, 149, 154, 158, 165], "frame": [37, 38, 85, 88, 92, 108, 122, 149, 165], "datafram": [37, 38, 82, 85, 88, 92, 108, 122, 124, 149, 154, 165], "first": [37, 57, 58, 59, 61, 84, 85, 124, 135, 137, 138, 140, 142, 143, 144, 145, 148, 149, 150, 154, 157, 159, 163, 164, 165, 167, 169], "connect": [37, 149, 168], "both": [37, 84, 85, 108, 125, 137, 149, 150, 151, 152, 154, 165, 167], "nr_layer": [37, 108, 125, 169], "get_results_cp2k_legacy_wc": 37, "aiida_group_label": 37, "depreci": [37, 84, 85, 88, 91, 104, 107, 108, 109, 111, 124, 135, 149], "electronicproperti": 37, "obtain_value_from_aiida_nod": 37, "obtain": [37, 78, 84, 85, 108, 109, 111, 123, 124, 129, 139, 148, 149, 165, 166, 167, 169], "seekpath_structure_analysi": 37, "wrap": [37, 104, 105, 107, 108, 111, 122, 151, 166, 167], "workflow_queu": 37, "maxrun_workflow": 37, "running_workflows_list": 37, "waiting_tim": 37, "helper": [37, 83], "control": [37, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 135, 154, 162, 165, 169], "simultan": 37, "parallel": [37, 82, 124, 159, 165], "minut": 37, "workflowbuild": [38, 153, 154, 155], "workflowprotocolerror": 38, "incomplet": 38, "inconsist": 38, "with_traceback": [38, 109], "tb": [38, 109], "__traceback__": [38, 109], "multipleworkflowbuild": [38, 153, 155], "aiida_group": 38, "graph_attribut": [38, 154], "graph_attr": [38, 154], "6": [38, 56, 82, 94, 96, 100, 127, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 154, 159, 162, 165, 167, 168, 169], "use_uuid": [38, 108, 111, 122], "_baseworkflowbuild": 38, "manag": [38, 153, 154, 155, 158], "worklfow": 38, "graphiz": 38, "graph": [38, 46, 100, 158], "task_queu": 38, "user_input": [38, 154], "add_parent_nod": [38, 154], "add_to_task_queu": [38, 154], "run_typ": [38, 154], "adopt_input_nodes_from_workflow": 38, "execute_task_queu": [38, 154], "interv": [38, 149, 154], "node_id": 38, "seri": 38, "consecut": [38, 154, 159], "from_fil": [38, 108, 111, 135, 148, 154, 167], "file_nam": [38, 64, 65, 66, 68, 69, 70, 73, 76], "generate_input": [38, 154], "generate_provenance_graph": [38, 154], "parent_node_index": 38, "import_parent_nodes_from_aiida_db": 38, "group_label": [38, 108, 122, 125, 129, 165, 169], "import_parent_nodes_from_pandas_df": 38, "data_fram": [38, 85, 88, 92, 108, 122], "extract": [38, 64, 82, 85, 92, 141, 152, 155], "column": [38, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 122, 137, 162, 164, 165], "reset_task_queu": 38, "reset": [38, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 164], "return_process_nod": [38, 154], "return_result": [38, 154], "return_runtim": 38, "return_workflow_st": [38, 154], "unformat": 38, "run_task": [38, 154], "set_user_input": [38, 154], "input_port": 38, "submit_task": [38, 154], "to_fil": [38, 108, 111, 135, 154, 167], "upper": [38, 60], "bound": 38, "yaml": [38, 63, 71, 72, 138, 141, 151, 154, 158], "tool": [38, 153], "visual": [38, 57, 61, 137, 138, 139, 140, 141, 142, 144, 145, 149, 150, 155, 158], "structure_nod": [38, 108, 111], "aiida_uuid": 38, "univers": 38, "themselv": 38, "styler": 38, "complex": [38, 144], "completed_task": [38, 154], "failed_task": [38, 154], "running_task": [38, 154], "determine_workflow_st": [38, 154], "ones": 38, "returnedbuild": 38, "proc_nod": 38, "aiidacod": 38, "wrapper": [40, 46, 53, 56, 96, 124, 152], "ase": [40, 108, 111, 122, 129, 133, 134, 135, 150, 165, 167, 169], "Ase": 41, "interfac": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 85, 90, 108, 111, 123, 135, 141, 146, 149, 154, 155, 156, 158, 159, 161, 162, 163, 165, 166], "calc_acsf_descriptor": 42, "r_cut": [42, 82, 96, 100], "g2_param": [42, 82, 96, 100], "g3_param": [42, 82, 96, 100], "g4_param": [42, 82, 96, 100], "g5_param": [42, 82, 96, 100], "spars": [42, 82, 96, 100], "dscribe_n_job": [42, 82, 96, 100], "dscribe_only_physical_cor": [42, 82, 96, 100], "acsf": [42, 82, 96, 100, 160], "descriptor": [42, 82, 96, 100, 160], "calc_interaction_matrix": 42, "matrix_typ": [42, 82, 96, 100], "n_atoms_max": [42, 82, 96, 100], "enforce_r": [42, 82, 96, 100], "permut": [42, 82, 96, 100], "sigma": [42, 62, 82, 84, 85, 91, 96, 97, 100, 108, 109, 111, 118, 124, 131, 137, 139, 149, 159], "seed": [42, 82, 96, 100], "ewald_accuraci": [42, 82, 96, 100], "ewald_w": [42, 82, 96, 100], "ewald_r_cut": [42, 82, 96, 100], "ewald_g_cut": [42, 82, 96, 100], "ewald_a": [42, 82, 96, 100], "interact": [42, 82, 96, 100, 142, 149, 155, 160, 162], "calc_mbtr_descriptor": 42, "weight": [42, 78, 82, 96, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124], "normalize_gaussian": [42, 82, 96, 100], "mbtr": [42, 82, 96, 100, 160], "calc_soap_descriptor": 42, "n_max": [42, 82, 96, 100], "l_max": [42, 82, 96, 100], "rbf": [42, 82, 96, 100], "compress": [42, 82, 96, 100], "averag": [42, 82, 85, 86, 96, 100], "soap": [42, 82, 96, 100, 160], "return_descriptor": 42, "obj": 42, "networkx": [43, 99, 100, 158], "graphviz": [43, 99, 100, 154, 158], "h5py": [44, 158], "third": [46, 149], "parti": 46, "ase_atom": [46, 108, 111, 122], "ase_surfac": 46, "dscribe": [46, 82, 96, 100, 158, 160], "hdf5": [46, 108, 122, 158, 165], "import_opt_depend": 46, "mp": [46, 143, 149, 168], "mp_openapi": 46, "optimad": [46, 108, 123, 168], "oqmd": [46, 149, 168], "phonopi": [46, 63, 71, 93, 136, 155, 158, 161], "pymatgen": [46, 108, 111, 122, 123, 149, 158], "pyxtal": [46, 108, 123, 158], "materi": [47, 48, 50, 78, 85, 88, 108, 123, 136, 150, 155, 158, 161, 167, 168], "onlin": [47, 48, 49, 108, 123, 143, 149, 155, 158, 165, 166], "openapi": [48, 108, 123], "queri": [49, 108, 122, 123, 136, 153, 165, 168], "quantum": [50, 73, 84, 85, 108, 123, 135, 136, 139, 140, 141, 143, 145, 155, 158, 161, 168], "nr_of_space_group": 54, "space_group_limit": 54, "centrosymmetric_pg": 56, "m": [56, 156, 167], "mmm": 56, "4": [56, 82, 84, 85, 86, 94, 96, 100, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 159, 162, 163, 164, 165, 167, 168, 169], "3m": 56, "discretizedaxi": [57, 61, 137, 138, 151], "axis_typ": [57, 61, 138, 151], "axi": [57, 61, 62, 75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 138, 139, 151, 161, 163], "1d": [57, 61, 82, 96, 100], "plot": [57, 58, 61, 63, 75, 135, 136, 138, 149, 150, 151, 154, 155, 158, 164, 170], "y": [57, 58, 59, 60, 61, 62, 75, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 131, 135, 137, 138, 139, 142, 143, 146, 147, 151, 154, 162, 163], "discretization_method": [57, 61, 137, 138, 151], "is_empti": [57, 61], "dimens": [57, 61, 72, 108, 123], "numpi": [57, 58, 59, 61, 62, 80, 81, 82, 137, 138, 139, 141, 142, 147, 151, 155, 158, 159], "discretize_axi": [57, 61, 137, 138, 151], "transpos": [57, 61], "merg": [57, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 128, 162, 165], "valueerror": [57, 61, 105, 107, 129], "callabl": [57, 61, 108, 109, 111, 124], "chosen": [57, 61, 82, 96, 100, 137, 142, 144, 154], "accept": [57, 61], "_available_discretization_method": [57, 61], "discretizedgrid": [57, 59, 61, 137, 138], "plot_grid": [57, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 137, 138], "create_grid": [57, 61, 137, 138, 151], "limit_arrai": 57, "input_arrai": 57, "min_valu": [57, 60, 108, 109, 123], "max_valu": [57, 60, 108, 109, 123], "cover": [57, 137, 161], "index": [57, 84, 85, 92, 104, 105, 107, 108, 109, 111, 122, 124, 142, 165, 169], "input_list": 57, "spectra": [58, 59, 61, 85, 91, 147, 161], "functiondiscretizationfingerprint": [58, 61], "doi": [58, 59, 61, 80, 81, 82, 96, 97, 100, 102, 103, 108, 109, 111, 124, 129, 135, 138, 145, 148, 149, 150, 151, 154, 159, 160, 169], "1038": [58, 59, 61, 138, 151, 169], "s41597": [58, 59, 61, 138, 151], "022": [58, 59, 61, 138, 151], "01754": [58, 59, 61, 138, 151], "z": [58, 59, 61, 85, 89, 131, 137, 138, 143, 151, 154], "calculate_fingerprint": [58, 61, 138], "x_valu": [58, 59, 60, 61, 75, 85, 90, 91, 147], "y_valu": [58, 59, 61, 75, 85, 90, 91, 147], "compare_fingerprint": [58, 61, 138], "label_1": [58, 59, 61, 84, 85, 86], "label_2": [58, 59, 61, 84, 85, 86], "plot_fingerprint": [58, 61, 138], "discret": [58, 59, 61, 63, 82, 96, 100, 124, 136, 147, 151, 155], "interpret": [58, 61, 159], "dataset": [58, 59, 61, 62, 83, 85, 88, 140, 142, 144, 146], "individu": [58, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 100, 102, 108, 109, 111, 124, 144, 146, 149, 154, 159, 163, 164, 167], "similar": [58, 59, 61, 124, 138, 139, 140, 141, 142, 150, 165, 167], "measur": [58, 61, 124, 138], "matplotlib": [58, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 135, 138, 146, 147, 149, 155, 158, 162], "pyplot": [58, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 138, 147], "figur": [58, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 144, 147, 162], "plt": [58, 61, 138, 147], "analyz": [59, 61, 108, 124, 149, 151, 153], "functionanalysi": [59, 61, 151], "allowed_distance_method": [59, 61, 151], "calculate_correl": [59, 61, 151], "label1": [59, 61], "label2": [59, 61], "pearson": [59, 61, 151], "calculate_discrete_fingerprint": [59, 61, 151], "fingerprint": [59, 61, 63, 80, 81, 82, 85, 87, 97, 108, 109, 111, 118, 124, 136, 138, 149, 159, 160, 161, 167], "calculate_dist": [59, 61, 108, 109, 111, 116, 124, 135, 151, 165, 167], "compare_area": [59, 61, 151], "enclos": [59, 61], "compare_functions_by_discrete_fingerprint": [59, 61, 151], "import_data": [59, 61, 151], "data_label": [59, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 143, 144, 145, 147, 162, 163, 164], "euclidian": [59, 61, 151], "metric": [59, 61, 63, 79, 80, 159], "ab": [59, 61, 155], "ratio": [59, 61, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 161, 162, 163, 168], "a1": [59, 61], "a2": [59, 61], "get_convex_hul": 60, "lower_hul": 60, "upper_hul": 60, "001": [60, 82, 96, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 142, 148, 149], "convex": [60, 85, 88, 124, 149], "n": [60, 82, 96, 100, 108, 111, 131, 144, 148, 154, 167], "dimension": [60, 131, 155], "scipi": [60, 158], "far": [60, 152, 159, 162], "npoint": [60, 72], "ndim": 60, "part": [60, 84, 85, 100, 101, 137, 153, 167], "below": [60, 84, 85, 152, 158, 165, 167], "zero": [60, 84, 85, 108, 123, 125], "abov": [60, 137], "get_minimum_maximum_point": 60, "modul": [61, 66, 108, 130, 143, 167], "function_comparison": [61, 63], "hull": [61, 63, 85, 88, 124, 149], "apply_smear": 62, "sampling_width": 62, "5": [62, 82, 84, 85, 86, 94, 96, 97, 98, 99, 100, 101, 104, 105, 107, 108, 109, 111, 123, 124, 125, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 159, 162, 163, 164, 165, 167, 168, 169], "radiu": [62, 108, 109, 111, 124, 129, 131, 148], "sampl": [62, 82], "width": [62, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 137, 146, 162], "adjac": 62, "kernel": [62, 63, 79, 82, 159], "available_smearing_method": 62, "aiida_data": 63, "aiida_workflow": [63, 135, 154], "fct": [63, 137, 138, 151, 155], "io": [63, 108, 111, 135, 139, 140, 141, 142, 144, 145, 146, 150, 162], "cp2k": [63, 71, 135, 136, 153, 154, 155, 161, 162], "bands_do": [63, 66, 71], "cif": [63, 71], "critic2": [63, 71, 135, 136, 152, 155, 161], "fhi_aim": [63, 71, 135, 140], "qe": [63, 71, 135, 142, 145], "xmgrace": [63, 71], "zeo": [63, 71, 108, 111, 135], "ml": [63, 155, 158, 160], "cell_grid_search": [63, 79, 159], "transform": [63, 78, 79, 80, 85, 91, 169], "strct": [63, 78, 82, 83, 85, 88, 135, 143, 145, 148, 149, 150, 155, 159, 165, 166, 167, 168, 169], "ext_analysi": [63, 108, 145, 165, 167], "decor": [63, 74, 100, 107, 108, 167], "ext_manipul": [63, 108, 135, 167], "add_structur": [63, 104, 107, 108], "strct_io": [63, 108], "chem_formula": [63, 108, 109, 111, 123, 130, 135, 167], "dict_tool": [63, 130, 135], "element_properti": [63, 130, 135, 167], "math": [63, 130], "space_group": [63, 85, 88, 130, 149, 167], "read": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 84, 85, 108, 111, 114, 122, 139, 140, 142, 145, 158], "read_fil": 64, "extract_structur": 64, "strct_check_chem_formula": 64, "strct_get_sym_op_from_sg": 64, "chemic": [64, 82, 85, 88, 92, 96, 100, 108, 109, 111, 123, 127, 129, 135, 161, 168], "read_atom_proj_density_of_st": [65, 66, 70, 72, 73, 135, 139, 140, 141, 142], "folder_path": [65, 66, 67, 70, 73], "read_band_structur": [65, 66, 70, 72, 73, 75, 139, 140, 141, 142, 162], "read_optimized_structur": [66, 67, 135], "ouput": [66, 67, 73], "farm": [66, 67], "read_restart_structur": [66, 67, 135], "read_stdout": [66, 68, 69, 135, 144], "quantiti": [66, 68, 88, 127, 135, 153, 155], "read_plan": [69, 145], "fhi": [70, 136, 155, 161], "aim": [70, 136, 155, 161, 166], "soc": [70, 140], "load_raw": [70, 140], "coupl": [70, 140], "activ": [70, 142, 156], "appendix": 70, "raw": [70, 140], "polar": [70, 73, 82, 84, 85, 142], "th": [70, 73], "read_total_density_of_st": [70, 72, 73, 135, 140, 141, 142], "parameter_file_nam": 72, "mesh": [72, 141], "100": [72, 82, 96, 100, 143, 144, 169], "force_sets_file_nam": [72, 141], "force_constants_file_nam": 72, "phonopy_kwarg": 72, "phonon": [72, 158, 161], "force_constants_filenam": 72, "ceonstant": 72, "path_label": [72, 84, 85, 139, 140, 141, 142, 143], "high": [72, 84, 85, 142, 149, 155, 158, 159, 165, 166, 168, 170], "reference_cel": [72, 84, 85], "read_qha_properti": 72, "calculation_fold": 72, "thermal_properties_file_nam": 72, "ev_file_nam": 72, "std_output_file_nam": 72, "t_min": 72, "t_max": 72, "t_step": 72, "quasi": [72, 93], "harmon": [72, 82, 93, 96, 100], "approxim": 72, "volum": [72, 93, 108, 111, 123, 160, 165, 167], "thermal": [72, 93, 136, 161], "qha": 72, "read_thermal_properti": 72, "espresso": [73, 136, 139, 140, 141, 143, 145, 155, 161], "read_input_structur": [73, 145], "ibrav": 73, "fulli": 73, "custom_open": 74, "r": [74, 127, 143, 145], "distinguish": [74, 78, 82, 97, 100, 102, 108, 109, 111, 124, 142, 144, 167], "class": [74, 79, 95, 116, 132, 133, 136, 137, 139, 140, 141, 142, 143, 147, 148, 149, 150, 151, 152, 155, 159, 160, 164, 166, 167, 168, 169], "singlefiledata": 74, "read_multipl": 74, "pattern": [74, 139, 140, 142], "is_read_strct_method": 74, "preset_kwarg": 74, "read_structur": [74, 108, 111], "file_path": [75, 76, 77, 108, 111, 114, 122], "read_xmgrace_fil": 75, "fili": 75, "veri": [75, 139, 140, 141, 142, 147, 155, 167], "xy": [75, 84, 85], "color": [75, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 140, 142, 146, 162, 163, 164], "todo": [75, 84, 85, 159], "increas": [75, 108, 109, 111, 124, 155, 159], "tick_label": 75, "po": [75, 149], "accord": [76, 82], "ruamel": [76, 158], "load_yaml_fil": 76, "typ": [76, 144], "safe": 76, "store_in_yaml_fil": 76, "write_to_fil": 77, "struct_dict": [77, 145], "fit": [78, 82, 159], "crystallin": [78, 84, 85, 104, 115, 122, 153, 155, 159, 167], "cellgridsearch": [78, 159], "length_scaling_factor": [78, 159], "angle_scaling_factor": [78, 159], "9": [78, 85, 86, 137, 138, 139, 140, 141, 142, 144, 146, 147, 149, 154, 157, 159, 165, 167, 168], "symprec": [78, 108, 109, 111, 124, 125, 169], "005": [78, 82, 84, 85, 97, 100, 102, 108, 109, 111, 124, 125, 149, 169], "angle_toler": [78, 108, 109, 111, 124, 125, 169], "hall_numb": [78, 108, 109, 111, 124, 125, 133, 167, 169], "ffprint_r_max": 78, "ffprint_delta_bin": 78, "ffprint_sigma": 78, "05": [78, 82, 96, 97, 100, 101, 108, 109, 111, 124, 137, 151, 159], "ffprint_use_weight": 78, "ffprint_distinguish_kind": 78, "target_valu": 78, "brute": 78, "approach": [78, 148], "maintain": [78, 135, 155, 159, 169], "comparison": [78, 112, 124, 127, 138, 145, 147, 159, 165], "hall": [78, 108, 109, 111, 124, 125, 133], "symbol": [78, 82, 85, 88, 92, 96, 100, 104, 105, 107, 108, 109, 111, 122, 124, 125, 129, 133, 165, 167], "bin": [78, 82, 83, 85, 87, 97, 100, 102, 108, 109, 111, 123, 124, 137, 156, 159], "descrit": [78, 82, 97, 100, 102, 108, 109, 111, 124], "pair": [78, 82, 85, 87, 96, 100, 105, 107, 108, 109, 111, 124, 142, 149, 150, 160], "ni0": [78, 82, 97, 100, 102, 108, 109, 111, 122, 124], "target": [78, 82, 83, 105, 107, 149, 159], "score": [78, 159], "model": [78, 80, 81, 155, 160], "set_model": [78, 159], "search_spac": 78, "vari": [78, 105, 107], "get_optimized_structur": 78, "lowest": [78, 84, 85, 138], "return_initial_scor": [78, 159], "return_search_spac": 78, "set_initial_structur": [78, 159], "function_nam": 78, "scikit": [78, 80, 81, 82, 83, 155, 158, 159], "learn": [78, 79, 80, 81, 82, 83, 155, 158, 170], "predict": 78, "set_target_structur": 78, "variat": 78, "max_scor": 78, "best": 78, "max_param": 78, "featur": [78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 139, 140, 141, 142, 143, 153, 154, 158, 160, 161, 164, 165, 167], "machin": [79, 83, 152, 155, 158, 170], "krr_ffprint_cosin": [80, 160], "cosin": [80, 81, 124, 150, 151, 160], "f": [80, 81, 82, 85, 87, 97, 108, 109, 111, 118, 124, 136, 140, 142, 145, 149, 151, 154, 159, 160, 161, 167], "1063": [80, 81, 82, 96, 100, 108, 109, 111, 124, 149, 150, 154, 159, 160], "3079326": [80, 81, 108, 109, 111, 124, 149, 150, 159, 160], "krr_ffprint_laplac": [80, 159, 160], "gamma": [80, 140, 141, 142, 143, 152], "laplacian": [80, 160], "ffprint_cosin": [81, 160], "fprint1": 81, "fprint2": 81, "To": [81, 139, 141, 142, 144, 148, 149, 155, 157, 158, 165, 166, 167, 168], "structureffprinttransform": [81, 82, 159, 160], "add_head": [81, 82, 159], "molecul": [82, 98, 99, 100, 105, 107, 108, 109, 111, 122, 124, 135, 145, 155, 165], "structureacsftransform": [82, 160], "7": [82, 84, 85, 86, 94, 96, 100, 108, 109, 111, 124, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 159, 162, 165, 167, 168, 169], "n_proc": [82, 124, 149, 159, 165], "chunksiz": [82, 124, 159, 165], "50": [82, 124, 141, 144, 149, 154], "verbos": [82, 124, 149, 159, 165], "_basedscribetransform": 82, "3553717": [82, 96, 100, 160], "eta": [82, 96, 100], "r_": [82, 96, 100], "kappa": [82, 96, 100], "triplet": [82, 96, 100], "zeta": [82, 96, 100], "lambda": [82, 96, 100], "dens": [82, 96, 100], "physicsl": [82, 96, 100], "hand": [82, 124, 143], "progress": [82, 84, 124, 158, 165], "bar": [82, 85, 86, 90, 124, 144, 146, 158, 165], "precomputed_properti": [82, 159], "precomput": [82, 159], "add_precomputed_properti": 82, "structure_oper": [82, 159], "clear_precomputed_properti": 82, "clear": 82, "fit_transform": 82, "fit_param": 82, "get_feature_names_out": 82, "input_featur": 82, "get_metadata_rout": 82, "rout": 82, "get_param": 82, "deep": 82, "precompute_parameter_spac": [82, 159], "param_grid": 82, "reus": [82, 108, 111, 159], "later": [82, 90, 108, 111, 145, 159], "set_output": 82, "set_param": 82, "structureoper": [82, 95, 109, 124, 135, 148, 149, 150, 159, 166], "structurecollect": [82, 83, 85, 88, 108, 109, 111, 116, 122, 123, 124, 125, 148, 149, 150, 159, 166, 167, 168, 169], "n_sampl": 82, "n_featur": 82, "n_output": 82, "unsupervis": 82, "x_new": 82, "ndarrai": 82, "n_features_new": 82, "pleas": [82, 104, 107, 108, 111, 151, 154, 155], "guid": [82, 155], "how": [82, 85, 86, 136, 140, 142, 143, 151, 155, 158, 159, 161, 167], "mechan": 82, "metadatarequest": 82, "encapsul": 82, "subobject": 82, "sphx_glr_auto_examples_miscellaneous_plot_set_output": 82, "api": [82, 108, 123, 149], "unchang": [82, 167], "simpl": [82, 136, 149, 161, 163], "pipelin": [82, 155, 159, 160], "latter": [82, 154, 165], "__": [82, 154], "structurechemordertransform": [82, 160], "r_max": [82, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 116, 118, 120, 124, 149, 159, 165, 167], "15": [82, 97, 100, 101, 104, 105, 107, 124, 137, 139, 140, 142, 144, 145, 146, 149, 154, 159, 165, 167], "max_shel": [82, 100, 103], "_basestructuretransform": 82, "warren": [82, 100, 103, 160], "cowlei": [82, 100, 103, 160], "1103": [82, 96, 100, 102, 103, 160], "physrevb": [82, 96, 100, 102, 103, 160], "96": [82, 100, 103, 137, 144, 160], "024104": [82, 100, 103, 160], "neighbour": [82, 98, 99, 100, 103, 104, 105, 107, 108, 109, 111, 124, 148, 160], "evalu": [82, 100, 103, 159], "structurecompositiontransform": [82, 160], "distinguish_kind": [82, 97, 100, 102, 108, 109, 111, 118, 124, 159], "structurecoordinationtransform": [82, 160], "minimum_dist": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 148], "min_dist_delta": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 124], "n_nearest_neighbour": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 124, 148], "econ_toler": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 124, 148], "econ_conv_threshold": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 124, 148], "voronoi_weight_typ": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 124, 148], "rel_solid_angl": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 148], "voronoi_weight_threshold": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 113, 124, 148], "feature_typ": 82, "nrs_avg": [82, 148], "nrs_stdev": [82, 148], "nrs_max": [82, 148], "nrs_min": [82, 148], "distance_avg": [82, 148], "distance_stdev": [82, 148], "distance_max": [82, 148], "distance_min": [82, 148], "nearest": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 148], "n_neighbour": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124], "econ": [82, 98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 148], "okeeffe_weight_threshold": [82, 98, 100, 104, 105, 107, 108, 109, 111, 113, 124], "indirect": [82, 84, 85, 108, 109, 111, 124], "okeeff": [82, 108, 109, 111, 124], "structuredensitytransform": [82, 160], "delta_bin": [82, 97, 100, 102, 108, 109, 111, 118, 124, 149, 159], "use_weight": [82, 124, 150], "composit": [82, 83, 85, 88, 108, 122, 123, 124, 149, 161, 168], "ffprint": [82, 159], "structurembtrtransform": [82, 160], "inverse_dist": [82, 96, 100], "min": [82, 96, 100, 137, 138, 151], "l2": [82, 96, 100], "1088": [82, 96, 100, 160], "2632": [82, 96, 100, 160], "2153": [82, 96, 100, 160], "aca005": [82, 96, 100, 160], "n_atom": [82, 96, 100], "valle_oganov": [82, 96, 100], "structurematrixtransform": [82, 160], "coulomb": [82, 96, 100], "eigenspectrum": [82, 96, 100], "1e": [82, 96, 100], "matric": [82, 96, 100, 160], "1002": [82, 96, 100, 160], "qua": [82, 96, 100, 160], "24917": [82, 96, 100, 160], "ewald_sum": [82, 96, 100], "sine": [82, 96, 100], "sorted_l2": [82, 96, 100], "random": [82, 96, 100, 105, 107, 108, 123, 135, 151, 158, 159], "standar": [82, 96, 100], "deviat": [82, 96, 100, 137], "distribut": [82, 84, 85, 87, 91, 96, 100, 102, 137, 146, 149, 150, 159, 160, 161, 164, 167], "nois": [82, 96, 100], "attibut": [82, 96, 100], "accuraci": [82, 96, 100], "ewald": [82, 96, 100], "sum": [82, 84, 85, 86, 96, 100, 102, 105, 107, 108, 109, 111, 124, 135, 139, 140, 142, 144, 148, 151], "structureprdftransform": [82, 160], "radial": [82, 85, 87, 96, 100, 102, 150, 160, 161, 167], "89": [82, 100, 102, 137, 144, 154, 160], "205118": [82, 100, 102, 160], "structuresoaptransform": [82, 160], "gto": [82, 96, 100], "species_weight": [82, 96, 100], "87": [82, 96, 100, 137, 143, 144, 149, 160], "184115": [82, 96, 100, 160], "degre": [82, 96, 100], "spheric": [82, 96, 100], "polynomi": [82, 96, 100], "over": [82, 96, 100, 102, 108, 109, 111, 124, 139, 140, 142, 146], "center": [82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 100, 105, 107, 131, 147], "interest": [82, 96, 100], "inner": [82, 96, 100], "outer": [82, 96, 100], "train_test_split_cryst": [83, 159], "structure_collect": [83, 85, 88, 108, 125, 149, 159], "target_attribut": [83, 159], "train_siz": [83, 159], "test_siz": [83, 159], "target_bin": [83, 159], "composition_bin": [83, 159], "exclude_label": 83, "return_structure_collect": [83, 159], "split": [83, 144, 149], "train": [83, 155], "strafi": 83, "scalar": [83, 85, 89], "histogram": [83, 149, 159], "train_test_split": [83, 159], "subset_train": 83, "subset_test": 83, "target_train": 83, "target_test": 83, "separ": [84, 147, 163, 169], "bandstructuredosplot": [84, 85, 139, 140, 141, 142, 161], "show_legend": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 144, 147, 149, 150, 162], "subplot_hspac": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 147, 162], "subplot_wspac": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 147, 162, 164], "subplot_nrow": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 144, 145, 146, 147, 162, 164], "subplot_ncol": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 144, 145, 146, 147, 162, 164], "subplot_sharex": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "subplot_sharei": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "subplot_gridspec": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 146, 162, 164], "pdos_plot_typ": [84, 85], "tdos_plot_typ": [84, 85], "fill": [84, 85, 90], "dos_comp_threshold": [84, 85], "47": [84, 85, 94, 137, 140, 143, 144], "smearing_method": [84, 85, 91, 147], "smearing_delta": [84, 85, 91, 139, 142, 147], "smearing_sigma": [84, 85, 91, 139, 142, 147], "sum_pdo": [84, 85, 139, 140, 142], "per_atom": [84, 85], "base_plot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 135], "_baseplot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "base_mixin": [84, 85, 90, 91], "_hlinemixin": [84, 85, 90], "_vlinemixin": [84, 85, 90, 91], "base_band_structur": [84, 85], "_basebandstructur": [84, 85], "base_do": [84, 85], "_basedensityofst": [84, 85], "detect_equivalent_kind": [84, 85], "tdo": [84, 85, 140, 141, 142], "custom_alpha": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "alpha": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "opac": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "custom_color": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "custom_linestyl": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 140, 162], "style": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 140, 142, 155, 162], "custom_linewidth": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "custom_mark": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "marker": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "custom_xticklabel": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "tick": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 157, 162], "custom_xtick": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "custom_yticklabel": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "custom_ytick": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "equal_aspect_ratio": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "equal": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162, 167], "aspect": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "legend_bbox_to_anchor": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 147, 149, 162], "box": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 157, 162], "anchor": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "legend_loc": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 147, 162], "legend": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 144, 162], "legend_ncol": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "legend_sort_entri": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "sort": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "draw": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "show_colorbar": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145], "show": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 136, 137, 138, 139, 141, 142, 143, 144, 147, 155, 162, 164, 166], "colorbar": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "show_grid": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "show_plot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 143, 144, 147, 162], "store_path": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 142, 144, 147, 162], "store_plot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 142, 144, 147, 162], "style_sheet": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 147, 162], "sheet": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "subplot_adjust": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "subplots_adjust": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "subplot_align_ylabel": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 135, 162], "align": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 137, 162], "vertic": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 131, 149, 162], "subplot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 135, 144, 146, 161, 162, 163], "subplot_share_colorbar": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "subplot_share_legend": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "share": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 135, 149, 154, 162, 163], "subplot_sup_titl": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "whole": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 142, 162], "subplot_sup_x_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "subplot_sup_y_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "subplot_tight_layout": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 144, 162], "tight": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 149, 162], "layout": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "horizont": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 162], "x_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 141, 144, 145, 147, 162, 163], "shown": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 122, 137, 165, 167], "x_rang": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 142, 145, 147, 162], "y_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 141, 145, 147, 149, 150, 162, 163], "y_rang": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 142, 143, 145, 147, 162], "add_hlin": [84, 85, 90, 146], "x_min": [84, 85, 90, 146], "x_max": [84, 85, 90, 146], "line_styl": [84, 85, 90, 91], "foreground": [84, 85, 90, 91, 154], "subplot_assign": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 146, 147, 164], "add_vlin": [84, 85, 90, 91, 146], "y_min": [84, 85, 90, 91, 146], "y_max": [84, 85, 90, 91, 146], "analyse_band": [84, 85, 142], "band_idx": [84, 85], "auto_set_axis_properti": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "set_x_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "set_y_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 145, 162], "auto": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "calculate_band_gap": [84, 85, 142], "vbm_band_idx": [84, 85, 142], "gap": [84, 85, 92, 142], "calculate_energy_diff_at_kpoint": [84, 85, 142], "band_idx1": [84, 85], "band_idx2": [84, 85], "calculate_smallest_direct_energy_diff": [84, 85, 142], "smallest": [84, 85, 108, 109, 111, 124, 142], "calculate_smallest_energy_diff": [84, 85, 142], "create_default_gridspec": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 146, 147, 164], "nrow": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 164], "ncol": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 164], "nplot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 164], "height": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 146, 162], "center_last_row": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 164], "import_band_structur": [84, 85, 139, 140, 141, 142, 143, 162], "unit_i": [84, 85, 139, 140, 142, 143], "align_to_vbm": [84, 85, 139], "import_from_aiida_bandsdata": [84, 85], "bandsdata_nod": [84, 85], "import_from_aiida_xydata": [84, 85], "pdosdata": [84, 85], "shift_do": [84, 85, 139, 140, 142], "use_smear": [84, 85, 139, 142], "sum_kind": [84, 85, 139, 140, 141, 142], "sum_principal_qn": [84, 85, 139, 140, 141, 142], "sum_azimuth_qn": [84, 85], "sum_magnetic_qn": [84, 85, 139, 140, 141, 142], "custom_kind_dict": [84, 85, 86, 144], "import_projected_do": [84, 85, 139, 140, 141, 142], "unit_x": [84, 85, 91], "import_total_do": [84, 85, 140, 141, 142], "plot_titl": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 144], "plot_nam": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 142], "remove_additional_plot_el": [84, 85, 90, 91, 146, 147], "reset_gridspec": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 147, 164], "gridspec": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "return_data_label": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "set_reference_cel": [84, 85, 139, 141, 142], "shift_band": [84, 85, 140, 142], "energy_shift": [84, 85], "shift_bands_and_do": [84, 85, 142], "shift_bands_and_dos_to_vbm": [84, 85, 139], "vbm": [84, 85, 142], "plotli": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 142, 146, 147, 149, 155, 158, 162], "linefil": [84, 85], "lorentzian": [84, 85, 91], "front": [84, 85, 90, 91], "band_min": [84, 85], "band_max": [84, 85], "With": [84, 85], "highest": [84, 85, 138, 142], "conduct": [84, 85, 167], "ev": [84, 85, 91, 92, 124, 134, 139, 140, 142, 147, 149, 162], "within": [84, 85, 108, 111, 142, 154, 165, 167, 168], "degener": [84, 85], "down": [84, 85, 89, 167], "channel": [84, 85], "\u01f9one": [84, 85, 167], "band_gap": [84, 85, 88], "natur": [84, 85, 127, 135], "direct_gap": [84, 85, 142], "605352729999999": [84, 85], "direct_gap_kpoint": [84, 85, 142], "indirect_gap": [84, 85, 142], "6067583699999997": [84, 85], "vbm_kpoint": [84, 85, 142], "vbm_energi": [84, 85, 142], "cbm_kpoint": [84, 85, 142], "41447368": [84, 85], "cbm_energi": [84, 85, 142], "cbm_band_idx": [84, 85, 142], "degeneraci": [84, 85], "energy_diff": [84, 85], "7729889100000005": [84, 85], "kpoint_min": [84, 85, 142], "25": [84, 85, 104, 105, 107, 137, 141, 142, 144, 149, 154, 159], "75": [84, 85, 94, 137, 141, 144, 150, 159, 165, 167, 169], "kpoint_max": [84, 85, 142], "nkpoint": [84, 85], "neigenvalu": [84, 85], "nspin": [84, 85], "azimuth": [84, 85, 135], "magnet": [84, 85, 108, 111, 139, 140, 142, 167], "tri": [84, 85, 135], "additionallli": [84, 85], "png": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 142], "fig": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "graph_object": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93], "distort": [84, 85], "consequ": [84, 85], "therebi": [84, 85], "segment": [84, 85, 131], "accordingli": [84, 85, 139, 141, 142, 149], "bandstructureplot": [84, 85, 139, 140, 141, 142, 143, 161, 162], "dosplot": [84, 85, 139, 140, 141, 142, 161], "bandstructur": [84, 85, 139, 140, 141, 142], "bandstructuredensityofst": [84, 85], "densityofst": [84, 85], "partialchargesplot": [85, 86, 144, 161], "solid": [85, 86, 87, 131, 140, 142], "pc_plot_typ": [85, 86, 144], "scatter": [85, 86, 88, 90, 144, 146, 149], "pc_plot_ord": [85, 86, 144], "import_from_aiida_list": [85, 86], "pcdata": [85, 86], "plot_label": [85, 86, 90, 92, 134, 144, 146], "import_partial_charg": [85, 86, 144], "valence_electron": [85, 86, 144], "ax": [85, 86], "h": [85, 86, 127, 144, 145, 165, 167], "o": [85, 86, 127, 143, 148, 149, 158, 165, 167], "partialrdfplot": [85, 87, 150, 161], "dash": [85, 87, 140, 142, 154], "dot": [85, 87, 140, 142], "dashdot": [85, 87], "x_unit": [85, 87, 150], "import_ffingerprint": [85, 87, 150], "phaseplot": [85, 88, 149, 161], "plot_typ": [85, 88, 89, 92, 149], "plot_properti": [85, 88, 92, 93, 149], "formation_energi": [85, 88, 124, 149], "show_crystal_system": [85, 88, 149], "show_convex_hul": [85, 88, 149], "show_lower_hul": [85, 88], "show_upper_hul": [85, 88], "top_label": [85, 88], "hist_bin_s": [85, 88], "binari": [85, 88, 124, 136, 153, 168], "ternari": [85, 88], "stabil": [85, 88, 124, 149, 159, 161], "phase": [85, 92, 108, 109, 123, 149, 155, 169], "add_data_point": [85, 88], "datapoint": [85, 88], "import_from_pandas_df": [85, 88, 92, 108, 122, 149], "structure_column": [85, 88, 108, 122], "import_from_structure_collect": [85, 88], "direct_band_gap": [85, 88, 149], "c": [85, 88, 108, 123, 127, 131, 136, 144, 148, 153, 165, 167, 168], "sb": [85, 88, 148, 168], "planarfieldplot": [85, 89, 161], "show_x_label": [85, 89, 92], "show_y_label": [85, 89, 92], "coordinates_unit": [85, 89], "norm": [85, 89, 145, 151], "values_unit": [85, 89], "import_field": [85, 89, 145], "flip_lr": [85, 89, 145], "flip_ud": [85, 89, 145], "text_label": [85, 89, 145], "import_from_aiida_arraydata": [85, 89], "planedata": [85, 89], "flip": [85, 89], "left": [85, 89, 145, 147], "right": [85, 89, 147], "simpleplot": [85, 90, 136, 161, 162, 164], "flexibl": [85, 90, 136, 138, 161, 163, 164], "import_bar_data_set": [85, 90, 146, 163, 164], "import_scatter_data_set": [85, 90, 146, 163, 164], "y_values_2": [85, 90], "face_color": [85, 90], "line_width": [85, 90], "marker_face_color": [85, 90], "marker_edge_width": [85, 90], "use_fil": [85, 90], "use_fill_between": [85, 90], "transpar": [85, 90], "face": [85, 90], "deta": [85, 90], "spectrumplot": [85, 91, 147, 161], "detect_peak": [85, 91, 147], "smooth_spectra": [85, 91, 147], "plot_original_spectra": [85, 91, 147], "plot_unit_x": [85, 91], "_peakdetectionmixin": [85, 91], "_smearingmixin": [85, 91], "rai": [85, 91, 136, 161], "absorpt": [85, 91, 136, 161], "detect": [85, 91, 124, 159], "peak": [85, 91], "broaden": [85, 91], "peak_color": [85, 91], "peak_dist": [85, 91], "peak_height": [85, 91], "peak_line_styl": [85, 91], "peak_max_factor": [85, 91], "peak_plateau_s": [85, 91], "peak_promin": [85, 91], "peak_rel_height": [85, 91], "peak_threshold": [85, 91], "peak_width": [85, 91], "peak_wlen": [85, 91], "peak_y_min": [85, 91], "import_spectrum": [85, 91, 147], "spectrum": [85, 91, 136, 161], "surfaceplot": [85, 92, 161], "area_unit": [85, 92], "energy_unit": [85, 92], "plot_el": [85, 92], "chem_potenti": [85, 92], "surface_energi": [85, 92], "potenti": [85, 92], "bulk_phas": [85, 92], "elemental_phas": [85, 92], "excess_atom": [85, 92], "add_surface_facet": [85, 92], "total_energi": [85, 92], "termination_label": [85, 92], "ter_labeling_schem": [85, 92], "extract_electronic_properti": [85, 92], "set_bulk_phas": [85, 92], "set_elemental_phas": [85, 92], "nr_atom": [85, 92, 149, 165], "indici": [85, 92, 144], "ioniz": [85, 92], "phasediagram": [85, 88], "stage": 90, "qhaplot": 93, "volume_temperatur": 93, "thermal_expans": 93, "selected_temperatur": 93, "200": [93, 154], "400": [93, 152], "600": [93, 152], "800": [93, 149], "import_qha_properti": 93, "bulk_modulus_temperatur": 93, "helmholtz_volum": 93, "moduli": 93, "expans": 93, "helmholtz": 93, "thermalpropertiesplot": 93, "free_energi": 93, "entropi": 93, "heat_capac": 93, "kj": 93, "mol": 93, "c_v": 93, "j": [93, 97, 100], "import_thermal_properti": 93, "heat": 93, "capac": [93, 167], "c_rect_lg": 94, "13": [94, 135, 137, 142, 144, 145, 149, 154, 165, 167], "18": [94, 137, 142, 144, 149, 154, 165], "22": [94, 137, 142, 144, 149, 165], "26": [94, 135, 137, 144, 149, 154], "35": [94, 135, 137, 144, 149, 159], "36": [94, 135, 137, 144, 149, 154], "48": [94, 137, 144, 154], "p_hex_lg": 94, "66": [94, 137, 143, 144], "67": [94, 137, 143, 144], "69": [94, 137, 144, 167], "71": [94, 137, 144], "72": [94, 137, 144], "73": [94, 135, 137, 144, 154], "76": [94, 137, 144], "77": [94, 137, 144], "78": [94, 137, 143, 144, 154], "80": [94, 144, 151], "p_obl_lg": 94, "p_rect_lg": 94, "p_squ_lg": 94, "p_trig_lg": 94, "65": [94, 135, 137, 144, 149, 159], "68": [94, 137, 144, 154], "70": [94, 132, 144], "74": [94, 135, 137, 144], "79": [94, 137, 143, 144], "host": [95, 104, 105, 107, 154], "external_analysis_method": [95, 167], "func": [95, 106, 109, 111], "calculate_acsf_descriptor": [96, 100], "calculate_interaction_matrix": [96, 100], "calculate_mbtr_descriptor": [96, 100], "calculate_soap_descriptor": [96, 100], "calculate_ffingerprint_order_p": [97, 100], "1016": [97, 100], "cpc": [97, 100], "2010": [97, 100], "06": [97, 100, 137], "007": [97, 100], "total_order_p": [97, 100], "atomic_fingerprint": [97, 100, 108, 109, 111, 124, 150], "bond": [98, 104, 105, 107, 145], "determine_molecular_frag": [98, 100], "exclude_el": [98, 100], "end_point_el": [98, 100], "20": [98, 99, 100, 102, 103, 108, 109, 111, 124, 135, 138, 142, 143, 144, 149, 151, 165], "cn_method": [98, 99, 100, 104, 105, 107, 124], "serv": [98, 100, 124, 145, 158, 159], "voronoi": [98, 99, 100, 104, 105, 107, 108, 109, 111, 120, 124, 148], "covalent_atomic_radiu": [98, 99, 100, 104, 105, 107, 108, 109, 111, 124], "solid_angl": [98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 131], "prefix": [98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 163, 167], "rel_": [98, 99, 100, 104, 105, 107, 108, 109, 111, 124], "polyhedron": [98, 99, 100, 104, 105, 107, 108, 109, 111, 124, 131], "create_graph": [99, 100], "graphviz_engin": [99, 100], "circo": [99, 100], "graphviz_edge_rank_color": [99, 100], "blue": [99, 100, 145], "red": [99, 100, 145], "green": [99, 100, 157], "orang": [99, 100, 162], "darkblu": [99, 100], "edg": [99, 100, 159], "rank": [99, 100], "nx_graph": [99, 100], "nx": [99, 100], "multidigraph": [99, 100], "graphviz_graph": [99, 100], "digraph": [99, 100], "act": [100, 165, 166, 167], "calculate_plan": [100, 101, 145], "fragment": [100, 101], "margin": [100, 101, 145, 148], "vector_length": [100, 101], "min_nr_atom": [100, 101], "use_scaled_coordin": [100, 101], "arang": [100, 101, 164], "outermost": [100, 101], "calculate_prdf": [100, 102, 165, 167], "element_prdf": [100, 102], "atomic_prdf": [100, 102], "calculate_warren_cowley_order_p": [100, 103], "span": [101, 131], "host_index": [104, 107], "functional_group": [104, 107, 145], "ch3": [104, 105, 107, 127, 145], "bond_length": [104, 105, 107], "change_label": [104, 105, 107, 108, 109, 111, 115, 124, 149, 165, 167], "soon": [104, 107, 149], "guest": [104, 105, 107, 135], "back": [104, 105, 107, 108, 111, 122, 153, 167], "suffix": [104, 105, 107, 108, 111, 154, 167], "highlight": [104, 105, 107, 145, 154, 155], "manipul": [104, 105, 106, 107, 108, 109, 111, 124, 135, 166], "adsorb": 105, "add_structure_coord": [105, 107, 135], "host_indic": [105, 107], "guest_index": [105, 107], "guest_structur": [105, 107], "guest_dir": [105, 107], "radius_typ": [105, 107, 108, 109, 111, 113, 115, 124, 129], "chen_manz": [105, 107, 108, 109, 111, 124, 129], "atomic_radius_delta": [105, 107, 108, 109, 111, 113, 124, 148], "dist_constraint": [105, 107], "dist_threshold": [105, 107], "viabl": [105, 107], "cooh": [105, 107], "h2o": [105, 107, 127], "nh2": [105, 107], "no2": [105, 107], "oh": [105, 107, 127], "orient": [105, 107, 135, 166], "neighbor": [105, 107], "three": [105, 107, 108, 109, 111, 116, 123, 124, 131, 145, 154, 159, 165, 167, 169], "fold": [105, 107], "until": [105, 107], "minim": [105, 107, 152, 159], "collid": [105, 107], "add_structure_random": [105, 107, 135], "random_st": [105, 107], "reproduc": [105, 107, 149], "seem": [105, 107], "too": [105, 107], "aggreg": [105, 107], "external_manipulation_method": [106, 167], "add_functional_group": [107, 135], "pbc": [108, 111, 122, 145, 165, 167, 169], "site_attribut": [108, 111, 135, 167], "store_calculated_properti": [108, 111, 167], "function_arg": [108, 111], "mixin": [108, 111, 123, 124], "analysismixin": [108, 109, 111, 124], "manipulationmixin": [108, 109, 111, 124], "analysis_method": [108, 109, 111, 124, 165, 167], "cell_angl": [108, 111], "cell_length": [108, 111], "cell_volum": [108, 111], "export_method": [108, 111, 167], "import_method": [108, 111, 167], "especi": [108, 111, 151], "relev": [108, 111, 149, 153], "manipulation_method": [108, 109, 111, 124, 165, 167], "scaled_posit": [108, 111], "calculate_angl": [108, 109, 111, 116, 124, 165, 167], "site_index1": [108, 109, 111, 116, 124, 165], "site_index2": [108, 109, 111, 116, 124, 165], "site_index3": [108, 109, 111, 116, 124], "backfold_posit": [108, 109, 111, 116, 124], "calculate_coordin": [108, 109, 111, 113, 124, 135, 148, 165, 167], "calculate_dihedral_angl": [108, 109, 111, 116, 124, 165, 167], "site_index4": [108, 109, 111, 116, 124], "dihedr": [108, 109, 111, 116, 124], "four": [108, 109, 111, 116, 124, 145], "use_supercel": [108, 109, 111, 116, 124], "calculate_ffingerprint": [108, 109, 111, 118, 124, 150, 165, 167], "use_legacy_smear": [108, 109, 111, 118, 124], "calculate_voronoi_tessel": [108, 109, 111, 120, 124, 165, 167], "delete_atom": [108, 109, 111, 115, 124, 165, 167], "site_indic": [108, 109, 111, 115, 124], "determine_point_group": [108, 109, 111, 117, 124, 165, 167], "threshold_dist": [108, 109, 111, 117, 124], "threshold_angl": [108, 109, 111, 117, 124], "threshold_inertia": [108, 109, 111, 117, 124], "determine_space_group": [108, 109, 111, 119, 124, 165, 167], "return_sym_oper": [108, 109, 111, 124, 133], "return_primitive_structur": [108, 109, 111, 124], "return_standardized_structur": [108, 109, 111, 124], "no_id": [108, 109, 111, 124], "from_aiida_structuredata": [108, 111, 167], "from_ase_atom": [108, 111, 167], "file_format": [108, 111, 114], "backend_kwarg": [108, 111, 122], "from_pymatgen_structur": [108, 111, 167], "pymatgen_structur": [108, 111, 122], "get_posit": [108, 111], "iter_sit": [108, 111, 167], "get_kind": [108, 111], "get_cart_po": [108, 111], "get_scaled_po": [108, 111], "perform_analysi": [108, 111, 124, 165], "analaysi": [108, 111, 124], "perform_manipul": [108, 109, 111, 124, 165], "scale_unit_cel": [108, 109, 111, 115, 124, 165, 167], "scaling_factor": [108, 109, 111, 115, 124], "set_attribut": [108, 111], "set_posit": [108, 111], "postion": [108, 111], "set_site_attribut": [108, 111], "substitute_el": [108, 109, 111, 115, 124, 135, 149, 165, 167], "remove_kind": [108, 109, 111, 115, 124, 135], "substitut": [108, 109, 111, 115, 124, 149, 167], "to_aiida_structuredata": [108, 111, 167], "to_ase_atom": [108, 111, 167], "to_dict": [108, 111, 135, 167], "include_calculated_properti": [108, 111], "to_pymatgen_structur": [108, 111, 167], "moment": [108, 111, 137, 154, 162], "backfold": [108, 109, 111, 124, 135], "atomic_radiu": [108, 109, 111, 124, 148], "coval": [108, 109, 111, 124, 129, 145], "fallback": [108, 109, 111, 124], "radii": [108, 109, 111, 124, 135, 148], "neg": [108, 109, 111, 124], "decreas": [108, 109, 111, 124], "supercel": [108, 109, 111, 120, 124], "use_super_cel": [108, 109, 111, 124], "element_fingerprint": [108, 109, 111, 124, 150], "inertia": [108, 109, 111, 124], "ideal": [108, 109, 111, 124, 155], "read_": [108, 111], "_structur": [108, 111], "yield": [108, 111], "import_": [108, 122, 163, 168], "append_": [108, 122, 168], "assigen": [108, 122], "append_from_aiida_structuredata": [108, 122, 165], "append_from_ase_atom": [108, 122, 150, 165], "append_from_fil": [108, 122], "append_from_pymatgen_structur": [108, 122], "append_structur": [108, 122, 165], "create_pandas_df": [108, 122, 149, 165], "exclude_column": [108, 122, 149], "duplicate_structur": [108, 122], "new_label": [108, 122], "duplic": [108, 122, 124, 135, 149, 165], "get_all_attribute_kei": [108, 122], "get_all_el": [108, 122], "get_all_kind": [108, 122], "get_all_structur": [108, 122], "return_index_label": [108, 122], "import_from_aiida_db": [108, 122, 165], "raise_error": [108, 122], "import_from_hdf5_fil": [108, 122, 159, 165], "pop": [108, 122, 165], "store_in_aiida_db": [108, 122, 165], "group_descript": [108, 122, 125], "store_in_hdf5_fil": [108, 122, 165], "constraint": [108, 109, 122, 123, 149], "met": [108, 122, 154], "pd": [108, 122], "structureimport": [108, 123, 143, 149, 159, 166, 168], "neglect_elemental_structur": [108, 109, 123, 149, 168], "constraintsmixin": [108, 109, 123], "attribute_constraint": [108, 109, 123], "chem_formula_constraint": [108, 109, 123], "concentration_constraint": [108, 109, 123], "neglect": [108, 109, 123, 149, 168], "add_chem_formula_constraint": [108, 109, 123, 168], "reduced_formula": [108, 109, 123, 168], "append_from_mp_by_id": [108, 123, 143, 168], "entry_id": [108, 123], "api_kei": [108, 123], "property_data": [108, 123, 143], "structure_typ": [108, 123, 149], "generate_random_cryst": [108, 123, 159, 168], "excl_space_group": [108, 123], "tol_tupl": [108, 123], "bin_siz": [108, 123], "max_atom": [108, 123], "max_structur": [108, 123, 159, 168], "max_structures_per_c": [108, 123], "max_structures_per_sg": [108, 123], "volume_factor": [108, 123], "import_from_mp": [108, 123, 149, 168], "compatible_onli": [108, 123], "conv_unit_cel": [108, 123], "use_openapi": [108, 123, 149], "import_from_optimad": [108, 123, 168], "database_id": [108, 123], "api_vers": [108, 123], "optimade_url": [108, 123], "timeout": [108, 123], "import_from_oqmd": [108, 123, 149, 168], "query_limit": [108, 123, 149], "remove_constraint": [108, 109, 123, 168], "return_optimade_database_id": [108, 123], "url": [108, 123], "set_attribute_constraint": [108, 109, 123, 168], "set_concentration_constraint": [108, 109, 123, 168], "min_conc": [108, 109, 123], "max_conc": [108, 109, 123], "reduc": [108, 109, 123, 127, 149, 159, 168], "www": [108, 123], "materialsproject": [108, 123, 149], "dashboard": [108, 123], "el_band_structur": [108, 123, 143], "el_do": [108, 123], "stuctur": [108, 123], "intial": [108, 123], "30": [108, 123, 144, 149], "fe2o3": [108, 123, 127], "te": [108, 123, 136, 153, 168], "exclus": [108, 123], "per": [108, 123, 149, 160], "el_bandstructur": [108, 123], "legaci": [108, 123, 149], "json": [108, 123], "60": [108, 123, 135, 144, 149, 167], "page": [108, 123, 152, 153, 158, 160], "respons": [108, 123], "server": [108, 123, 158], "surfacegener": [108, 125, 166, 169], "create_surfac": [108, 125, 169], "generate_surface_slab": [108, 125, 169], "store_surfaces_in_aiida_db": [108, 125, 169], "to_aiida_surfacedata": [108, 125, 169], "01": [108, 124, 125, 137, 142, 145, 169], "repitit": [108, 125, 169], "altern": [108, 125, 154, 165], "amount": [108, 125, 159, 169], "than": [108, 125, 148, 149, 152, 154, 159, 169], "side": [108, 125, 145, 161, 169], "constrainterror": 109, "manipulates_structur": 109, "get_structure_from_fil": 114, "miscellan": 116, "moelecul": 117, "tessel": [120, 148], "structurecomparison": 124, "structuresoper": 124, "output_format": [124, 165], "simpli": [124, 149, 167], "unaffect": 124, "supported_output_format": [124, 165], "calculate_st": 124, "exclude_kei": 124, "compare_sites_via_coordin": [124, 148, 165], "key1": 124, "key2": 124, "compare_sites_via_ffingerprint": [124, 165], "compare_structures_via_comp_sym": [124, 165], "mere": [124, 149, 154, 159, 168], "compare_structures_via_direct_comp": [124, 165], "length_threshold": 124, "angle_threshold": 124, "position_threshold": 124, "compare_structures_via_ffingerprint": [124, 150, 165], "find_duplicates_via_comp_sym": [124, 149, 165], "confin": [124, 149], "remove_structur": [124, 149], "coimpar": 124, "find_duplicates_via_direct_comp": [124, 165], "find_duplicates_via_ffingerprint": [124, 149, 165], "ffingerprint": [124, 150], "find_eq_sites_via_coordin": [124, 165], "find_eq_sites_via_ffingerprint": [124, 165], "sign": [124, 154], "08": [124, 137], "03": [124, 137, 149], "025": 124, "subset": [124, 154, 159, 167], "compare_structur": 124, "compare_funct": 124, "comp_kwarg": 124, "structure_wrapp": 124, "check_stor": 124, "space_group_hn_to_layer_group": 126, "compare_formula": [127, 135], "chem_formula1": 127, "chem_formula2": 127, "reduce_formula": [127, 135], "ident": [127, 150], "fe": 127, "forum": 127, "formula_dict": 127, "0001": [127, 145], "33333": 127, "intepret": 127, "0e": 127, "formula_r": 127, "transform_dict_to_latexstr": 127, "round": 127, "formula_str": 127, "latex": 127, "mathrm": [127, 145], "o3": 127, "transform_dict_to_str": 127, "output_typ": 127, "alphabet": 127, "transform_list_to_dict": 127, "formula_list": 127, "transform_list_to_str": 127, "transform_str_to_dict": [127, 135], "curli": 127, "bracket": [127, 135, 165], "recur": [127, 135], "hoh": 127, "co": 127, "ch": 127, "16": [127, 137, 142, 144, 148, 149, 150, 154, 165, 167], "21": [127, 137, 142, 144, 149, 154, 165], "dict_create_tre": 128, "parameter_tre": 128, "word": 128, "dict_merg": 128, "b": [128, 131, 139, 162], "dict_retrieve_paramet": 128, "cound": 128, "dict_set_paramet": 128, "physic": [129, 134], "get_atomic_mass": 129, "mass": 129, "element_numb": 129, "get_atomic_numb": 129, "get_atomic_radiu": [129, 135], "van": [129, 135], "der": [129, 135], "waal": [129, 135], "1039": [129, 135], "b801115j": 129, "vdw": 129, "c9ra07327b": [129, 135], "vdw_charry_tkatchenko": 129, "26434": [129, 135], "chemrxiv": [129, 135], "2024": [129, 135, 152], "m3rtp": [129, 135], "v2": [129, 135, 154], "wrong": 129, "get_electroneg": 129, "paul": 129, "electroneg": 129, "allen": 129, "get_element_group": 129, "get_element_symbol": [129, 167], "get_group": 129, "element_group": 129, "mathemat": 131, "calc_angl": 131, "vector1": 131, "vector2": 131, "radian": 131, "calc_circular_segment_area": 131, "circular": 131, "en": 131, "wikipedia": 131, "wiki": 131, "circular_seg": 131, "circl": 131, "segment_area": 131, "calc_plane_equ": 131, "point1": 131, "point2": 131, "point3": 131, "d": [131, 139, 140, 142], "calc_polygon_area": 131, "polygon": 131, "calc_reflection_matrix": 131, "n_vector": 131, "3d": 131, "calc_solid_angl": 131, "gaussian_funct": 131, "mu": [131, 137], "varianc": 131, "__str__": 132, "max_str_length": 132, "get_crystal_system": 133, "crystal_system": 133, "tetragon": 133, "get_lattice_typ": 133, "get_space_group_detail": 133, "international_short": [133, 167], "short": 133, "international_ful": [133, 167], "schoenfli": [133, 135, 167], "hall_symbol": [133, 167], "choic": [133, 167], "centr": 133, "pointgroup_intern": [133, 167], "pointgroup_schoenfli": [133, 167], "arithmetic_crystal_class_numb": [133, 167], "arithmet": [133, 154], "arithmetic_crystal_class_symbol": [133, 167], "symmetry_oper": 133, "rotat": 133, "transform_to_nr": 133, "sg_num": 133, "transform_to_str": 133, "sg_str": 133, "convers": 134, "_basequant": 134, "available_unit": 134, "get_unit": 134, "frequenc": [134, 141], "unitconvert": 134, "_baseunitconvert": 134, "spectroscopi": [134, 147], "convert_unit": 134, "unit_1": 134, "unit_2": 134, "processed_data": 134, "wavevector": 134, "fix": 135, "pr": 135, "counterpart": 135, "34": [135, 137, 144, 154], "few": [135, 145, 149, 155, 162, 167], "smaller": [135, 148, 152, 159], "correctli": 135, "63": [135, 137, 144, 154], "deal": 135, "64": [135, 137, 144, 149], "enhanc": [135, 155], "23": [135, 137, 142, 144, 149], "outsid": [135, 166], "fermi": 135, "cssr": 135, "v1": [135, 154], "cuc": 135, "postprocess": 135, "higher": 135, "33": [135, 137, 144], "addiat": 135, "replac": [135, 149, 154], "37": [135, 137, 144], "39": [135, 137, 139, 140, 142, 143, 144, 147, 148, 149, 154, 159, 163, 165, 167, 168, 169], "44": [135, 137, 144], "2022": 135, "51": [135, 137, 141, 144, 149], "newli": [135, 149, 165], "53": [135, 137, 144], "56": [135, 137, 144], "sped": 135, "prior": 135, "expens": 135, "61": [135, 137, 144], "h2": [135, 144], "aim2dat": [135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 159, 162, 163, 164, 165, 167, 168, 169], "break": 135, "dict_": 135, "relat": [135, 137, 155, 166], "conform": [135, 154], "54": [135, 137, 144], "As": [135, 138, 139, 149, 150, 152, 155, 159, 163, 165, 167, 168, 169], "sg_number": 135, "int_symbol": 135, "point_group_symbol": 135, "schoenflies_symbol": 135, "pointgroup": [135, 149], "wai": [135, 138, 142, 146, 147, 149, 159, 162, 164, 165, 167, 169], "publish": [135, 149], "jupyt": [136, 155], "notebook": [136, 143, 147, 155], "most": [136, 149, 152, 155, 159, 162, 163, 164], "pool": [136, 153, 155, 168], "At": [137, 154], "uniformli": 137, "uniform": [137, 138, 151], "further": [137, 151, 152, 168], "min_step": [137, 138, 151], "max_num_step": [137, 138, 151], "multipli": 137, "49": [137, 144], "axis2": [137, 138, 151], "02": 137, "_uniform_discret": [137, 138], "lt": [137, 138, 147, 149, 154, 159, 165, 169], "0x7f458e14b040": 137, "gt": [137, 138, 147, 149, 154, 159, 165, 169], "07": 137, "09": 137, "11": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 165, 167], "14": [137, 142, 144, 145, 148, 149, 154, 165, 167], "17": [137, 142, 144, 145, 148, 149, 154, 165], "19": [137, 142, 143, 144, 148, 149, 151, 154, 165], "24": [137, 142, 144, 149, 154], "27": [137, 144, 149, 165], "28": [137, 144, 149], "29": [137, 144, 149, 154], "31": [137, 143, 144, 149], "32": [137, 143, 144, 149], "38": [137, 144], "41": [137, 142, 144, 154], "42": [137, 144], "43": [137, 144, 154], "45": [137, 144, 159], "46": [137, 140, 143, 144], "04": 137, "52": [137, 144, 149], "58": [137, 143, 144], "62": [137, 144, 149], "82": [137, 144], "84": [137, 144], "86": [137, 143, 144], "88": [137, 144], "92": [137, 142, 144], "94": [137, 143, 144, 154], "98": [137, 144], "summand": 137, "kept": 137, "axis3": 137, "mention": [137, 165], "55": [137, 144, 149, 154, 159], "57": [137, 144, 149, 154], "59": [137, 143, 144], "81": [137, 144], "83": [137, 144, 154], "85": [137, 144, 159], "91": [137, 144], "93": [137, 143, 144], "95": [137, 144, 159], "97": [137, 144], "99": [137, 144, 154], "vice": 137, "versa": 137, "moreov": [137, 167], "wherefor": 137, "axis_t": 137, "axis4": 137, "0x7f458e14ba60": 137, "sublist": 137, "cerat": 137, "contrast": 137, "seen": 137, "axis5": 137, "0x7f4547f3b850": 137, "introduc": [138, 150, 151, 159, 160, 167], "effici": [138, 169], "003": [138, 151], "0x7f71ddaa1510": 138, "0x7f7223845510": 138, "101": [138, 143, 144, 151], "transfer": [138, 167], "function_analysi": [138, 151], "example_energy_do": [138, 151], "example_dos_energi": [138, 151], "example_do": [138, 151], "safe_load": [138, 151], "line2d": [138, 147], "0x7f71d4765bd0": 138, "spectra_fp": 138, "fp": [138, 151], "fp_shift": 138, "test_shift": 138, "254196": 138, "el_bands_cp2k": [139, 162], "dict_kei": [139, 140, 142, 143, 167, 169], "cubic": [139, 141, 142, 169], "band_structure_do": [139, 141], "bands_plot": [139, 140, 141, 142, 143], "389": 139, "000": [139, 142], "865": 139, "591": 139, "test_band_structur": [139, 141, 142], "procedur": [139, 140, 141, 142, 155], "There": [139, 140, 141, 142, 158, 165], "el_pdos_cp2k": 139, "px": 139, "pz": 139, "d0": 139, "poject": [139, 140, 142], "awai": [139, 140, 142, 149, 169], "intens": 139, "reason": 139, "delta": 139, "dos_plot": [139, 140, 141, 142], "test_pdo": [139, 140, 142], "e_fermi": 139, "bands_dos_plot": [139, 140, 141, 142], "test_band_structure_do": [139, 140, 141, 142], "thu": [140, 144, 145, 149], "correct": [140, 152, 158, 162], "el_bands_fhi": 140, "w": [140, 141, 142], "l": [140, 141, 142], "163": 140, "164": [140, 149, 154], "258": 140, "259": 140, "305": 140, "306": 140, "329": 140, "aims_band": 140, "band_structure_soc": 140, "aims_bands_soc": 140, "el_pdos_fhi": 140, "p": [140, 142], "95590811": 140, "likewis": [140, 142, 154, 167], "dos_color": [140, 142], "dos_linestyl": [140, 142], "onto": [140, 142], "involv": [140, 142], "ks_dos_total_raw": 140, "dat": [140, 142], "no_soc": 140, "test_pdos_2": [140, 142], "along": [141, 153], "ref_cel": 141, "ph_bands_phonopi": 141, "phonopy_disp": 141, "force_set": 141, "thz": 141, "test_do": 141, "el_bands_q": 142, "692": 142, "151": 142, "181": 142, "204": 142, "own": [142, 144], "9678": 142, "pio": [142, 146, 162], "render": [142, 146, 162], "sphinx_galleri": [142, 146, 162], "5489999999999995": 142, "direct_gap_label": 142, "direct_gap_rel_dist": 142, "6020000000000003": 142, "vbm_label": 142, "vbm_rel_dist": 142, "00019999999999953388": 142, "830508": 142, "6021999999999998": 142, "cbm_label": 142, "cbm_rel_dist": 142, "596": 142, "label_min": 142, "rel_distance_min": 142, "label_max": 142, "rel_distance_max": 142, "296000000000001": 142, "rel_dist": 142, "2492": 142, "el_pdos_q": 142, "1_": 142, "2_px": 142, "2_py": 142, "2_pz": 142, "smoother": 142, "strength": 142, "ajust": 142, "test_pdos_smear": 142, "follwo": [142, 152], "And": [142, 143, 149, 154, 164, 165, 169], "strct_imp": [143, 149, 159, 168], "573763": [143, 149], "mp_openapi_kei": 143, "40": [143, 144, 159], "u": 143, "107": 143, "person": 144, "partial_data": 144, "zif_8_cl_struc": 144, "pc_critic2": 144, "zif": 144, "cl": [144, 145], "struc": 144, "zif_8_cl_comp": 144, "comp": 144, "zif_8_cl_imi": 144, "imi": 144, "zif_8_br_struc": 144, "br": [144, 145], "zif_8_br_comp": 144, "zif_8_br_imi": 144, "04080751": 144, "20870328": 144, "6766472": 144, "60243296": 144, "04921432": 144, "02320405": 144, "938178293": 144, "919212183": 144, "541557784": 144, "arrang": 144, "favor": 144, "manner": [144, 159, 164], "therefor": [144, 153, 154, 159, 163, 167, 169], "dictonari": 144, "h1": 144, "conjugated_network": 144, "index_struc": 144, "zn": 144, "90": [144, 150, 165, 167], "index_comp": 144, "index_imi": 144, "suppli": 144, "pc_plot": 144, "imidazol": [144, 145], "inch": 144, "hspace": 144, "wspace": 144, "rest": 144, "conjug": 144, "network": 144, "edd": 145, "variant": 145, "1021": [145, 148], "ac": [145, 148], "jpcc": 145, "3c06054": 145, "divid": [145, 152], "tw": 145, "inclus": 145, "replica": 145, "proj_posit": 145, "fct_grp": 145, "el_def_density_critic2": 145, "pw": 145, "scf_": 145, "del": [145, 165], "3f": 145, "874": 145, "443": 145, "500": [145, 149, 152], "954": 145, "584": 145, "078": 145, "182": 145, "120": 145, "213": [145, 149], "497": 145, "065": 145, "108": 145, "502": 145, "808": 145, "862": 145, "512": [145, 167], "845": 145, "147": [145, 149], "956": 145, "004": 145, "941": 145, "248": 145, "839": 145, "328": 145, "951": 145, "121": 145, "912": 145, "262": 145, "sucessfulli": 145, "plane_data": 145, "rhodef_": 145, "pf_plot": 145, "frg_det": 145, "pd0": 145, "pos0": 145, "zip": 145, "symlog": 145, "color_map": 145, "rdbu_r": 145, "contour_fil": 145, "vmin": 145, "vmax": 145, "heatmap": 145, "accumul": 145, "isol": 145, "deplet": 145, "aa": 145, "unspecif": 146, "intuit": 146, "splot": [146, 163, 164], "c4": 146, "c1": [146, 163, 164], "black": [146, 155], "subpackag": [147, 155, 166], "linspac": 147, "sin": 147, "pi": 147, "figsiz": 147, "0x7f0718ce9f60": 147, "spectroscopy_plot": 147, "test05": 147, "test2": 147, "One": [147, 149, 165], "simplest": 147, "begin": 147, "cc": 147, "11011011011011011": 147, "5005005005005005": 147, "990990990990991": 147, "3013013013013013": 147, "7017017017017018": 147, "1121121121121122": 147, "5125125125125125": 147, "9129129129129128": 147, "3133133133133135": 147, "7137137137137137": 147, "104104104104104": 147, "504504504504505": 147, "894894894894895": 147, "295295295295295": 147, "685685685685685": 147, "096096096096096": 147, "556556556556557": 147, "906906906906907": 147, "637637637637638": 147, "088088088088089": 147, "488488488488489": 147, "8988988988989": 147, "2992992992993": 147, "6996996996997": 147, "2753028157854998": 147, "3778171956807006": 147, "307310856712096": 147, "585848313972072": 147, "7009703848729834": 147, "8362939684295678": 147, "001319220011811": 147, "2002827147154207": 147, "426325468917883": 147, "656988878545343": 147, "8554855311586738": 147, "9803545786105294": 147, "9945390760666486": 147, "882108871892332": 147, "6546793874686188": 147, "408884476619347": 147, "759853330427267": 147, "5495999787851287": 147, "4027919061121286": 147, "8848716139762073": 147, "718168518822874": 147, "6064265856714756": 147, "521484133084698": 147, "4550775718142916": 147, "displai": 147, "noisi": 147, "smooth": 147, "orgin": 147, "inorgchem": 148, "0c02996": 148, "strct_coord_num": 148, "na2sbc": 148, "xsf": [148, 150, 167], "closest": 148, "inbetween": 148, "minimum_distance_delta": 148, "coordiant": 148, "consider": 148, "tweak": 148, "variou": 148, "develop": 148, "keeff": 148, "readili": [148, 149, 151, 155, 157, 162], "na": [148, 168], "048938040566": 148, "9856709594339996": 148, "1401849173675503e": 148, "985670959434": 148, "034609": 148, "site_index": 148, "7858803441915443e": 148, "1238758099096912e": 148, "083547040566": 148, "0368784969093668e": 148, "706877317564249e": 148, "total_cn": 148, "min_dist": 148, "max_dist": 148, "avg_dist": 148, "069218": 148, "835675523409463e": 148, "734014780936377e": 148, "strct_op": [148, 149, 150, 165], "throughput": [149, 155, 158, 159, 165, 166, 168, 170], "0082710": [149, 154], "request": [149, 155, 158], "webpag": 149, "advis": 149, "niqf1wboaeujho8h": 149, "opt": [149, 154], "hostedtoolcach": [149, 154], "x64": [149, 154], "lib": [149, 154], "python3": [149, 154, 156], "ext": 149, "matproj_legaci": 149, "userwarn": 149, "you": [149, 157, 168], "mprester": 149, "longer": 149, "consult": 149, "doc": [149, 155, 158], "2020_09_08": 149, "0x7fe9231a7010": 149, "0x7fe9213b1b10": 149, "download": 149, "len": [149, 151], "156": 149, "124": [149, 154], "Not": [149, 168], "might": 149, "indentifi": 149, "aiida_script": 149, "structure_analysi": [149, 166], "upon": [149, 165, 169], "cunksiz": 149, "oqmd_676192": 149, "mp_mp": 149, "1055940": 149, "oqmd_676503": 149, "oqmd_676504": 149, "oqmd_621965": 149, "oqmd_620946": 149, "oqmd_677954": 149, "oqmd_676288": 149, "oqmd_1280348": 149, "oqmd_1215022": 149, "oqmd_690486": 149, "oqmd_676083": 149, "oqmd_675565": 149, "oqmd_675564": 149, "oqmd_676082": 149, "oqmd_686178": 149, "again": [149, 154, 162, 165, 167], "structures_mp": 149, "structures_oqmd": 149, "better": 149, "df_mp": 149, "icsd_id": 149, "magnetic_mo": 149, "el_conc_c": [149, 165], "el_conc_t": 149, "nr_atoms_c": [149, 165], "nr_atoms_t": 149, "source_id": 149, "1012110": 149, "000000": [149, 167], "mp_2020_09_08": 149, "046335": 149, "949029": 149, "223": 149, "046690": 149, "225": 149, "041371": 149, "573579": 149, "053976": 149, "639727": 149, "194": 149, "026213": 149, "1183897": 149, "038677": 149, "672241": 149, "135": 149, "065470": 149, "229": 149, "038770": 149, "11832": 149, "035109": 149, "1096915": 149, "042218": 149, "1007976": 149, "054917": 149, "1184151": 149, "217": 149, "1183694": 149, "139": [149, 154], "037375": 149, "141": 149, "097650": 149, "1178932": 149, "166": 149, "054101": 149, "9924": 149, "127402": 149, "1178952": 149, "049131": 149, "1064307": 149, "122781": 149, "152": 149, "567313": 149, "154": [149, 154], "000024": 149, "570459": 149, "043651": 149, "105": 149, "047063": 149, "10654": 149, "221": 149, "046556": 149, "8361": 149, "500000": 149, "847515": 149, "1178386": 149, "200000": 149, "800000": 149, "391677": 149, "620471": 149, "120000": 149, "880000": 149, "212136": 149, "022870": 149, "666667": 149, "333333": 149, "991598": 149, "505464": 149, "133333": 149, "866667": 149, "257485": 149, "003632": 149, "1205022": 149, "125000": 149, "875000": 149, "128": 149, "112": 149, "130": 149, "214743": 149, "030055": 149, "505634": 149, "400000": 149, "600000": 149, "742686": 149, "1188281": 149, "625000": 149, "375000": 149, "955132": 149, "000445": 149, "1191593": 149, "204884": 149, "030122": 149, "df_oqmd": 149, "phase_diagram": 149, "nr": [149, 160], "notic": [149, 168], "imbal": 149, "due": [149, 152, 166], "fact": 149, "experiment": [149, 159], "often": 149, "easier": 149, "compound": 149, "counteract": 149, "trend": [149, 153], "cation": 149, "anion": 149, "ion": 149, "oxid": 149, "varieti": 149, "rb": 149, "se": 149, "0x7fe9201bfc10": 149, "0x7fe90453b5e0": 149, "structures_subst": 149, "quit": [149, 162], "less": [149, 167], "strict": 149, "keep": [149, 154], "our": [149, 157], "133": 149, "attempt": 149, "000000e": 149, "src": 149, "spacegroup": [149, 150, 165, 167], "750000e": 149, "512500e": 149, "405": [149, 152], "286875e": 149, "072531e": 149, "868905e": 149, "675459e": 149, "491686e": 149, "317102e": 149, "151247e": 149, "993685e": 149, "8360_subst": 149, "rbc": 149, "568745_subst": 149, "1397_subst": 149, "1011696_subst": 149, "sete": 149, "oqmd_647134": 149, "7670_subst": 149, "kc": 149, "7447_subst": 149, "644_subst": 149, "755633_subst": 149, "1009489_subst": 149, "oqmd_1104417": 149, "1059621_subst": 149, "1061530_subst": 149, "1009491_subst": 149, "oqmd_1222159": 149, "oqmd_1593007": 149, "oqmd_1239241": [149, 168], "1747_subst": 149, "oqmd_1343671": [149, 168], "441_subst": 149, "8426_subst": 149, "11327_subst": 149, "1011695_subst": 149, "31002_subst": 149, "oqmd_1800027": 149, "2095_subst": 149, "7289_subst": 149, "9064_subst": 149, "1554_subst": 149, "9268_subst": 149, "9063_subst": 149, "1080254_subst": 149, "383_subst": 149, "1180659_subst": 149, "1080121_subst": 149, "620372_subst": 149, "18609_subst": 149, "541055_subst": 149, "subst_structur": [149, 165], "df_subst": 149, "subst": 149, "clearli": 149, "oganov": 150, "vall": 150, "1107": 150, "s0108767310026395": 150, "definit": [150, 151], "wise": 150, "gaa": [150, 165, 167, 169], "066": [150, 165, 167, 169], "gaas_prim": 150, "ga": [150, 165, 167, 169], "216": [150, 165, 167], "cellpar": [150, 165, 167], "primitive_cel": [150, 165, 167], "gaas_conv": [150, 165, 167], "vesta": 150, "strct_collect": 150, "prim": 150, "conv": 150, "contribut": [150, 161], "ang": 150, "1102230246251565e": 150, "itselv": 151, "usag": [151, 152, 155], "aforment": 151, "fingerpint": 151, "example_notebook": [151, 162], "fa": 151, "test_set": [151, 159], "test_set_shift": 151, "distance_method": 151, "2f": 151, "611": [151, 152], "accomplish": [151, 154, 155, 159, 162], "259183": 151, "inherit": [152, 162, 165], "restartworkchain": 152, "understood": 152, "calculationjob": 152, "facilit": [152, 153, 155, 159, 165], "cell_opt": 152, "ddec": 152, "chargemol": [152, 155], "planar_field": 152, "electronic_properti": 152, "surface_opt": 152, "obei": 152, "399": 152, "These": [152, 163], "reserv": 152, "599": 152, "699": 152, "700": 152, "799": 152, "error_out_of_walltim": 152, "401": 152, "error_interrupt": 152, "did": 152, "properli": 152, "402": 152, "error_odd_nr_electron": 152, "uk": 152, "rok": 152, "403": 152, "error_need_added_mo": 152, "404": 152, "error_ill_conditioned_matrix": 152, "choleski": 152, "decompos": 152, "ill": 152, "error_bad_condition_numb": 152, "bad": 152, "r_cond": 152, "error_geometry_convergence_not_reach": 152, "ionic": 152, "error_input_wrong_valu": 152, "unsupport": 152, "601": 152, "error_input_depend": 152, "parameter1": 152, "parameter2": 152, "602": 152, "error_input_log": 152, "610": 152, "error_scf_paramet": 152, "error_calculation_abort": 152, "612": 152, "error_optimization_not_converg": 152, "701": 152, "error_cell_opt": 152, "702": 152, "error_band_structur": 152, "703": 152, "error_eigenvalu": 152, "704": 152, "error_pdo": 152, "larg": [153, 159, 162], "fashion": [153, 155], "bring": 153, "challeng": 153, "offer": [153, 159, 165, 166, 167, 168], "friendli": 153, "easi": 153, "reli": 153, "strongli": 153, "recommend": [153, 156, 157, 159], "familiar": [153, 157], "principl": [153, 161, 166], "pacakg": 153, "studi": [153, 155, 159, 165], "predefin": [153, 154], "instal": [153, 155, 156, 157, 158], "visibl": 153, "verdi": 153, "conjunct": 154, "examplifi": [154, 162], "appropri": [154, 162], "load_profil": [154, 165, 169], "wf_builder": 154, "section": [154, 155, 161, 162], "general_input": 154, "preset": 154, "_v": 154, "denot": [154, 164, 169], "omit": 154, "purpos": [154, 166, 168, 169], "seek": [154, 158], "mof": 154, "dft": [154, 155], "preopt": 154, "inorgan": [154, 159], "loos": 154, "add_multipli": 154, "task_1": 154, "task_2": 154, "task_3": 154, "task_4": 154, "histori": 154, "datafactori": 154, "349": 154, "aiidadeprecationwarn": 154, "warn_deprec": 154, "subsequ": 154, "greater": 154, "next_possible_task": 154, "wc_builder": 154, "continu": 154, "straightawai": [154, 168], "meth": 154, "block": [154, 169], "background": [154, 166], "workfunctionnod": 154, "d16a35c": 154, "b5f5": 154, "4548": 154, "9cee": 154, "34d7583eaf40": 154, "315baee7": 154, "2f6d": 154, "471e": 154, "b4d8": 154, "ef57dac2bd62": 154, "2460": 154, "built": [154, 160], "mwf_builder": 154, "nbsp": 154, "dep": 154, "miss": 154, "114": 154, "190": 154, "119": [154, 165], "144": 154, "169": 154, "195": 154, "149": 154, "174": [154, 159], "104": 154, "129": 154, "179": 154, "205": 154, "109": 154, "134": [154, 167], "159": 154, "184": 154, "210": 154, "res_1": 154, "test_unit": 154, "res_2": 154, "54324": 154, "366128": 154, "1251180": 154, "3145032": 154, "test_workflow": 154, "mwf_builder2": 154, "autom": 155, "initio": 155, "toolkit": 155, "theori": 155, "assist": 155, "everi": 155, "overal": 155, "mine": 155, "capabl": [155, 166], "driven": 155, "enumlib": 155, "modular": 155, "easili": 155, "care": 155, "public": 155, "quantit": 155, "infrastructur": [155, 158], "exploit": [155, 159], "structuretransform": 155, "integr": 155, "diagram": 155, "sci": 155, "kit": 155, "welcom": 155, "github": 155, "discuss": 155, "issu": 155, "suggest": 155, "pull": 155, "guidelin": 155, "abid": [155, 168], "pep": 155, "googl": 155, "flake8": 155, "diff": 155, "pytest": 155, "coverag": 155, "abl": 155, "explain": 155, "snippet": 155, "docstr": 155, "dedic": [155, 163], "commit": 155, "pip": [155, 156, 157, 158], "virtual": 156, "venv": 156, "env": 156, "programm": 157, "cmd": 157, "powershel": 157, "help": [157, 162], "comfort": 157, "jump": 157, "enviro": 157, "click": 157, "select": 157, "recent": 157, "plai": [157, 165], "button": 157, "linux": 158, "window": 158, "mac": 158, "come": [158, 165], "ASE": [158, 167], "tqdm": 158, "demand": [158, 165, 167], "crystal_structure_gener": 158, "database_interfac": 158, "msgpack": 158, "boto3": 158, "qmpy": 158, "rester": 158, "secondari": 158, "libari": 159, "strct_c": [159, 165], "train_test_split_crystals_ref": 159, "pbe_csp_c": 159, "te_cryst": 159, "preopt_wo_dup": 159, "h5": [159, 165], "good": 159, "establish": 159, "took": 159, "prevent": [159, 168], "leakag": 159, "mani": [159, 160, 167], "disadvantag": 159, "unbalanc": 159, "classif": 159, "problem": 159, "stratifi": 159, "categori": 159, "idea": 159, "comp_bin": 159, "train_set": 159, "train_target": 159, "test_target": 159, "126": 159, "baseestim": [159, 160], "ffprint_transf": 159, "deman": 159, "nproc": 159, "0x7f37b754ece0": 159, "0x7f37b754de10": 159, "workload": 159, "augment": 159, "thorough": 159, "build": [159, 169], "ridg": [159, 160], "regress": [159, 160], "sklearn": 159, "kernel_ridg": 159, "kernelridg": 159, "pline": 159, "krr": 159, "021224280627831993": 159, "benefit": 159, "strct_c_csp": 159, "cs2te": [159, 168], "grid_search": 159, "fit_info": 159, "27277772623311125": 159, "hexagon": 159, "25888163486972965": 159, "perdiod": 160, "prdf": [160, 161, 167], "bodi": 160, "topic": 161, "focus": 161, "regard": 161, "intend": 161, "sometim": 162, "overwritten": [162, 165], "manifold": 162, "matplotlib_style_sheet": 162, "custom_set": 162, "mplstyle": 162, "bunch": 162, "custom_": 162, "popular": 162, "stylesheet": 162, "spcific": 163, "_data": 163, "demonstr": 163, "c0": [163, 164], "c2": 164, "easiest": 164, "structure_dict": 165, "benzen": 165, "7040": 165, "2194": 165, "0000": [165, 167], "4081": 165, "2152": 165, "1048": 165, "4304": 165, "763": 165, "477": 165, "water": 165, "unit_cel": 165, "li": 165, "append_atom": 165, "strct_c2": 165, "summari": 165, "c6h6": 165, "oh2": 165, "ga4as4": [165, 167], "li2": 165, "el_conc_h": 165, "nr_atoms_h": 165, "1190": 165, "7630": 165, "4770": 165, "5000": [165, 167], "store_in_aiidadb": 165, "import_from_aiidadb": 165, "append_to_col": 165, "8162": 165, "behav": 165, "advantag": 165, "598076211353316": 165, "750192323029818": 165, "0x7f73735fac20": 165, "598076": 165, "750192": 165, "al": [165, 167], "gaas_subst": 165, "gaal": 165, "al4as4": [165, 167], "0987": [165, 167], "531": [165, 167], "1797": [165, 167], "0493": [165, 167], "0740": [165, 167], "7500": [165, 167], "0247": [165, 167], "2500": [165, 167], "1320": [165, 167], "537": [165, 167], "7645": [165, 167], "0660": [165, 167], "0990": [165, 167], "0330": [165, 167], "regardless": 165, "handi": [165, 167], "flowchart": 166, "central": 166, "frequent": 166, "datacontain": 166, "randomli": [166, 168], "program": 166, "affect": 166, "interfer": 166, "unrel": 166, "deepcopi": 166, "structru": 167, "strct_molecul": 167, "008000": 167, "950353": 167, "336000": 167, "475176": 167, "823029": 167, "oxidation_st": 167, "strct_crystal": [167, 169], "0660001": [167, 169], "creation": 167, "must": 167, "7502": 167, "4411": 167, "from_": 167, "strct_crystal_conv": 167, "gaas_cryst": 167, "equivalent_sit": 167, "wyckoff": 167, "43m": 167, "td": 167, "43mf": 167, "centrosymmetr": 167, "suffici": 167, "induc": 167, "spefici": 167, "strct_crystal_as": 167, "strct_crystal_gaa": 167, "frequenetli": 167, "_analysis_": 167, "_manipulation_": 167, "calculate_n_el": 167, "def": 167, "determine_n_el": 167, "els": 167, "n_element": 167, "add_atom": 167, "occur": 167, "new_structur": 167, "site_attr": 167, "val": 167, "_add": 167, "nh3": 167, "0080": 167, "9504": 167, "3360": 167, "4752": 167, "8230": 167, "molecule_add": 167, "nh4": 167, "stoichiometri": [168, 169], "cs2te_structur": 168, "nasb_structur": 168, "116": 168, "oqmd_6763": 168, "cs8te4": 168, "cs4te2": 168, "oqmd_1343380": 168, "oqmd_1473530": 168, "oqmd_1343518": 168, "cs18sb6": 168, "oqmd_1339303": 168, "cs12sb4": 168, "oqmd_1521868": 168, "cs6sb2": 168, "oqmd_1376097": 168, "cs5sb4": 168, "oqmd_650085": 168, "cs20sb32": 168, "constraintsto": 168, "na3sb": 168, "na6sb2": 168, "na2sb2": 168, "structures_nasb": 168, "oqmd_8534": 168, "chem": 168, "doesn": 168, "oqmd_8535": 168, "na2": 168, "oqmd_30779": 168, "na3": 168, "oqmd_1214546": 168, "oqmd_1214635": 168, "oqmd_1214724": 168, "na4": 168, "oqmd_1214813": 168, "na29": 168, "oqmd_1214902": 168, "na20": 168, "oqmd_1214991": 168, "na8": 168, "oqmd_1215080": 168, "oqmd_1215169": 168, "oqmd_1215258": 168, "oqmd_1215347": 168, "oqmd_1215437": 168, "oqmd_1215526": 168, "oqmd_1215615": 168, "oqmd_1215704": 168, "oqmd_1215793": 168, "oqmd_1215882": 168, "oqmd_1215971": 168, "oqmd_1216063": 168, "oqmd_1277928": 168, "na28": 168, "oqmd_2030325": 168, "oqmd_2030329": 168, "oqmd_2015716": 168, "oqmd_2030326": 168, "oqmd_2054101": 168, "na48": 168, "oqmd_31044": 168, "oqmd_9214": 168, "oqmd_18780": 168, "oqmd_9672": 168, "oqmd_9221": 168, "oqmd_18986": 168, "oqmd_51014": 168, "oqmd_92588": 168, "oqmd_670516": 168, "oqmd_1215725": 168, "oqmd_676194": 168, "oqmd_1214567": 168, "oqmd_1214656": 168, "oqmd_1214745": 168, "oqmd_1214834": 168, "oqmd_1214923": 168, "oqmd_1215012": 168, "oqmd_1215101": 168, "oqmd_1215190": 168, "oqmd_1215279": 168, "oqmd_1215368": 168, "oqmd_1215458": 168, "oqmd_1215547": 168, "oqmd_1215636": 168, "oqmd_1215814": 168, "oqmd_1215903": 168, "oqmd_1215992": 168, "oqmd_1216084": 168, "oqmd_676462": 168, "oqmd_1277930": 168, "oqmd_1280366": 168, "oqmd_1522240": 168, "oqmd_1787572": 168, "oqmd_306088": 168, "nasb": 168, "oqmd_327172": 168, "oqmd_337630": 168, "oqmd_5018": 168, "na8sb8": 168, "oqmd_1105273": 168, "oqmd_1108400": 168, "na4sb4": 168, "oqmd_1223474": 168, "oqmd_1230445": 168, "oqmd_1798866": 168, "oqmd_1240145": 168, "na2sb4": 168, "oqmd_1280912": 168, "na4sb8": 168, "oqmd_1435987": 168, "oqmd_1592744": 168, "oqmd_302790": 168, "nasb3": 168, "oqmd_313332": 168, "oqmd_321867": 168, "na2sb6": 168, "oqmd_346353": 168, "oqmd_1277608": 168, "oqmd_1798772": 168, "oqmd_1438117": 168, "na4sb20": 168, "oqmd_1603356": 168, "nasb5": 168, "oqmd_1240146": 168, "na4sb2": 168, "oqmd_1589918": 168, "oqmd_1340253": 168, "na6sb4": 168, "oqmd_1340156": 168, "na8sb6": 168, "oqmd_1339841": 168, "na5sb4": 168, "oqmd_5156": 168, "oqmd_300783": 168, "oqmd_311325": 168, "oqmd_323874": 168, "oqmd_348360": 168, "oqmd_2030774": 168, "122": 168, "random_cryst": 168, "pyxtal_a061830ec93f409c8586aa2cb8e4a8bf": 168, "pyxtal_b450443f413c413a917d98c00a207230": 168, "pyxtal_c78eeec7d8fb4773a505121c13403a00": 168, "otain": 169, "applic": 169, "s41524": 169, "024": 169, "01224": 169, "surf_gen": 169, "low": 169, "110": 169, "111": 169, "quickli": 169, "surfaces_100": 169, "primitv": 169, "repetit": 169, "asymmetr": 169, "unequival": 169, "gaas_100_1": 169, "ga22as20": 169, "gaas_100_2": 169, "as22ga20": 169, "surf_detail": 169, "bottom_structur": 169, "top_structur": 169, "top_structure_nsym": 169, "stoichiometr": 169, "exactli": 169, "fly": 169, "surf_nod": 169, "gaas_100_surfac": 169, "24c7b6e0": 169, "2c5c": 169, "42a0": 169, "b80c": 169, "cdfe87e9b949": 169, "218": 169, "ecb6927f": 169, "cfb3": 169, "4a31": 169, "8fe7": 169, "a362fbcba061": 169, "219": 169}, "objects": {"": [[63, 0, 0, 1, "aim2dat", ""]], "aim2dat": [[2, 0, 0, 1, "aiida_data", ""], [36, 0, 0, 1, "aiida_workflows", ""], [46, 0, 0, 1, "ext_interfaces", ""], [61, 0, 0, 1, "fct", ""], [71, 0, 0, 1, "io", ""], [79, 0, 0, 1, "ml", ""], [85, 0, 0, 1, "plots", ""], [108, 0, 0, 1, "strct", ""], [130, 0, 0, 1, "utils", ""]], "aim2dat.aiida_data": [[1, 0, 0, 1, "gaussian_cube_data", ""], [3, 0, 0, 1, "surface_data", ""]], "aim2dat.aiida_data.gaussian_cube_data": [[1, 1, 1, 0, "GaussianCubeData", "Bases: aiida.orm.Data"]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData": [[1, 2, 1, 0, "Collection", "Return the collection type for this class."], [1, 3, 1, 0, "atomic_charges", "Return the atomic charges."], [1, 3, 1, 0, "atomic_numbers", "Return the atomic numbers."], [1, 3, 1, 0, "atomic_positions", "Return the atomic positions (in bohr)."], [1, 3, 1, 0, "backend", "Get the backend for this entity"], [1, 3, 1, 0, "backend_entity", "Get the implementing class for this object"], [1, 2, 1, 0, "base", "Return the node base namespace."], [1, 3, 1, 0, "cell", "Return the cell."], [1, 2, 1, 0, "class_node_type", "Returns the node type of this node (sub) class."], [1, 2, 1, 0, "clone", "Create a clone of the Data node."], [1, 2, 1, 0, "collection", "Get a collection for objects of this type, with the default backend."], [1, 3, 1, 0, "comment", "Return the second line of the cube file."], [1, 3, 1, 0, "computer", "Return the computer of this node."], [1, 2, 1, 0, "convert", "Convert the AiiDA StructureData into another python object"], [1, 3, 1, 0, "creator", "Return the creator of this node or None if it does not exist."], [1, 3, 1, 0, "ctime", "Return the node ctime."], [1, 3, 1, 0, "description", "Return the node description."], [1, 3, 1, 0, "dset_ids", "Return the data set identifiers."], [1, 2, 1, 0, "entry_point", "Return the entry point associated this node class."], [1, 2, 1, 0, "export", "Save a Data object to a file."], [1, 2, 1, 0, "get", "Get an entity of the collection matching the given filters."], [1, 2, 1, 0, "get_collection", "Get a collection for objects of this type for a given backend."], [1, 2, 1, 0, "get_content", "Get content of the cube file."], [1, 2, 1, 0, "get_cube_data", "Get cube data points."], [1, 2, 1, 0, "get_description", "Return a string with a description of the node."], [1, 2, 1, 0, "get_export_formats", "Get the list of valid export format strings"], [1, 2, 1, 0, "get_structure", "Get underlying structure."], [1, 3, 1, 0, "id", "Return the id for this entity."], [1, 2, 1, 0, "importfile", "Populate a Data object from a file."], [1, 2, 1, 0, "importstring", "Converts a Data object to other text format."], [1, 2, 1, 0, "initialize", "Initialize instance attributes."], [1, 3, 1, 0, "is_stored", "Return whether the entity is stored."], [1, 3, 1, 0, "is_valid_cache", "Hook to exclude certain Node classes from being considered a valid cache."], [1, 3, 1, 0, "label", "Return the node label."], [1, 3, 1, 0, "logger", "Return the logger configured for this Node."], [1, 3, 1, 0, "mtime", "Return the node mtime."], [1, 3, 1, 0, "node_type", "Return the node type."], [1, 2, 1, 0, "objects", "Get a collection for objects of this type, with the default backend."], [1, 2, 1, 0, "open_cube", "Open cube file."], [1, 3, 1, 0, "origin", "Return the origin of the data."], [1, 3, 1, 0, "pk", "Return the primary key for this entity."], [1, 3, 1, 0, "process_type", "Return the node process type."], [1, 2, 1, 0, "set_from_file", "Set information from existing cube file."], [1, 2, 1, 0, "set_source", "Sets the dictionary describing the source of Data object."], [1, 3, 1, 0, "shape", "Return the number of points in each direction."], [1, 3, 1, 0, "source", "Gets the dictionary describing the source of Data object. Possible fields:"], [1, 2, 1, 0, "store", "Store the node in the database while saving its attributes and repository directory."], [1, 2, 1, 0, "store_all", "Store the node, together with all input links."], [1, 3, 1, 0, "title", "Return the title of the cube file."], [1, 3, 1, 0, "user", "Return the user of this node."], [1, 3, 1, 0, "uuid", "Return the node UUID."]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.convert": [[1, 4, 2, 0, "object_format", "Specify the output format"]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.export": [[1, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [1, 4, 2, 0, "kwargs", "additional parameters to be passed to the _exportcontent method"], [1, 4, 2, 0, "overwrite", "if set to True, overwrites file found at path. Default=False"]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_collection": [[1, 4, 2, 0, "backend", "The backend of the collection to use."]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importfile": [[1, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [1, 4, 2, 0, "fname", "string with file name. Can be an absolute or relative path."]], "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importstring": [[1, 4, 2, 0, "fileformat", "a string (the extension) to describe the file format."]], "aim2dat.aiida_data.surface_data": [[3, 1, 1, 0, "SurfaceData", "Bases: aiida.orm.Data"]], "aim2dat.aiida_data.surface_data.SurfaceData": [[3, 2, 1, 0, "Collection", "Return the collection type for this class."], [3, 3, 1, 0, "aperiodic_dir", "Non-periodic direction of the slab."], [3, 3, 1, 0, "backend", "Get the backend for this entity"], [3, 3, 1, 0, "backend_entity", "Get the implementing class for this object"], [3, 2, 1, 0, "base", "Return the node base namespace."], [3, 3, 1, 0, "bottom_terminating_structure", "Bottom terminating structure of the surface."], [3, 2, 1, 0, "class_node_type", "Returns the node type of this node (sub) class."], [3, 2, 1, 0, "clone", "Create a clone of the Data node."], [3, 2, 1, 0, "collection", "Get a collection for objects of this type, with the default backend."], [3, 3, 1, 0, "computer", "Return the computer of this node."], [3, 2, 1, 0, "convert", "Convert the AiiDA StructureData into another python object"], [3, 3, 1, 0, "creator", "Return the creator of this node or None if it does not exist."], [3, 3, 1, 0, "ctime", "Return the node ctime."], [3, 3, 1, 0, "description", "Return the node description."], [3, 2, 1, 0, "entry_point", "Return the entry point associated this node class."], [3, 2, 1, 0, "export", "Save a Data object to a file."], [3, 2, 1, 0, "get", "Get an entity of the collection matching the given filters."], [3, 2, 1, 0, "get_collection", "Get a collection for objects of this type for a given backend."], [3, 2, 1, 0, "get_description", "Return a string with a description of the node."], [3, 2, 1, 0, "get_export_formats", "Get the list of valid export format strings"], [3, 3, 1, 0, "id", "Return the id for this entity."], [3, 2, 1, 0, "importfile", "Populate a Data object from a file."], [3, 2, 1, 0, "importstring", "Converts a Data object to other text format."], [3, 2, 1, 0, "initialize", "Initialize instance attributes."], [3, 3, 1, 0, "is_stored", "Return whether the entity is stored."], [3, 3, 1, 0, "is_valid_cache", "Hook to exclude certain Node classes from being considered a valid cache."], [3, 3, 1, 0, "label", "Return the node label."], [3, 3, 1, 0, "logger", "Return the logger configured for this Node."], [3, 3, 1, 0, "miller_indices", "Miller indices of the surface facet."], [3, 3, 1, 0, "mtime", "Return the node mtime."], [3, 3, 1, 0, "node_type", "Return the node type."], [3, 2, 1, 0, "objects", "Get a collection for objects of this type, with the default backend."], [3, 3, 1, 0, "pk", "Return the primary key for this entity."], [3, 3, 1, 0, "process_type", "Return the node process type."], [3, 3, 1, 0, "repeating_structure", "Repeating structure of the surface."], [3, 2, 1, 0, "set_bottom_terminating_structure", "Set bottom-terminating non-symmetric structure."], [3, 2, 1, 0, "set_repeating_structure", "Set repeating structure."], [3, 2, 1, 0, "set_source", "Sets the dictionary describing the source of Data object."], [3, 2, 1, 0, "set_top_terminating_structure", "Set top-terminating structure."], [3, 2, 1, 0, "set_top_terminating_structure_nsym", "Set top-terminating non-symmetric structure."], [3, 3, 1, 0, "source", "Gets the dictionary describing the source of Data object. Possible fields:"], [3, 2, 1, 0, "store", "Store the node in the database while saving its attributes and repository directory."], [3, 2, 1, 0, "store_all", "Store the node, together with all input links."], [3, 3, 1, 0, "surface_area", "Surface area."], [3, 3, 1, 0, "termination", "Termination of the surface facet."], [3, 3, 1, 0, "top_terminating_structure", "Top terminating structure of the surface."], [3, 3, 1, 0, "top_terminating_structure_nsym", "Top terminating non-symmetric structure of the surface."], [3, 3, 1, 0, "user", "Return the user of this node."], [3, 3, 1, 0, "uuid", "Return the node UUID."]], "aim2dat.aiida_data.surface_data.SurfaceData.convert": [[3, 4, 2, 0, "object_format", "Specify the output format"]], "aim2dat.aiida_data.surface_data.SurfaceData.export": [[3, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [3, 4, 2, 0, "kwargs", "additional parameters to be passed to the _exportcontent method"], [3, 4, 2, 0, "overwrite", "if set to True, overwrites file found at path. Default=False"]], "aim2dat.aiida_data.surface_data.SurfaceData.get_collection": [[3, 4, 2, 0, "backend", "The backend of the collection to use."]], "aim2dat.aiida_data.surface_data.SurfaceData.importfile": [[3, 4, 2, 0, "fileformat", "kind of format to use for the export. If not present, it will try to use the extension of the file name."], [3, 4, 2, 0, "fname", "string with file name. Can be an absolute or relative path."]], "aim2dat.aiida_data.surface_data.SurfaceData.importstring": [[3, 4, 2, 0, "fileformat", "a string (the extension) to describe the file format."]], "aim2dat.aiida_workflows": [[4, 0, 0, 1, "_workflow_builder_utils", ""], [6, 0, 0, 1, "chargemol", ""], [22, 0, 0, 1, "cp2k", ""], [30, 0, 0, 1, "critic2", ""], [34, 0, 0, 1, "enumlib", ""], [37, 0, 0, 1, "utils", ""], [38, 0, 0, 1, "workflow_builder", ""]], "aim2dat.aiida_workflows.chargemol": [[5, 0, 0, 1, "calcjobs", ""], [7, 0, 0, 1, "parsers", ""]], "aim2dat.aiida_workflows.chargemol.calcjobs": [[5, 1, 1, 0, "ChargemolCalculation", "Bases: aiida.engine.CalcJob"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation": [[5, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [5, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [5, 2, 1, 0, "build_process_type", "The process type."], [5, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [5, 2, 1, 0, "define", "Define input/output and outline."], [5, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [5, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [5, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [5, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [5, 2, 1, 0, "get_builder", ""], [5, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [5, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [5, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [5, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [5, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [5, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [5, 2, 1, 0, "init", ""], [5, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [5, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [5, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [5, 5, 1, 0, "link_label_retrieved", ""], [5, 2, 1, 0, "load_instance_state", "Load instance state."], [5, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [5, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [5, 2, 1, 0, "on_create", "Called when a Process is created."], [5, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [5, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [5, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [5, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [5, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [5, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [5, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [5, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [5, 2, 1, 0, "out", "Attach output to output port."], [5, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [5, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [5, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [5, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [5, 2, 1, 0, "prepare_for_submission", "Prepare for submission."], [5, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [5, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [5, 2, 1, 0, "run", "Run the calculation job."], [5, 3, 1, 0, "runner", "Get process runner."], [5, 2, 1, 0, "save_instance_state", "Save instance state."], [5, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [5, 2, 1, 0, "spec", ""], [5, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [5, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [5, 2, 1, 0, "submit", "Submit process for execution."], [5, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [5, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [5, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys": [[5, 5, 1, 0, "CALC_ID", ""], [5, 2, 1, 0, "name", "The name of the Enum member."], [5, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.decode_input_args": [[5, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.encode_input_args": [[5, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_inputs": [[5, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [5, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [5, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_outputs": [[5, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [5, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [5, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_exit_statuses": [[5, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_importer": [[5, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.kill": [[5, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.load_instance_state": [[5, 4, 2, 0, "load_context", ""], [5, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_except": [[5, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_finish": [[5, 4, 2, 0, "result", "result of the process"], [5, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_output_emitting": [[5, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [5, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_paused": [[5, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out": [[5, 4, 2, 0, "output_port", "name of output port"], [5, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out_many": [[5, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse": [[5, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.presubmit": [[5, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.report": [[5, 4, 2, 0, "args", "args to pass to the log call"], [5, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [5, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.set_status": [[5, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.submit": [[5, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.terminate": [[5, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.chargemol.parsers": [[7, 1, 1, 0, "ChargemolParser", "Bases: aiida.parsers.Parser"]], "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser": [[7, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [7, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [7, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [7, 3, 1, 0, "node", "Return the node instance"], [7, 2, 1, 0, "out", "Register a node as an output with the given link label."], [7, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [7, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [7, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [7, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.out": [[7, 4, 2, 0, "link_label", "the name of the link label"], [7, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.parse_from_node": [[7, 4, 2, 0, "node", "a CalcJobNode instance"], [7, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [7, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k": [[8, 0, 0, 1, "auxiliary_functions", ""], [9, 0, 0, 1, "band_structure_work_chain", ""], [10, 0, 0, 1, "calcjobs", ""], [11, 0, 0, 1, "cell_opt_work_chain", ""], [12, 0, 0, 1, "combined_work_chains", ""], [13, 0, 0, 1, "core_work_chain_handlers", ""], [14, 0, 0, 1, "core_work_chain_inputs", ""], [15, 0, 0, 1, "core_work_chain_opt", ""], [16, 0, 0, 1, "core_work_chain_scf", ""], [17, 0, 0, 1, "cube_work_chain", ""], [18, 0, 0, 1, "eigenvalues_work_chain", ""], [19, 0, 0, 1, "el_properties_utils", ""], [20, 0, 0, 1, "find_scf_p_work_chain", ""], [21, 0, 0, 1, "geo_opt_work_chain", ""], [23, 0, 0, 1, "parsers", ""], [24, 0, 0, 1, "partial_charges_work_chain", ""], [25, 0, 0, 1, "pdos_work_chain", ""], [26, 0, 0, 1, "planar_fields_work_chain", ""], [27, 0, 0, 1, "surface_opt_utils", ""], [28, 0, 0, 1, "work_chain_specs", ""]], "aim2dat.aiida_workflows.cp2k.auxiliary_functions": [[8, 6, 1, 0, "calc_nr_explicit_electrons", "Determine the number of valence electrons based on the structure and the pseudopotential name."], [8, 6, 1, 0, "calculate_added_mos", "Calculate the number of unoccupied states based on the number of electrons and the smearing temperature."], [8, 6, 1, 0, "create_aiida_node", "Create AiiDA data node from standard python variable."], [8, 6, 1, 0, "estimate_comp_resources", "Estimate the number of nodes based on the number of electrons."], [8, 6, 1, 0, "return_rec_space_eigenvalues", "Calcfuntion that summarizes information on the eigenvalues and 1st Brillouin zone."], [8, 6, 1, 0, "return_runtime_stats", "Return runtime statistics of the work chain."], [8, 6, 1, 0, "return_scf_parameters", "Aiida calcfuntion that creates a dictionary of the mixing parameters."], [8, 6, 1, 0, "return_work_chain_info", "Return general information of the work chain."], [8, 6, 1, 0, "set_xc_functional", "Set the parameters for the exchange-correlation functional in the input-paramters."]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain": [[9, 1, 1, 0, "BandStructureWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain": [[9, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [9, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [9, 2, 1, 0, "build_process_type", "The process type."], [9, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [9, 3, 1, 0, "ctx", "Get the context."], [9, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [9, 2, 1, 0, "define", "Specify inputs and outputs."], [9, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [9, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [9, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [9, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [9, 2, 1, 0, "get_builder", ""], [9, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [9, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [9, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [9, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [9, 2, 1, 0, "get_process_handlers", ""], [9, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [9, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [9, 2, 1, 0, "init", ""], [9, 2, 1, 0, "initialize_scf_parameters", ""], [9, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [9, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [9, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [9, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [9, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [9, 2, 1, 0, "load_instance_state", "Load instance state."], [9, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [9, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [9, 2, 1, 0, "on_create", "Called when a Process is created."], [9, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [9, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [9, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [9, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [9, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [9, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [9, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [9, 2, 1, 0, "on_run", ""], [9, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [9, 2, 1, 0, "on_wait", "Entering the WAITING state."], [9, 2, 1, 0, "out", "Attach output to output port."], [9, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [9, 2, 1, 0, "post_processing", ""], [9, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [9, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [9, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [9, 2, 1, 0, "run", ""], [9, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [9, 3, 1, 0, "runner", "Get process runner."], [9, 2, 1, 0, "save_instance_state", "Save instance state."], [9, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [9, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [9, 2, 1, 0, "setup_inputs", ""], [9, 2, 1, 0, "setup_wc_specific_inputs", "Set the k-path for the band structure calculation."], [9, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [9, 2, 1, 0, "spec", ""], [9, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [9, 2, 1, 0, "submit", "Submit process for execution."], [9, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [9, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [9, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [9, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [9, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [9, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [9, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys": [[9, 5, 1, 0, "CALC_ID", ""], [9, 2, 1, 0, "name", "The name of the Enum member."], [9, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.decode_input_args": [[9, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.encode_input_args": [[9, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_inputs": [[9, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [9, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [9, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_outputs": [[9, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [9, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [9, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_exit_statuses": [[9, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.is_process_handler": [[9, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.kill": [[9, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.load_instance_state": [[9, 4, 2, 0, "load_context", ""], [9, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_except": [[9, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_finish": [[9, 4, 2, 0, "result", "result of the process"], [9, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_output_emitting": [[9, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [9, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_paused": [[9, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out": [[9, 4, 2, 0, "output_port", "name of output port"], [9, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out_many": [[9, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.report": [[9, 4, 2, 0, "args", "args to pass to the log call"], [9, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [9, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.save_instance_state": [[9, 4, 2, 0, "out_state", "state to save in"], [9, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.set_status": [[9, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.submit": [[9, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.calcjobs": [[10, 7, 1, 0, "BandsData", ""], [10, 1, 1, 0, "Cp2kCalculation", "Bases: aiida.engine.CalcJob"], [10, 7, 1, 0, "StructureData", ""], [10, 7, 1, 0, "XyData", ""]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation": [[10, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [10, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [10, 2, 1, 0, "build_process_type", "The process type."], [10, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [10, 2, 1, 0, "define", "Define input/output and outline."], [10, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [10, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [10, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [10, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [10, 2, 1, 0, "get_builder", ""], [10, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [10, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [10, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [10, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [10, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [10, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [10, 2, 1, 0, "init", ""], [10, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [10, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [10, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [10, 5, 1, 0, "link_label_retrieved", ""], [10, 2, 1, 0, "load_instance_state", "Load instance state."], [10, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [10, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [10, 2, 1, 0, "on_create", "Called when a Process is created."], [10, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [10, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [10, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [10, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [10, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [10, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [10, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [10, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [10, 2, 1, 0, "out", "Attach output to output port."], [10, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [10, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [10, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [10, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [10, 2, 1, 0, "prepare_for_submission", "Prepare input for calculation."], [10, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [10, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [10, 2, 1, 0, "run", "Run the calculation job."], [10, 3, 1, 0, "runner", "Get process runner."], [10, 2, 1, 0, "save_instance_state", "Save instance state."], [10, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [10, 2, 1, 0, "spec", ""], [10, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [10, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [10, 2, 1, 0, "submit", "Submit process for execution."], [10, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [10, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [10, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys": [[10, 5, 1, 0, "CALC_ID", ""], [10, 2, 1, 0, "name", "The name of the Enum member."], [10, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.decode_input_args": [[10, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.encode_input_args": [[10, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_inputs": [[10, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [10, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [10, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_outputs": [[10, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [10, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [10, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_exit_statuses": [[10, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_importer": [[10, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.kill": [[10, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.load_instance_state": [[10, 4, 2, 0, "load_context", ""], [10, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_except": [[10, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_finish": [[10, 4, 2, 0, "result", "result of the process"], [10, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_output_emitting": [[10, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [10, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_paused": [[10, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out": [[10, 4, 2, 0, "output_port", "name of output port"], [10, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out_many": [[10, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse": [[10, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.presubmit": [[10, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.report": [[10, 4, 2, 0, "args", "args to pass to the log call"], [10, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [10, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.set_status": [[10, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.submit": [[10, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.terminate": [[10, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain": [[11, 1, 1, 0, "CellOptWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_opt_work_chain._BaseOptimizationWorkChain"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain": [[11, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [11, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [11, 2, 1, 0, "build_process_type", "The process type."], [11, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [11, 3, 1, 0, "ctx", "Get the context."], [11, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [11, 2, 1, 0, "define", "Specify inputs, outputs and the workflow."], [11, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [11, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [11, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [11, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [11, 2, 1, 0, "get_builder", ""], [11, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [11, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [11, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [11, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [11, 2, 1, 0, "get_process_handlers", ""], [11, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [11, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [11, 2, 1, 0, "init", ""], [11, 2, 1, 0, "initialize_opt_parameters", ""], [11, 2, 1, 0, "initialize_scf_parameters", ""], [11, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [11, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [11, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [11, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [11, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [11, 2, 1, 0, "load_instance_state", "Load instance state."], [11, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [11, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [11, 2, 1, 0, "on_create", "Called when a Process is created."], [11, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [11, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [11, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [11, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [11, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [11, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [11, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [11, 2, 1, 0, "on_run", ""], [11, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [11, 2, 1, 0, "on_wait", "Entering the WAITING state."], [11, 2, 1, 0, "opt_post_processing", ""], [11, 2, 1, 0, "out", "Attach output to output port."], [11, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [11, 2, 1, 0, "post_processing", ""], [11, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [11, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [11, 2, 1, 0, "resubmit_unconverged_geometry", "Resubmit if geometry is unconverged and choose tighter settings for the optimization algorithm."], [11, 2, 1, 0, "resubmit_unfinished_calculation", "Resubmit the geometry in case the walltime is hit or the calculation is interrupted."], [11, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [11, 2, 1, 0, "run", ""], [11, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [11, 3, 1, 0, "runner", "Get process runner."], [11, 2, 1, 0, "save_instance_state", "Save instance state."], [11, 2, 1, 0, "set_additional_optimization_p", "Place holder for additional optimization parameters set in the CP2K input dictionary."], [11, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [11, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [11, 2, 1, 0, "setup_inputs", ""], [11, 2, 1, 0, "setup_wc_specific_inputs", "Set stress tensor calculation to analystical."], [11, 2, 1, 0, "should_run_process", "Check conditions whether to run the calculation or not."], [11, 2, 1, 0, "spec", ""], [11, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [11, 2, 1, 0, "submit", "Submit process for execution."], [11, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [11, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [11, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [11, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [11, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [11, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys": [[11, 5, 1, 0, "CALC_ID", ""], [11, 2, 1, 0, "name", "The name of the Enum member."], [11, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.decode_input_args": [[11, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.encode_input_args": [[11, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_inputs": [[11, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [11, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [11, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_outputs": [[11, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [11, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [11, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_exit_statuses": [[11, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.is_process_handler": [[11, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.kill": [[11, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.load_instance_state": [[11, 4, 2, 0, "load_context", ""], [11, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_except": [[11, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_finish": [[11, 4, 2, 0, "result", "result of the process"], [11, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_output_emitting": [[11, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [11, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_paused": [[11, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out": [[11, 4, 2, 0, "output_port", "name of output port"], [11, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out_many": [[11, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.report": [[11, 4, 2, 0, "args", "args to pass to the log call"], [11, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [11, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.save_instance_state": [[11, 4, 2, 0, "out_state", "state to save in"], [11, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.set_status": [[11, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.submit": [[11, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains": [[12, 7, 1, 0, "BandStructureWC", ""], [12, 7, 1, 0, "CellOptWC", ""], [12, 7, 1, 0, "Cp2kCalculation", ""], [12, 7, 1, 0, "EigenvaluesWC", ""], [12, 1, 1, 0, "ElectronicPropertiesWorkChain", "Bases: aiida.engine.WorkChain"], [12, 7, 1, 0, "FindSCFParametersWC", ""], [12, 7, 1, 0, "GeoOptWC", ""], [12, 7, 1, 0, "PDOSWC", ""], [12, 7, 1, 0, "PartialChargesWC", ""], [12, 7, 1, 0, "StructureData", ""], [12, 7, 1, 0, "SurfaceData", ""], [12, 1, 1, 0, "SurfaceOptWorkChain", "Bases: aiida.engine.WorkChain"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain": [[12, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [12, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [12, 2, 1, 0, "build_process_type", "The process type."], [12, 3, 1, 0, "ctx", "Get the context."], [12, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [12, 2, 1, 0, "define", "Specify inputs and outputs."], [12, 2, 1, 0, "dft_cell_opt", "Perform the cell relaxation."], [12, 2, 1, 0, "electronic_structure", "Calculate the electronic properties of the crystal."], [12, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [12, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [12, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [12, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [12, 2, 1, 0, "find_scf_parameters", "Find mixing parameters that converge the Kohn-Sham equations."], [12, 2, 1, 0, "get_builder", ""], [12, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [12, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [12, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [12, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [12, 2, 1, 0, "init", ""], [12, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [12, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [12, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [12, 2, 1, 0, "load_instance_state", "Load instance state."], [12, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [12, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [12, 2, 1, 0, "on_create", "Called when a Process is created."], [12, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [12, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [12, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [12, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [12, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [12, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [12, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [12, 2, 1, 0, "on_run", ""], [12, 2, 1, 0, "on_terminated", "Called when a Process enters a terminal state."], [12, 2, 1, 0, "on_wait", "Entering the WAITING state."], [12, 2, 1, 0, "out", "Attach output to output port."], [12, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [12, 2, 1, 0, "post_processing", "Post-processing routine."], [12, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [12, 2, 1, 0, "run", ""], [12, 2, 1, 0, "run_el_prop_wc", "Run electronic properties calculation."], [12, 3, 1, 0, "runner", "Get process runner."], [12, 2, 1, 0, "save_instance_state", "Save instance state."], [12, 2, 1, 0, "set_input_parameter", "Set input parameter for a child work chain."], [12, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [12, 2, 1, 0, "setup", "Set up calculation parameters."], [12, 2, 1, 0, "should_run_cell_opt", "Whether to run a cell optimization."], [12, 2, 1, 0, "spec", ""], [12, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [12, 2, 1, 0, "submit", "Submit process for execution."], [12, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [12, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [12, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys": [[12, 5, 1, 0, "CALC_ID", ""], [12, 2, 1, 0, "name", "The name of the Enum member."], [12, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.decode_input_args": [[12, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.encode_input_args": [[12, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_inputs": [[12, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [12, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [12, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_outputs": [[12, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [12, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [12, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_exit_statuses": [[12, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.kill": [[12, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.load_instance_state": [[12, 4, 2, 0, "load_context", ""], [12, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_except": [[12, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_finish": [[12, 4, 2, 0, "result", "result of the process"], [12, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_output_emitting": [[12, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [12, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_paused": [[12, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out": [[12, 4, 2, 0, "output_port", "name of output port"], [12, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out_many": [[12, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.report": [[12, 4, 2, 0, "args", "args to pass to the log call"], [12, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [12, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.save_instance_state": [[12, 4, 2, 0, "out_state", "state to save in"], [12, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.set_status": [[12, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.submit": [[12, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain": [[12, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [12, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [12, 2, 1, 0, "build_process_type", "The process type."], [12, 3, 1, 0, "ctx", "Get the context."], [12, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [12, 2, 1, 0, "define", "Specify inputs and outputs."], [12, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [12, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [12, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [12, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [12, 2, 1, 0, "find_scf_p", "Run the FindSCFParameters work chain."], [12, 2, 1, 0, "geo_opt", "Run the GeoOpt work chain."], [12, 2, 1, 0, "geo_preopt", "Run the GeoOpt work chain."], [12, 2, 1, 0, "get_builder", ""], [12, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [12, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [12, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [12, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [12, 2, 1, 0, "init", ""], [12, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [12, 2, 1, 0, "inspect_find_scf_p_results", "Check if the previous work chain finished successful."], [12, 2, 1, 0, "inspect_geo_opt_results", "Check if the previous work chain finished successful."], [12, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [12, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [12, 2, 1, 0, "load_instance_state", "Load instance state."], [12, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [12, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [12, 2, 1, 0, "on_create", "Called when a Process is created."], [12, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [12, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [12, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [12, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [12, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [12, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [12, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [12, 2, 1, 0, "on_run", ""], [12, 2, 1, 0, "on_terminated", "Called when a Process enters a terminal state."], [12, 2, 1, 0, "on_wait", "Entering the WAITING state."], [12, 2, 1, 0, "out", "Attach output to output port."], [12, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [12, 2, 1, 0, "post_processing", "Define outputs."], [12, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [12, 2, 1, 0, "run", ""], [12, 3, 1, 0, "runner", "Get process runner."], [12, 2, 1, 0, "save_instance_state", "Save instance state."], [12, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [12, 2, 1, 0, "setup", "Define initial parameters."], [12, 2, 1, 0, "should_run_add_calc", "Check whether additional calculations are run after the slab size is converged."], [12, 2, 1, 0, "should_run_slab_conv", "Check whether the convergence criteria is fulfilled and the slab size is not exceeding the maximum slab size."], [12, 2, 1, 0, "spec", ""], [12, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [12, 2, 1, 0, "submit", "Submit process for execution."], [12, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [12, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [12, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys": [[12, 5, 1, 0, "CALC_ID", ""], [12, 2, 1, 0, "name", "The name of the Enum member."], [12, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.decode_input_args": [[12, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.encode_input_args": [[12, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_inputs": [[12, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [12, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [12, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_outputs": [[12, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [12, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [12, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_exit_statuses": [[12, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.kill": [[12, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.load_instance_state": [[12, 4, 2, 0, "load_context", ""], [12, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_except": [[12, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_finish": [[12, 4, 2, 0, "result", "result of the process"], [12, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_output_emitting": [[12, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [12, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_paused": [[12, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out": [[12, 4, 2, 0, "output_port", "name of output port"], [12, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out_many": [[12, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.report": [[12, 4, 2, 0, "args", "args to pass to the log call"], [12, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [12, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.save_instance_state": [[12, 4, 2, 0, "out_state", "state to save in"], [12, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.set_status": [[12, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.submit": [[12, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs": [[14, 7, 1, 0, "cwd", ""]], "aim2dat.aiida_workflows.cp2k.core_work_chain_opt": [[15, 7, 1, 0, "cwd", ""]], "aim2dat.aiida_workflows.cp2k.core_work_chain_scf": [[16, 7, 1, 0, "cwd", ""]], "aim2dat.aiida_workflows.cp2k.cube_work_chain": [[17, 1, 1, 0, "CubeWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain": [[17, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [17, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [17, 2, 1, 0, "build_process_type", "The process type."], [17, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [17, 3, 1, 0, "ctx", "Get the context."], [17, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [17, 2, 1, 0, "define", "Specify inputs and outputs."], [17, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [17, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [17, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [17, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [17, 2, 1, 0, "get_builder", ""], [17, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [17, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [17, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [17, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [17, 2, 1, 0, "get_process_handlers", ""], [17, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [17, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [17, 2, 1, 0, "init", ""], [17, 2, 1, 0, "initialize_scf_parameters", ""], [17, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [17, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [17, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [17, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [17, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [17, 2, 1, 0, "load_instance_state", "Load instance state."], [17, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [17, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [17, 2, 1, 0, "on_create", "Called when a Process is created."], [17, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [17, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [17, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [17, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [17, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [17, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [17, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [17, 2, 1, 0, "on_run", ""], [17, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [17, 2, 1, 0, "on_wait", "Entering the WAITING state."], [17, 2, 1, 0, "out", "Attach output to output port."], [17, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [17, 2, 1, 0, "post_processing", ""], [17, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [17, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [17, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [17, 2, 1, 0, "run", ""], [17, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [17, 3, 1, 0, "runner", "Get process runner."], [17, 2, 1, 0, "save_instance_state", "Save instance state."], [17, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [17, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [17, 2, 1, 0, "setup_inputs", ""], [17, 2, 1, 0, "setup_wc_specific_inputs", "Add print commands for the cube files."], [17, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [17, 2, 1, 0, "spec", ""], [17, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [17, 2, 1, 0, "submit", "Submit process for execution."], [17, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [17, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [17, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [17, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [17, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [17, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [17, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys": [[17, 5, 1, 0, "CALC_ID", ""], [17, 2, 1, 0, "name", "The name of the Enum member."], [17, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.decode_input_args": [[17, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.encode_input_args": [[17, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_inputs": [[17, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [17, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [17, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_outputs": [[17, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [17, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [17, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_exit_statuses": [[17, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.is_process_handler": [[17, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.kill": [[17, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.load_instance_state": [[17, 4, 2, 0, "load_context", ""], [17, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_except": [[17, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_finish": [[17, 4, 2, 0, "result", "result of the process"], [17, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_output_emitting": [[17, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [17, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_paused": [[17, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out": [[17, 4, 2, 0, "output_port", "name of output port"], [17, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out_many": [[17, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.report": [[17, 4, 2, 0, "args", "args to pass to the log call"], [17, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [17, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.save_instance_state": [[17, 4, 2, 0, "out_state", "state to save in"], [17, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.set_status": [[17, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.submit": [[17, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain": [[18, 1, 1, 0, "EigenvaluesWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain": [[18, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [18, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [18, 2, 1, 0, "build_process_type", "The process type."], [18, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [18, 3, 1, 0, "ctx", "Get the context."], [18, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [18, 2, 1, 0, "define", "Specify inputs and outputs."], [18, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [18, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [18, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [18, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [18, 2, 1, 0, "get_builder", ""], [18, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [18, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [18, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [18, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [18, 2, 1, 0, "get_process_handlers", ""], [18, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [18, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [18, 2, 1, 0, "init", ""], [18, 2, 1, 0, "initialize_scf_parameters", ""], [18, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [18, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [18, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [18, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [18, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [18, 2, 1, 0, "load_instance_state", "Load instance state."], [18, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [18, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [18, 2, 1, 0, "on_create", "Called when a Process is created."], [18, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [18, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [18, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [18, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [18, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [18, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [18, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [18, 2, 1, 0, "on_run", ""], [18, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [18, 2, 1, 0, "on_wait", "Entering the WAITING state."], [18, 2, 1, 0, "out", "Attach output to output port."], [18, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [18, 2, 1, 0, "post_processing", ""], [18, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [18, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [18, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [18, 2, 1, 0, "run", ""], [18, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [18, 3, 1, 0, "runner", "Get process runner."], [18, 2, 1, 0, "save_instance_state", "Save instance state."], [18, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [18, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [18, 2, 1, 0, "setup_inputs", ""], [18, 2, 1, 0, "setup_wc_specific_inputs", "Set k-points to full grid and the print statement."], [18, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [18, 2, 1, 0, "spec", ""], [18, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [18, 2, 1, 0, "submit", "Submit process for execution."], [18, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [18, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [18, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [18, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [18, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [18, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [18, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys": [[18, 5, 1, 0, "CALC_ID", ""], [18, 2, 1, 0, "name", "The name of the Enum member."], [18, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.decode_input_args": [[18, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.encode_input_args": [[18, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_inputs": [[18, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [18, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [18, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_outputs": [[18, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [18, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [18, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_exit_statuses": [[18, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.is_process_handler": [[18, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.kill": [[18, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.load_instance_state": [[18, 4, 2, 0, "load_context", ""], [18, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_except": [[18, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_finish": [[18, 4, 2, 0, "result", "result of the process"], [18, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_output_emitting": [[18, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [18, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_paused": [[18, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out": [[18, 4, 2, 0, "output_port", "name of output port"], [18, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out_many": [[18, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.report": [[18, 4, 2, 0, "args", "args to pass to the log call"], [18, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [18, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.save_instance_state": [[18, 4, 2, 0, "out_state", "state to save in"], [18, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.set_status": [[18, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.submit": [[18, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.el_properties_utils": [[19, 7, 1, 0, "cwd", ""], [19, 6, 1, 0, "elprop_setup", "Set up calculation parameters."], [19, 6, 1, 0, "set_ctx_parameters_from_protocol", "Set ctx parameters from protocol."]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain": [[20, 1, 1, 0, "FindSCFParametersWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain": [[20, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [20, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [20, 2, 1, 0, "build_process_type", "The process type."], [20, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [20, 3, 1, 0, "ctx", "Get the context."], [20, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [20, 2, 1, 0, "define", "Specify inputs, outputs and the workflow."], [20, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [20, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [20, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [20, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [20, 2, 1, 0, "get_builder", ""], [20, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [20, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [20, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [20, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [20, 2, 1, 0, "get_process_handlers", ""], [20, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [20, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [20, 2, 1, 0, "init", ""], [20, 2, 1, 0, "initialize_scf_parameters", ""], [20, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [20, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [20, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [20, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [20, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [20, 2, 1, 0, "load_instance_state", "Load instance state."], [20, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [20, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [20, 2, 1, 0, "on_create", "Called when a Process is created."], [20, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [20, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [20, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [20, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [20, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [20, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [20, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [20, 2, 1, 0, "on_run", ""], [20, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [20, 2, 1, 0, "on_wait", "Entering the WAITING state."], [20, 2, 1, 0, "out", "Attach output to output port."], [20, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [20, 2, 1, 0, "post_processing", ""], [20, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [20, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [20, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [20, 2, 1, 0, "run", ""], [20, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [20, 3, 1, 0, "runner", "Get process runner."], [20, 2, 1, 0, "save_instance_state", "Save instance state."], [20, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [20, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [20, 2, 1, 0, "setup_inputs", ""], [20, 2, 1, 0, "setup_wc_specific_inputs", "Check whether to add unoccupied states and the system character."], [20, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [20, 2, 1, 0, "spec", ""], [20, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [20, 2, 1, 0, "submit", "Submit process for execution."], [20, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [20, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [20, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [20, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [20, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [20, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys": [[20, 5, 1, 0, "CALC_ID", ""], [20, 2, 1, 0, "name", "The name of the Enum member."], [20, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.decode_input_args": [[20, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.encode_input_args": [[20, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_inputs": [[20, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [20, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [20, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_outputs": [[20, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [20, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [20, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_exit_statuses": [[20, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.is_process_handler": [[20, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.kill": [[20, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.load_instance_state": [[20, 4, 2, 0, "load_context", ""], [20, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_except": [[20, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_finish": [[20, 4, 2, 0, "result", "result of the process"], [20, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_output_emitting": [[20, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [20, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_paused": [[20, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out": [[20, 4, 2, 0, "output_port", "name of output port"], [20, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out_many": [[20, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.report": [[20, 4, 2, 0, "args", "args to pass to the log call"], [20, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [20, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.save_instance_state": [[20, 4, 2, 0, "out_state", "state to save in"], [20, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.set_status": [[20, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.submit": [[20, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain": [[21, 1, 1, 0, "GeoOptWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_opt_work_chain._BaseOptimizationWorkChain"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain": [[21, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [21, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [21, 2, 1, 0, "build_process_type", "The process type."], [21, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [21, 3, 1, 0, "ctx", "Get the context."], [21, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [21, 2, 1, 0, "define", "Specify inputs, outputs and the workflow."], [21, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [21, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [21, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [21, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [21, 2, 1, 0, "get_builder", ""], [21, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [21, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [21, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [21, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [21, 2, 1, 0, "get_process_handlers", ""], [21, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [21, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [21, 2, 1, 0, "init", ""], [21, 2, 1, 0, "initialize_opt_parameters", ""], [21, 2, 1, 0, "initialize_scf_parameters", ""], [21, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [21, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [21, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [21, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [21, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [21, 2, 1, 0, "load_instance_state", "Load instance state."], [21, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [21, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [21, 2, 1, 0, "on_create", "Called when a Process is created."], [21, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [21, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [21, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [21, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [21, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [21, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [21, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [21, 2, 1, 0, "on_run", ""], [21, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [21, 2, 1, 0, "on_wait", "Entering the WAITING state."], [21, 2, 1, 0, "opt_post_processing", ""], [21, 2, 1, 0, "out", "Attach output to output port."], [21, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [21, 2, 1, 0, "post_processing", ""], [21, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [21, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [21, 2, 1, 0, "resubmit_unconverged_geometry", "Resubmit if geometry is unconverged and choose tighter settings for the optimization algorithm."], [21, 2, 1, 0, "resubmit_unfinished_calculation", "Resubmit the geometry in case the walltime is hit or the calculation is interrupted."], [21, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [21, 2, 1, 0, "run", ""], [21, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [21, 3, 1, 0, "runner", "Get process runner."], [21, 2, 1, 0, "save_instance_state", "Save instance state."], [21, 2, 1, 0, "set_additional_optimization_p", "Place holder for additional optimization parameters set in the CP2K input dictionary."], [21, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [21, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [21, 2, 1, 0, "setup_inputs", ""], [21, 2, 1, 0, "setup_wc_specific_inputs", ""], [21, 2, 1, 0, "should_run_process", "Check conditions whether to run the calculation or not."], [21, 2, 1, 0, "spec", ""], [21, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [21, 2, 1, 0, "submit", "Submit process for execution."], [21, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [21, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [21, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [21, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [21, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [21, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys": [[21, 5, 1, 0, "CALC_ID", ""], [21, 2, 1, 0, "name", "The name of the Enum member."], [21, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.decode_input_args": [[21, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.encode_input_args": [[21, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_inputs": [[21, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [21, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [21, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_outputs": [[21, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [21, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [21, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_exit_statuses": [[21, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.is_process_handler": [[21, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.kill": [[21, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.load_instance_state": [[21, 4, 2, 0, "load_context", ""], [21, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_except": [[21, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_finish": [[21, 4, 2, 0, "result", "result of the process"], [21, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_output_emitting": [[21, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [21, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_paused": [[21, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out": [[21, 4, 2, 0, "output_port", "name of output port"], [21, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out_many": [[21, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.report": [[21, 4, 2, 0, "args", "args to pass to the log call"], [21, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [21, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.save_instance_state": [[21, 4, 2, 0, "out_state", "state to save in"], [21, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.set_status": [[21, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.submit": [[21, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.parsers": [[23, 7, 1, 0, "BandsData", ""], [23, 1, 1, 0, "Cp2kPartialChargesParser", "Bases: _Cp2kBaseParser"], [23, 1, 1, 0, "Cp2kStandardParser", "Bases: _Cp2kBaseParser"], [23, 1, 1, 0, "Cp2kTrajectoryParser", "Bases: _Cp2kBaseParser"], [23, 7, 1, 0, "GCubeData", ""], [23, 7, 1, 0, "StructureData", ""], [23, 7, 1, 0, "XyData", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser": [[23, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [23, 5, 1, 0, "extra_output_functions", ""], [23, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [23, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [23, 3, 1, 0, "node", "Return the node instance"], [23, 2, 1, 0, "out", "Register a node as an output with the given link label."], [23, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [23, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [23, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [23, 5, 1, 0, "parser_type", ""], [23, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.out": [[23, 4, 2, 0, "link_label", "the name of the link label"], [23, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse_from_node": [[23, 4, 2, 0, "node", "a CalcJobNode instance"], [23, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [23, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser": [[23, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [23, 5, 1, 0, "extra_output_functions", ""], [23, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [23, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [23, 3, 1, 0, "node", "Return the node instance"], [23, 2, 1, 0, "out", "Register a node as an output with the given link label."], [23, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [23, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [23, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [23, 5, 1, 0, "parser_type", ""], [23, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.out": [[23, 4, 2, 0, "link_label", "the name of the link label"], [23, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse_from_node": [[23, 4, 2, 0, "node", "a CalcJobNode instance"], [23, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [23, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser": [[23, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [23, 5, 1, 0, "extra_output_functions", ""], [23, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [23, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [23, 3, 1, 0, "node", "Return the node instance"], [23, 2, 1, 0, "out", "Register a node as an output with the given link label."], [23, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [23, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [23, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [23, 5, 1, 0, "parser_type", ""], [23, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.out": [[23, 4, 2, 0, "link_label", "the name of the link label"], [23, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse_from_node": [[23, 4, 2, 0, "node", "a CalcJobNode instance"], [23, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [23, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain": [[24, 7, 1, 0, "ChargemolCalculation", ""], [24, 7, 1, 0, "Critic2Calculation", ""], [24, 1, 1, 0, "PartialChargesWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain": [[24, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [24, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [24, 2, 1, 0, "build_process_type", "The process type."], [24, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [24, 3, 1, 0, "ctx", "Get the context."], [24, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [24, 2, 1, 0, "define", "Specify inputs and outputs."], [24, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [24, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [24, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [24, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [24, 2, 1, 0, "get_builder", ""], [24, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [24, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [24, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [24, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [24, 2, 1, 0, "get_process_handlers", ""], [24, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [24, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [24, 2, 1, 0, "init", ""], [24, 2, 1, 0, "initialize_scf_parameters", ""], [24, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [24, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [24, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [24, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [24, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [24, 2, 1, 0, "load_instance_state", "Load instance state."], [24, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [24, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [24, 2, 1, 0, "on_create", "Called when a Process is created."], [24, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [24, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [24, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [24, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [24, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [24, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [24, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [24, 2, 1, 0, "on_run", ""], [24, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [24, 2, 1, 0, "on_wait", "Entering the WAITING state."], [24, 2, 1, 0, "out", "Attach output to output port."], [24, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [24, 2, 1, 0, "post_processing", ""], [24, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [24, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [24, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [24, 2, 1, 0, "run", ""], [24, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [24, 3, 1, 0, "runner", "Get process runner."], [24, 2, 1, 0, "save_instance_state", "Save instance state."], [24, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [24, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [24, 2, 1, 0, "setup_external_partial_charge_analysis", "Set input parameters for external post-processing codes."], [24, 2, 1, 0, "setup_inputs", ""], [24, 2, 1, 0, "setup_wc_specific_inputs", "Set input parameters to calculate partial charges."], [24, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [24, 2, 1, 0, "spec", ""], [24, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [24, 2, 1, 0, "submit", "Submit process for execution."], [24, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [24, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [24, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [24, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [24, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [24, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [24, 2, 1, 0, "wc_specific_post_processing", "Expose outputs of the external codes."]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys": [[24, 5, 1, 0, "CALC_ID", ""], [24, 2, 1, 0, "name", "The name of the Enum member."], [24, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.decode_input_args": [[24, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.encode_input_args": [[24, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_inputs": [[24, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [24, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [24, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_outputs": [[24, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [24, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [24, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_exit_statuses": [[24, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.is_process_handler": [[24, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.kill": [[24, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.load_instance_state": [[24, 4, 2, 0, "load_context", ""], [24, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_except": [[24, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_finish": [[24, 4, 2, 0, "result", "result of the process"], [24, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_output_emitting": [[24, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [24, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_paused": [[24, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out": [[24, 4, 2, 0, "output_port", "name of output port"], [24, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out_many": [[24, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.report": [[24, 4, 2, 0, "args", "args to pass to the log call"], [24, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [24, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.save_instance_state": [[24, 4, 2, 0, "out_state", "state to save in"], [24, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.set_status": [[24, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.submit": [[24, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain": [[25, 1, 1, 0, "PDOSWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"], [25, 7, 1, 0, "StructureData", ""]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain": [[25, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [25, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [25, 2, 1, 0, "build_process_type", "The process type."], [25, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [25, 3, 1, 0, "ctx", "Get the context."], [25, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [25, 2, 1, 0, "define", "Specify inputs and outputs."], [25, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [25, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [25, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [25, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [25, 2, 1, 0, "get_builder", ""], [25, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [25, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [25, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [25, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [25, 2, 1, 0, "get_process_handlers", ""], [25, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [25, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [25, 2, 1, 0, "init", ""], [25, 2, 1, 0, "initialize_scf_parameters", ""], [25, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [25, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [25, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [25, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [25, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [25, 2, 1, 0, "load_instance_state", "Load instance state."], [25, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [25, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [25, 2, 1, 0, "on_create", "Called when a Process is created."], [25, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [25, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [25, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [25, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [25, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [25, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [25, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [25, 2, 1, 0, "on_run", ""], [25, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [25, 2, 1, 0, "on_wait", "Entering the WAITING state."], [25, 2, 1, 0, "out", "Attach output to output port."], [25, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [25, 2, 1, 0, "post_processing", ""], [25, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [25, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [25, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [25, 2, 1, 0, "run", ""], [25, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [25, 3, 1, 0, "runner", "Get process runner."], [25, 2, 1, 0, "save_instance_state", "Save instance state."], [25, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [25, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [25, 2, 1, 0, "setup_inputs", ""], [25, 2, 1, 0, "setup_wc_specific_inputs", "Derive super cell and set input parameter."], [25, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [25, 2, 1, 0, "spec", ""], [25, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [25, 2, 1, 0, "submit", "Submit process for execution."], [25, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [25, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [25, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [25, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [25, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [25, 2, 1, 0, "wc_specific_post_processing", ""]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys": [[25, 5, 1, 0, "CALC_ID", ""], [25, 2, 1, 0, "name", "The name of the Enum member."], [25, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.decode_input_args": [[25, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.encode_input_args": [[25, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_inputs": [[25, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [25, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [25, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_outputs": [[25, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [25, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [25, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_exit_statuses": [[25, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.is_process_handler": [[25, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.kill": [[25, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.load_instance_state": [[25, 4, 2, 0, "load_context", ""], [25, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_except": [[25, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_finish": [[25, 4, 2, 0, "result", "result of the process"], [25, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_output_emitting": [[25, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [25, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_paused": [[25, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out": [[25, 4, 2, 0, "output_port", "name of output port"], [25, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out_many": [[25, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.report": [[25, 4, 2, 0, "args", "args to pass to the log call"], [25, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [25, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.save_instance_state": [[25, 4, 2, 0, "out_state", "state to save in"], [25, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.set_status": [[25, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.submit": [[25, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain": [[26, 7, 1, 0, "Critic2Calculation", ""], [26, 1, 1, 0, "PlanarFieldsWorkChain", "Bases: aim2dat.aiida_workflows.cp2k.base_core_work_chain._BaseCoreWorkChain"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain": [[26, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [26, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [26, 2, 1, 0, "build_process_type", "The process type."], [26, 2, 1, 0, "check_scf_convergence", "Check if the scf-calculation is convergenced and increments the internal level of mixing parameters."], [26, 3, 1, 0, "ctx", "Get the context."], [26, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [26, 2, 1, 0, "define", "Specify inputs and outputs."], [26, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [26, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [26, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [26, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [26, 2, 1, 0, "get_builder", ""], [26, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [26, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [26, 2, 1, 0, "get_outputs", "Return a mapping of the outputs that should be attached as outputs to the work chain."], [26, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [26, 2, 1, 0, "get_process_handlers", ""], [26, 2, 1, 0, "get_process_handlers_by_priority", "Return list of process handlers where overrides from inputs.handler_overrides are taken into account."], [26, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [26, 2, 1, 0, "init", ""], [26, 2, 1, 0, "initialize_scf_parameters", ""], [26, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [26, 2, 1, 0, "inspect_process", "Analyse the results of the previous process and call the handlers when necessary."], [26, 2, 1, 0, "is_process_handler", "Return whether the given method name corresponds to a process handler of this class."], [26, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [26, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [26, 2, 1, 0, "load_instance_state", "Load instance state."], [26, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [26, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [26, 2, 1, 0, "on_create", "Called when a Process is created."], [26, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [26, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [26, 2, 1, 0, "on_exiting", "Ensure that any unstored nodes in the context are stored, before the state is exited"], [26, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [26, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [26, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [26, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [26, 2, 1, 0, "on_run", ""], [26, 2, 1, 0, "on_terminated", "Clean working directories of the calculations."], [26, 2, 1, 0, "on_wait", "Entering the WAITING state."], [26, 2, 1, 0, "out", "Attach output to output port."], [26, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [26, 2, 1, 0, "post_processing", ""], [26, 3, 1, 0, "process_class", "Return the process class to run in the loop."], [26, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [26, 2, 1, 0, "results", "Attach the outputs specified in the output specification from the last completed process."], [26, 2, 1, 0, "run", ""], [26, 2, 1, 0, "run_process", "Run the next process, taking the input dictionary from the context at self.ctx.inputs."], [26, 3, 1, 0, "runner", "Get process runner."], [26, 2, 1, 0, "save_instance_state", "Save instance state."], [26, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [26, 2, 1, 0, "setup", "Initialize context variables that are used during the logical flow of the BaseRestartWorkChain."], [26, 2, 1, 0, "setup_critic2_calculation", "Set input parameters for external post-processing codes."], [26, 2, 1, 0, "setup_inputs", ""], [26, 2, 1, 0, "setup_wc_specific_inputs", "Set input parameters to calculate partial charges."], [26, 2, 1, 0, "should_run_process", "Return whether a new process should be run."], [26, 2, 1, 0, "spec", ""], [26, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [26, 2, 1, 0, "submit", "Submit process for execution."], [26, 2, 1, 0, "switch_to_atomic_scf_guess", "Switch to atomic guess for the case that the scf-cycles do not converge."], [26, 2, 1, 0, "switch_to_broyden_mixing", "Switch to the Broyden mixing scheme in case of numerical instabilities with the Pulay mixing scheme."], [26, 2, 1, 0, "switch_to_open_shell_ks", "Turn on restricted or unrestricted open-shell Kohn-Sham equations in case of an odd number of electrons."], [26, 2, 1, 0, "to_context", "Add a dictionary of awaitables to the context."], [26, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [26, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."], [26, 2, 1, 0, "wc_specific_post_processing", "Expose outputs of the external codes."]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys": [[26, 5, 1, 0, "CALC_ID", ""], [26, 2, 1, 0, "name", "The name of the Enum member."], [26, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.decode_input_args": [[26, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.encode_input_args": [[26, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_inputs": [[26, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [26, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [26, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_outputs": [[26, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [26, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [26, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_exit_statuses": [[26, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.is_process_handler": [[26, 4, 2, 0, "process_handler_name", "string name of the instance method"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.kill": [[26, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.load_instance_state": [[26, 4, 2, 0, "load_context", ""], [26, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_except": [[26, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_finish": [[26, 4, 2, 0, "result", "result of the process"], [26, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_output_emitting": [[26, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [26, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_paused": [[26, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out": [[26, 4, 2, 0, "output_port", "name of output port"], [26, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out_many": [[26, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.report": [[26, 4, 2, 0, "args", "args to pass to the log call"], [26, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [26, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.save_instance_state": [[26, 4, 2, 0, "out_state", "state to save in"], [26, 4, 2, 0, "save_context", ""]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.set_status": [[26, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.submit": [[26, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.cp2k.surface_opt_utils": [[27, 7, 1, 0, "create_surface_slab", ""], [27, 6, 1, 0, "surfopt_setup", "Define initial parameters."], [27, 6, 1, 0, "surfopt_should_run_add_calc", "Check whether additional calculations are run after the slab size is converged."], [27, 6, 1, 0, "surfopt_should_run_slab_conv", "Check whether the convergence criteria is fulfilled and the slab size is not exceeding the maximum slab size."], [27, 6, 1, 0, "update_surf_slab", "Update surface slab."]], "aim2dat.aiida_workflows.cp2k.work_chain_specs": [[28, 7, 1, 0, "Cp2kCalculation", ""], [28, 6, 1, 0, "core_work_chain_exit_codes", "Exit codes for the CP2K core work chains."], [28, 6, 1, 0, "numerical_p_specs", "Numerical input parameters."], [28, 6, 1, 0, "seekpath_p_specs", "Input parameters for seekpath."], [28, 6, 1, 0, "structural_p_specs", "Structural input parameters."]], "aim2dat.aiida_workflows.critic2": [[29, 0, 0, 1, "calcjobs", ""], [31, 0, 0, 1, "parsers", ""]], "aim2dat.aiida_workflows.critic2.calcjobs": [[29, 1, 1, 0, "Critic2Calculation", "Bases: aiida.engine.CalcJob"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation": [[29, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [29, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [29, 2, 1, 0, "build_process_type", "The process type."], [29, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [29, 2, 1, 0, "define", "Define input/output and outline."], [29, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [29, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [29, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [29, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [29, 2, 1, 0, "get_builder", ""], [29, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [29, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [29, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [29, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [29, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [29, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [29, 2, 1, 0, "init", ""], [29, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [29, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [29, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [29, 5, 1, 0, "link_label_retrieved", ""], [29, 2, 1, 0, "load_instance_state", "Load instance state."], [29, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [29, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [29, 2, 1, 0, "on_create", "Called when a Process is created."], [29, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [29, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [29, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [29, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [29, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [29, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [29, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [29, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [29, 2, 1, 0, "out", "Attach output to output port."], [29, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [29, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [29, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [29, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [29, 2, 1, 0, "prepare_for_submission", "Prepare for submission."], [29, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [29, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [29, 2, 1, 0, "run", "Run the calculation job."], [29, 3, 1, 0, "runner", "Get process runner."], [29, 2, 1, 0, "save_instance_state", "Save instance state."], [29, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [29, 2, 1, 0, "spec", ""], [29, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [29, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [29, 2, 1, 0, "submit", "Submit process for execution."], [29, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [29, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [29, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys": [[29, 5, 1, 0, "CALC_ID", ""], [29, 2, 1, 0, "name", "The name of the Enum member."], [29, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.decode_input_args": [[29, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.encode_input_args": [[29, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_inputs": [[29, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [29, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [29, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_outputs": [[29, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [29, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [29, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_exit_statuses": [[29, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_importer": [[29, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.kill": [[29, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.load_instance_state": [[29, 4, 2, 0, "load_context", ""], [29, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_except": [[29, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_finish": [[29, 4, 2, 0, "result", "result of the process"], [29, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_output_emitting": [[29, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [29, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_paused": [[29, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out": [[29, 4, 2, 0, "output_port", "name of output port"], [29, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out_many": [[29, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse": [[29, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.presubmit": [[29, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.report": [[29, 4, 2, 0, "args", "args to pass to the log call"], [29, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [29, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.set_status": [[29, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.submit": [[29, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.terminate": [[29, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.critic2.parsers": [[31, 1, 1, 0, "Critic2Parser", "Bases: aiida.parsers.Parser"]], "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser": [[31, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [31, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [31, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [31, 3, 1, 0, "node", "Return the node instance"], [31, 2, 1, 0, "out", "Register a node as an output with the given link label."], [31, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [31, 2, 1, 0, "parse", "Receives in input a dictionary of retrieved nodes. Does all the logic here."], [31, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [31, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.out": [[31, 4, 2, 0, "link_label", "the name of the link label"], [31, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.parse_from_node": [[31, 4, 2, 0, "node", "a CalcJobNode instance"], [31, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [31, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.enumlib": [[32, 0, 0, 1, "enum_calcjob", ""], [33, 0, 0, 1, "enum_parsers", ""], [35, 0, 0, 1, "utils", ""]], "aim2dat.aiida_workflows.enumlib.enum_calcjob": [[32, 1, 1, 0, "EnumlibCalculation", "Bases: aiida.engine.CalcJob"], [32, 6, 1, 0, "validate_elements_to_enumerate", "Validate elements_to_enumerate."], [32, 6, 1, 0, "validate_inputs", "Validate the input parameters sites_to_enumerate, elements_to_emnumerate and concentration_restrictions."], [32, 6, 1, 0, "validate_makeStr_path", "Validate the absolute path of the makeStr.py executable."], [32, 6, 1, 0, "validate_sites_to_enumerate", "Validate sites_to_enumerate."], [32, 6, 1, 0, "validate_structure", "Validate the input structure. Checks that the structure has no fractional occupations and each site is only occupied once."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation": [[32, 5, 1, 0, "SINGLE_OUTPUT_LINKNAME", ""], [32, 1, 1, 0, "SaveKeys", "Bases: enum.Enum"], [32, 2, 1, 0, "build_process_type", "The process type."], [32, 2, 1, 0, "decode_input_args", "Decode saved input arguments as they came from the saved instance state Bundle"], [32, 2, 1, 0, "define", "Define input/output and outline."], [32, 2, 1, 0, "encode_input_args", "Encode input arguments such that they may be saved in a Bundle"], [32, 2, 1, 0, "exit_codes", "Return the namespace of exit codes defined for this WorkChain through its ProcessSpec."], [32, 2, 1, 0, "exposed_inputs", "Gather a dictionary of the inputs that were exposed for a given Process class under an optional namespace."], [32, 2, 1, 0, "exposed_outputs", "Return the outputs which were exposed from the process_class and emitted by the specific node"], [32, 2, 1, 0, "get_builder", ""], [32, 2, 1, 0, "get_exit_statuses", "Return the exit status (integers) for the given exit code labels."], [32, 2, 1, 0, "get_importer", "Load the CalcJobImporter associated with this CalcJob if it exists."], [32, 2, 1, 0, "get_or_create_db_record", "Create a process node that represents what happened in this process."], [32, 2, 1, 0, "get_parent_calc", "Get the parent process node"], [32, 2, 1, 0, "get_provenance_inputs_iterator", "Get provenance input iterator."], [32, 2, 1, 0, "get_state_classes", "A mapping of the State constants to the corresponding state class."], [32, 2, 1, 0, "init", ""], [32, 3, 1, 0, "inputs", "Return the inputs attribute dictionary or an empty one."], [32, 2, 1, 0, "is_valid_cache", "Check if the given node can be cached from."], [32, 2, 1, 0, "kill", "Kill the process and all the children calculations it called"], [32, 5, 1, 0, "link_label_retrieved", ""], [32, 2, 1, 0, "load_instance_state", "Load instance state."], [32, 3, 1, 0, "metadata", "Return the metadata that were specified when this process instance was launched."], [32, 3, 1, 0, "node", "Return the ProcessNode used by this process to represent itself in the database."], [32, 2, 1, 0, "on_create", "Called when a Process is created."], [32, 2, 1, 0, "on_entered", "After entering a new state, save a checkpoint and update the latest process state change timestamp."], [32, 2, 1, 0, "on_except", "Log the exception by calling the report method with formatted stack trace from exception info object and store the exception string as a node attribute"], [32, 2, 1, 0, "on_finish", "Set the finish status on the process node."], [32, 2, 1, 0, "on_output_emitting", "The process has emitted a value on the given output port."], [32, 2, 1, 0, "on_paused", "The Process was paused so set the paused attribute on the process node"], [32, 2, 1, 0, "on_playing", "The Process was unpaused so remove the paused attribute on the process node"], [32, 2, 1, 0, "on_terminated", "Cleanup the node by deleting the calulation job state."], [32, 3, 1, 0, "options", "Return the options of the metadata that were specified when this process instance was launched."], [32, 2, 1, 0, "out", "Attach output to output port."], [32, 2, 1, 0, "out_many", "Attach outputs to multiple output ports."], [32, 2, 1, 0, "parse", "Parse a retrieved job calculation."], [32, 2, 1, 0, "parse_retrieved_output", "Parse the retrieved data by calling the parser plugin if it was defined in the inputs."], [32, 2, 1, 0, "parse_scheduler_output", "Parse the output of the scheduler if that functionality has been implemented for the plugin."], [32, 2, 1, 0, "prepare_for_submission", "Create input file."], [32, 2, 1, 0, "presubmit", "Prepares the calculation folder with all inputs, ready to be copied to the cluster."], [32, 2, 1, 0, "report", "Log a message to the logger, which should get saved to the database through the attached DbLogHandler."], [32, 2, 1, 0, "run", "Run the calculation job."], [32, 3, 1, 0, "runner", "Get process runner."], [32, 2, 1, 0, "save_instance_state", "Save instance state."], [32, 2, 1, 0, "set_status", "The status of the Process is about to be changed, so we reflect this is in node's attribute proxy."], [32, 2, 1, 0, "spec", ""], [32, 2, 1, 0, "spec_metadata", "Return the metadata port namespace of the process specification of this process."], [32, 2, 1, 0, "spec_options", "Return the metadata options port namespace of the process specification of this process."], [32, 2, 1, 0, "submit", "Submit process for execution."], [32, 2, 1, 0, "terminate", "Terminate the process immediately and return the given exit code."], [32, 2, 1, 0, "update_outputs", "Attach new outputs to the node since the last call."], [32, 3, 1, 0, "uuid", "Return the UUID of the process which corresponds to the UUID of its associated ProcessNode."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys": [[32, 5, 1, 0, "CALC_ID", ""], [32, 2, 1, 0, "name", "The name of the Enum member."], [32, 2, 1, 0, "value", "The value of the Enum member."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.decode_input_args": [[32, 4, 2, 0, "encoded", "encoded (serialized) inputs"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.encode_input_args": [[32, 4, 2, 0, "inputs", "A mapping of the inputs as passed to the process"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_inputs": [[32, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for inputs. Inputs in lower-lying namespaces take precedence."], [32, 4, 2, 0, "namespace", "PortNamespace in which to look for the inputs"], [32, 4, 2, 0, "process_class", "Process class whose inputs to try and retrieve"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_outputs": [[32, 4, 2, 0, "agglomerate", "If set to true, all parent namespaces of the given namespace will also be searched for outputs. Outputs in lower-lying namespaces take precedence."], [32, 4, 2, 0, "namespace", "Namespace in which to search for exposed outputs."], [32, 4, 2, 0, "node", "process node whose outputs to try and retrieve"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_exit_statuses": [[32, 4, 2, 0, "exit_code_labels", "a list of strings that reference exit code labels of this process class"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_importer": [[32, 4, 2, 0, "entry_point_name", "optional entry point name of a CalcJobImporter to override the default."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.kill": [[32, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.load_instance_state": [[32, 4, 2, 0, "load_context", ""], [32, 4, 2, 0, "saved_state", "saved instance state"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_except": [[32, 4, 2, 0, "exc_info", "the sys.exc_info() object (type, value, traceback)"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_finish": [[32, 4, 2, 0, "result", "result of the process"], [32, 4, 2, 0, "successful", "whether execution was successful"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_output_emitting": [[32, 4, 2, 0, "output_port", "The output port name the value was emitted on"], [32, 4, 2, 0, "value", "The value emitted"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_paused": [[32, 4, 2, 0, "msg", "message"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out": [[32, 4, 2, 0, "output_port", "name of output port"], [32, 4, 2, 0, "value", "value to put inside output port"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out_many": [[32, 4, 2, 0, "out_dict", "output dictionary"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse": [[32, 4, 2, 0, "retrieved_temporary_folder", "The path to the temporary folder"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.presubmit": [[32, 4, 2, 0, "folder", "a SandboxFolder that can be used to write calculation input files and the scheduling script."]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.report": [[32, 4, 2, 0, "args", "args to pass to the log call"], [32, 4, 2, 0, "kwargs", "kwargs to pass to the log call"], [32, 4, 2, 0, "msg", "message to log"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.set_status": [[32, 4, 2, 0, "status", "the status message"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.submit": [[32, 4, 2, 0, "process", "process"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.terminate": [[32, 4, 2, 0, "exit_code", "The exit code to return."]], "aim2dat.aiida_workflows.enumlib.enum_parsers": [[33, 1, 1, 0, "EnumlibParser", "Bases: aiida.parsers.Parser"]], "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser": [[33, 3, 1, 0, "exit_codes", "Return the exit codes defined for the process class of the node being parsed."], [33, 2, 1, 0, "get_outputs_for_parsing", "Return the dictionary of nodes that should be passed to the Parser.parse call."], [33, 3, 1, 0, "logger", "Return the logger preconfigured for the calculation node associated with this parser instance."], [33, 3, 1, 0, "node", "Return the node instance"], [33, 2, 1, 0, "out", "Register a node as an output with the given link label."], [33, 3, 1, 0, "outputs", "Return the dictionary of outputs that have been registered."], [33, 2, 1, 0, "parse", "Parse the retrieved POSCAR files to StrucureData-Nodes."], [33, 2, 1, 0, "parse_from_node", "Parse the outputs directly from the CalcJobNode."], [33, 3, 1, 0, "retrieved", ""]], "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.out": [[33, 4, 2, 0, "link_label", "the name of the link label"], [33, 4, 2, 0, "node", "the node to register as an output"]], "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.parse_from_node": [[33, 4, 2, 0, "node", "a CalcJobNode instance"], [33, 4, 2, 0, "retrieved_temporary_folder", "absolute path to folder with contents of retrieved_temporary_list"], [33, 4, 2, 0, "store_provenance", "bool, if True will store the parsing as a CalcFunctionNode in the provenance"]], "aim2dat.aiida_workflows.enumlib.utils": [[35, 6, 1, 0, "check_kinds", "Check whether all kinds can be processed."], [35, 6, 1, 0, "get_kindnames", "Get kind names from structure."]], "aim2dat.aiida_workflows.utils": [[37, 6, 1, 0, "concatenate_workflow_results", "Concatenate two results pandas data frames."], [37, 6, 1, 0, "create_aiida_node", "Create AiiDA data node from standard python variable."], [37, 6, 1, 0, "create_surface_slab", "Create surface slab from surface data."], [37, 6, 1, 0, "get_results_cp2k_legacy_wc", "Get results from the depreciated ElectronicProperties work chain."], [37, 6, 1, 0, "obtain_value_from_aiida_node", "Obtain value from AiiDA data node."], [37, 6, 1, 0, "seekpath_structure_analysis", "Wrap the seekpath function to be used as a calcfunction."], [37, 6, 1, 0, "workflow_queue", "Helper-function to control the number of workchains run simultaneously. The function is called in a loop after the workchain has been submitted."]], "aim2dat.aiida_workflows.workflow_builder": [[38, 7, 1, 0, "AiidaCode", ""], [38, 1, 1, 0, "MultipleWorkflowBuilder", "Bases: _BaseWorkflowBuilder"], [38, 1, 1, 0, "WorkflowBuilder", "Bases: _BaseWorkflowBuilder"], [38, 8, 1, 0, "WorkflowProtocolError", "Bases: Exception"]], "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder": [[38, 2, 1, 0, "add_parent_node", "Add new parent node."], [38, 2, 1, 0, "add_to_task_queue", "Add a task to the task queue."], [38, 2, 1, 0, "adopt_input_nodes_from_workflow", "Import input parameters for the workflow based on another parent node."], [38, 3, 1, 0, "aiida_group", "Only consider processes in the AiiDA group."], [38, 2, 1, 0, "execute_task_queue", "Execute a series of AiiDA processes for several tasks consecutively for all parent nodes as defined in the task_queue attribute."], [38, 2, 1, 0, "from_file", ""], [38, 2, 1, 0, "generate_inputs", "Generate a dictionary or builder for a certain task of the workflow for a specific parent node."], [38, 2, 1, 0, "generate_provenance_graph", "Generate provenance graph of the workflow."], [38, 3, 1, 0, "graph_attributes", "Graphiz graph attributes for the provenance graph."], [38, 2, 1, 0, "import_parent_nodes_from_aiida_db", "Import parent nodes from the AiiDA database."], [38, 2, 1, 0, "import_parent_nodes_from_pandas_df", "Extract parent nodes from a pandas data frame. The data frame needs to have a column called 'aiida_uuid' with the universally unique identifier (uuid) of the nodes."], [38, 3, 1, 0, "protocol", "Protocol used for the workflow."], [38, 2, 1, 0, "reset_task_queue", "Reset the task queue."], [38, 2, 1, 0, "return_process_nodes", "Return a pandas data frame containing the process nodes of all completed tasks."], [38, 2, 1, 0, "return_results", "Return a pandas data frame containing the calculated results of all completed tasks."], [38, 2, 1, 0, "return_runtimes", "Return a pandas data frame containing the runtimes of all completed tasks."], [38, 2, 1, 0, "return_workflow_states", "Return a pandas data frame containing the current state of  workflow."], [38, 2, 1, 0, "run_task", "Run the AiiDA processes of the task for all parent nodes."], [38, 2, 1, 0, "set_user_input", "Set a user input parameter of the workflow for all parent nodes."], [38, 2, 1, 0, "submit_task", "Submit the AiiDA processes of the task for all parent nodes."], [38, 3, 1, 0, "task_queue", "Return the task queue."], [38, 3, 1, 0, "tasks", "Return all tasks of the workflow."], [38, 2, 1, 0, "to_file", ""], [38, 3, 1, 0, "use_uuid", "Whether to use the uuid (str) to represent AiiDA nodes instead of the primary key (int)."], [38, 3, 1, 0, "user_input", "Input parameters set by the user."]], "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder": [[38, 2, 1, 0, "adopt_input_nodes_from_workflow", "Import input parameters for the workflow based on another parent node."], [38, 3, 1, 0, "aiida_group", "Only consider processes in the AiiDA group."], [38, 3, 1, 0, "completed_tasks", "Completed tasks."], [38, 2, 1, 0, "determine_workflow_state", "Determine which tasks of the workflow have been completed and which ones can be started next."], [38, 3, 1, 0, "failed_tasks", "Failed tasks."], [38, 2, 1, 0, "from_file", ""], [38, 2, 1, 0, "generate_inputs", "Generate a builder for an AiiDA work chain or calculation job."], [38, 2, 1, 0, "generate_provenance_graph", "Generate provenance graph of the workflow."], [38, 3, 1, 0, "parent_node", "Parent AiiDA node."], [38, 3, 1, 0, "protocol", "Protocol used for the workflow."], [38, 3, 1, 0, "results", "Results of the workflow."], [38, 2, 1, 0, "run_task", "Run the underlying AiiDA process of the task."], [38, 3, 1, 0, "running_tasks", "Tasks which have not yet finished."], [38, 2, 1, 0, "set_user_input", "Set user input parameters of the workflow."], [38, 2, 1, 0, "submit_task", "Submit the underlying AiiDA process of the task."], [38, 3, 1, 0, "tasks", "Return all tasks of the workflow."], [38, 2, 1, 0, "to_file", ""], [38, 3, 1, 0, "use_uuid", "Whether to use the uuid (str) to represent AiiDA nodes instead of the primary key (int)."], [38, 3, 1, 0, "user_input", "Input parameters set by the user."]], "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError": [[38, 1, 1, 0, "args", ""], [38, 2, 1, 0, "with_traceback", "Exception.with_traceback(tb) -- set self.__traceback__ to tb and return self."]], "aim2dat.ext_interfaces": [[39, 0, 0, 1, "aiida", ""], [40, 0, 0, 1, "ase_atoms", ""], [41, 0, 0, 1, "ase_surface", ""], [42, 0, 0, 1, "dscribe", ""], [43, 0, 0, 1, "graphs", ""], [44, 0, 0, 1, "hdf5", ""], [45, 0, 0, 1, "import_opt_dependencies", ""], [47, 0, 0, 1, "mp", ""], [48, 0, 0, 1, "mp_openapi", ""], [49, 0, 0, 1, "optimade", ""], [50, 0, 0, 1, "oqmd", ""], [51, 0, 0, 1, "pandas", ""], [52, 0, 0, 1, "phonopy", ""], [53, 0, 0, 1, "pymatgen", ""], [54, 0, 0, 1, "pyxtal", ""], [55, 0, 0, 1, "seekpath", ""], [56, 0, 0, 1, "spglib", ""]], "aim2dat.ext_interfaces.dscribe": [[42, 6, 1, 0, "calc_acsf_descriptor", "Calculate ACSF descriptor."], [42, 6, 1, 0, "calc_interaction_matrix", "Calcualte interaction matrix."], [42, 6, 1, 0, "calc_mbtr_descriptor", "Calculate MBTR descriptor."], [42, 6, 1, 0, "calc_soap_descriptor", "Calculate SOAP descriptor."], [42, 6, 1, 0, "return_descriptor", "Return output from SOAP, MBTR or ACSF descriptor."]], "aim2dat.ext_interfaces.pyxtal": [[54, 7, 1, 0, "NR_OF_SPACE_GROUPS", ""], [54, 7, 1, 0, "SPACE_GROUP_LIMITS", ""]], "aim2dat.ext_interfaces.spglib": [[56, 7, 1, 0, "CENTROSYMMETRIC_PG", ""]], "aim2dat.fct": [[61, 1, 1, 0, "DiscretizedAxis", "Class to create an axis to discretize a 1d function i.e. a 2d plot in a grid. Different methods for the discretization are available."], [61, 1, 1, 0, "DiscretizedGrid", "Class to create a grid to discretize a 1d function i.e. a 2d plot."], [61, 1, 1, 0, "FunctionAnalysis", "Class to analyze and compare functions."], [61, 1, 1, 0, "FunctionDiscretizationFingerprint", "Fingerprint for functions based on the DOS-Fingerprint presented in doi:10.1038/s41597-022-01754-z."], [57, 0, 0, 1, "discretization", ""], [58, 0, 0, 1, "fingerprint", ""], [59, 0, 0, 1, "function_comparison", ""], [60, 0, 0, 1, "hull", ""], [62, 0, 0, 1, "smearing", ""]], "aim2dat.fct.DiscretizedAxis": [[61, 3, 1, 0, "T", "x --> y or y --> x."], [61, 3, 1, 0, "axis", "Axis array. Contains the discrete values."], [61, 3, 1, 0, "axis_type", "Specify whether this axis should be used as x or y axis in a grid."], [61, 3, 1, 0, "discretization_method", "Discretize the specified range. Can be chosen via a string, accepting the methods specified in _available_discretization_methods or by passing a callable function."], [61, 2, 1, 0, "discretize_axis", "Perform the discretization of the specified range."], [61, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [61, 3, 1, 0, "shape", "Tuple specifying the dimensions of the axis (like numpy)."], [61, 2, 1, 0, "transpose", "Change the axis_type: x --> y or y --> x."]], "aim2dat.fct.DiscretizedGrid": [[61, 2, 1, 0, "create_grid", "Create the internal grid which is based on a list of lists. Each list contains the energy-value (x) as the first argument and the DOS-values (y) as a list in the second argument."], [61, 3, 1, 0, "grid", "Return the internal grid as a list of lists."], [61, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [61, 2, 1, 0, "plot_grid", "Plot the grid."]], "aim2dat.fct.FunctionAnalysis": [[61, 3, 1, 0, "allowed_distance_methods", "Return allowed distance methods."], [61, 2, 1, 0, "calculate_correlation", "Calculate the pearson-correlation between the values of two functions."], [61, 2, 1, 0, "calculate_discrete_fingerprint", "Calculate a discretized fingerprint of a function (doi:10.1038/s41597-022-01754-z)."], [61, 2, 1, 0, "calculate_distance", "Calculate the distance between the values of two functions."], [61, 2, 1, 0, "compare_areas", "Compare the enclosed areas of two functions."], [61, 2, 1, 0, "compare_functions_by_discrete_fingerprint", "Compare two functions based on a discretized fingerprint (doi:10.1038/s41597-022-01754-z)."], [61, 2, 1, 0, "import_data", "Import data into the internal memory."]], "aim2dat.fct.FunctionDiscretizationFingerprint": [[61, 2, 1, 0, "calculate_fingerprint", "Calculate the fingerprint."], [61, 2, 1, 0, "compare_fingerprints", "Compare two fingerprints that are stored in the internal memory."], [61, 2, 1, 0, "plot_fingerprint", "Plot the discretized function and the corresponding grid."]], "aim2dat.fct.discretization": [[57, 1, 1, 0, "DiscretizedAxis", "Class to create an axis to discretize a 1d function i.e. a 2d plot in a grid. Different methods for the discretization are available."], [57, 1, 1, 0, "DiscretizedGrid", "Class to create a grid to discretize a 1d function i.e. a 2d plot."], [57, 6, 1, 0, "limit_array", "Limit an array to a given minimum and maximum value."]], "aim2dat.fct.discretization.DiscretizedAxis": [[57, 3, 1, 0, "T", "x --> y or y --> x."], [57, 3, 1, 0, "axis", "Axis array. Contains the discrete values."], [57, 3, 1, 0, "axis_type", "Specify whether this axis should be used as x or y axis in a grid."], [57, 3, 1, 0, "discretization_method", "Discretize the specified range. Can be chosen via a string, accepting the methods specified in _available_discretization_methods or by passing a callable function."], [57, 2, 1, 0, "discretize_axis", "Perform the discretization of the specified range."], [57, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [57, 3, 1, 0, "shape", "Tuple specifying the dimensions of the axis (like numpy)."], [57, 2, 1, 0, "transpose", "Change the axis_type: x --> y or y --> x."]], "aim2dat.fct.discretization.DiscretizedGrid": [[57, 2, 1, 0, "create_grid", "Create the internal grid which is based on a list of lists. Each list contains the energy-value (x) as the first argument and the DOS-values (y) as a list in the second argument."], [57, 3, 1, 0, "grid", "Return the internal grid as a list of lists."], [57, 3, 1, 0, "is_empty", "Check whether the axis is empty."], [57, 2, 1, 0, "plot_grid", "Plot the grid."]], "aim2dat.fct.fingerprint": [[58, 1, 1, 0, "FunctionDiscretizationFingerprint", "Fingerprint for functions based on the DOS-Fingerprint presented in doi:10.1038/s41597-022-01754-z."]], "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint": [[58, 2, 1, 0, "calculate_fingerprint", "Calculate the fingerprint."], [58, 2, 1, 0, "compare_fingerprints", "Compare two fingerprints that are stored in the internal memory."], [58, 2, 1, 0, "plot_fingerprint", "Plot the discretized function and the corresponding grid."]], "aim2dat.fct.function_comparison": [[59, 1, 1, 0, "FunctionAnalysis", "Class to analyze and compare functions."]], "aim2dat.fct.function_comparison.FunctionAnalysis": [[59, 3, 1, 0, "allowed_distance_methods", "Return allowed distance methods."], [59, 2, 1, 0, "calculate_correlation", "Calculate the pearson-correlation between the values of two functions."], [59, 2, 1, 0, "calculate_discrete_fingerprint", "Calculate a discretized fingerprint of a function (doi:10.1038/s41597-022-01754-z)."], [59, 2, 1, 0, "calculate_distance", "Calculate the distance between the values of two functions."], [59, 2, 1, 0, "compare_areas", "Compare the enclosed areas of two functions."], [59, 2, 1, 0, "compare_functions_by_discrete_fingerprint", "Compare two functions based on a discretized fingerprint (doi:10.1038/s41597-022-01754-z)."], [59, 2, 1, 0, "import_data", "Import data into the internal memory."]], "aim2dat.fct.hull": [[60, 6, 1, 0, "get_convex_hull", "Get convex hull from a list of n-dimensional points using scipy."], [60, 6, 1, 0, "get_minimum_maximum_points", "Get minimum and maximum values for each x-value."]], "aim2dat.fct.smearing": [[62, 7, 1, 0, "AVAILABLE_SMEARING_METHODS", ""], [62, 6, 1, 0, "apply_smearing", "Apply smearing to a dataset. Different smearing methods can be specified."]], "aim2dat.io": [[64, 0, 0, 1, "cif", ""], [66, 0, 0, 1, "cp2k", ""], [69, 0, 0, 1, "critic2", ""], [70, 0, 0, 1, "fhi_aims", ""], [72, 0, 0, 1, "phonopy", ""], [73, 0, 0, 1, "qe", ""], [74, 0, 0, 1, "utils", ""], [75, 0, 0, 1, "xmgrace", ""], [76, 0, 0, 1, "yaml", ""], [77, 0, 0, 1, "zeo", ""]], "aim2dat.io.cif": [[64, 6, 1, 0, "read_file", "Read cif file."]], "aim2dat.io.cp2k": [[65, 0, 0, 1, "bands_dos", ""], [66, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of states from CP2K."], [66, 6, 1, 0, "read_band_structure", "Read band structure file from CP2K."], [66, 6, 1, 0, "read_optimized_structure", "Read optimized structures from 'restart'-files."], [66, 6, 1, 0, "read_restart_structure", "Read structures from 'restart'-files."], [66, 6, 1, 0, "read_stdout", "Read standard output file of CP2K."], [67, 0, 0, 1, "restart", ""], [68, 0, 0, 1, "stdout", ""]], "aim2dat.io.cp2k.bands_dos": [[65, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of states from CP2K."], [65, 6, 1, 0, "read_band_structure", "Read band structure file from CP2K."]], "aim2dat.io.cp2k.restart": [[67, 6, 1, 0, "read_optimized_structure", "Read optimized structures from 'restart'-files."], [67, 6, 1, 0, "read_restart_structure", "Read structures from 'restart'-files."]], "aim2dat.io.cp2k.stdout": [[68, 6, 1, 0, "read_stdout", "Read standard output file of CP2K."]], "aim2dat.io.critic2": [[69, 6, 1, 0, "read_plane", "Read output plane file."], [69, 6, 1, 0, "read_stdout", "Read standard output file."]], "aim2dat.io.fhi_aims": [[70, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of states from FHI-aims."], [70, 6, 1, 0, "read_band_structure", "Read band structure files from FHI-aims. Spin-polarized calculations are not yet supported."], [70, 6, 1, 0, "read_total_density_of_states", "Read the total density of states from FHI-aims."]], "aim2dat.io.phonopy": [[72, 6, 1, 0, "read_atom_proj_density_of_states", "Read the atom projected density of phonon states from phonopy."], [72, 6, 1, 0, "read_band_structure", "Read band structure using phonopy."], [72, 6, 1, 0, "read_qha_properties", "Read the outputs from a quasi-harmonic approximation calculation."], [72, 6, 1, 0, "read_thermal_properties", "Read the thermal properties from phonopy."], [72, 6, 1, 0, "read_total_density_of_states", "Read the total density of phonon states from phonopy."]], "aim2dat.io.qe": [[73, 6, 1, 0, "read_atom_proj_density_of_states", "Read the projected density of states from Quantum ESPRESSO."], [73, 6, 1, 0, "read_band_structure", "Read band structure file from Quantum ESPRESSO. Spin-polarized calculations are not yet supported."], [73, 6, 1, 0, "read_input_structure", "Read structure from the Quantum ESPRESSO input file. ibrav parameters are not yet fully supported."], [73, 6, 1, 0, "read_total_density_of_states", "Read the total density of states from Quantum ESPRESSO."]], "aim2dat.io.utils": [[74, 6, 1, 0, "custom_open", "Open files by distinguishing custom file classes (such as AiiDA's SingleFileData) with an open function."], [74, 6, 1, 0, "read_multiple", "Add support for a list of multiple files or folder paths (decorator)."], [74, 6, 1, 0, "read_structure", "Decorate functions that parse structure(s)."]], "aim2dat.io.xmgrace": [[75, 6, 1, 0, "read_band_structure", "Read xmgrace band structure file."], [75, 6, 1, 0, "read_xmgrace_file", "Read xmgrace plot filies."]], "aim2dat.io.yaml": [[76, 6, 1, 0, "load_yaml_file", "Load a yaml-file and returns the content."], [76, 6, 1, 0, "store_in_yaml_file", "Load a yaml-file and returns the content."]], "aim2dat.io.zeo": [[77, 6, 1, 0, "write_to_file", "Write structure to file."]], "aim2dat.ml": [[78, 0, 0, 1, "cell_grid_search", ""], [80, 0, 0, 1, "kernels", ""], [81, 0, 0, 1, "metrics", ""], [82, 0, 0, 1, "transformers", ""], [83, 0, 0, 1, "utils", ""]], "aim2dat.ml.cell_grid_search": [[78, 1, 1, 0, "CellGridSearch", "Class to fit the cell parameters of an initial structure to a final structure using a brute-force grid search approach. The space group is maintained during the fitting process."]], "aim2dat.ml.cell_grid_search.CellGridSearch.__init__": [[78, 4, 2, 0, "angle_scaling_factors", "Scaling factors for the cell angles."], [78, 4, 2, 0, "angle_tolerance", "Tolerance parameter for spglib."], [78, 4, 2, 0, "ffprint_delta_bin", "Bin size to descritize the function."], [78, 4, 2, 0, "ffprint_distinguish_kinds", "Whether different kinds should be distinguished e.g. Ni0 and Ni1 would be considered as different elements if True."], [78, 4, 2, 0, "ffprint_r_max", "Cut-off value for the maximum distance between two atoms."], [78, 4, 2, 0, "ffprint_sigma", "Smearing parameter for the Gaussian function."], [78, 4, 2, 0, "ffprint_use_weights", "Whether to use importance weights for the element pairs."], [78, 4, 2, 0, "hall_number", "The argument to constrain the space-group-type search only for the Hall symbol corresponding to it."], [78, 4, 2, 0, "length_scaling_factors", "Scaling factors for the cell lengths."], [78, 4, 2, 0, "symprec", "Tolerance for spglib and length and angle comparison."], [78, 4, 2, 0, "target_value", "Target value used to calculate score if a model is set via the set_model function."]], "aim2dat.ml.cell_grid_search.CellGridSearch": [[78, 2, 1, 0, "fit", "Fit the initial to the final structure by varying the cell parameters."], [78, 2, 1, 0, "get_optimized_structure", "Get optimized structure with the lowest score."], [78, 2, 1, 0, "return_initial_score", "Return score of the initial structure."], [78, 2, 1, 0, "return_search_space", "Return list of parameter sets that are varied to fit the initial to the final structure."], [78, 2, 1, 0, "set_initial_structure", "Set initial crystal structure."], [78, 2, 1, 0, "set_model", "Set scikit-learn model to predict the target value."], [78, 2, 1, 0, "set_target_structure", "Set target crystal structure."]], "aim2dat.ml.kernels": [[80, 6, 1, 0, "krr_ffprint_cosine", "Cosine kernel for the F-Fingerprint Transformer based on the cosine distance metric (doi:10.1063/1.3079326)."], [80, 6, 1, 0, "krr_ffprint_laplace", "Laplacian kernel for the F-Fingerprint Transformer based on the cosine distance metric (doi:10.1063/1.3079326)."]], "aim2dat.ml.metrics": [[81, 6, 1, 0, "ffprint_cosine", "Cosine distance between two F-Fingerprints  as defined in: doi:10.1063/1.3079326."]], "aim2dat.ml.transformers": [[82, 1, 1, 0, "StructureACSFTransformer", "Bases: _BaseDscribeTransformer"], [82, 1, 1, 0, "StructureChemOrderTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructureCompositionTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructureCoordinationTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructureDensityTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructureFFPrintTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructureMBTRTransformer", "Bases: _BaseDscribeTransformer"], [82, 1, 1, 0, "StructureMatrixTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructurePRDFTransformer", "Bases: _BaseStructureTransformer"], [82, 1, 1, 0, "StructureSOAPTransformer", "Bases: _BaseDscribeTransformer"]], "aim2dat.ml.transformers.StructureACSFTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [82, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [82, 4, 2, 0, "elements", "List of atomic numbers or chemical symbols."], [82, 4, 2, 0, "g2_params", "List of pairs of eta and R_s values for the G^2 functions."], [82, 4, 2, 0, "g3_params", "List of kappa values for the G^3 functions."], [82, 4, 2, 0, "g4_params", "List of triplets of eta, zeta and lambda values for G^4 functions."], [82, 4, 2, 0, "g5_params", "List of triplets of eta, zeta and lambda values for G^5 functions."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "periodic", "Whether to consider periodic boundary conditions."], [82, 4, 2, 0, "r_cut", "Cutoff value."], [82, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense array."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureACSFTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureChemOrderTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "max_shells", "Number of neighbour shells that are evaluated."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureChemOrderTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureCompositionTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "distinguish_kinds", "Whether to use kinds instead of elements."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureCompositionTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureCoordinationTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "econ_conv_threshold", "Convergence threshold for the econ method."], [82, 4, 2, 0, "econ_tolerance", "Tolerance parameter for the econ method."], [82, 4, 2, 0, "feature_types", "Tuple of features that are extracted. Supported options are: 'nrs_avg', 'nrs_stdev', 'nrs_max', 'nrs_min', 'distance_avg', 'distance_stdev', 'distance_max' and 'distance_min'."], [82, 4, 2, 0, "method", "Method used to calculate the coordination environment. The default value is 'minimum_distance'."], [82, 4, 2, 0, "min_dist_delta", "Tolerance parameter that defines the relative distance from the nearest neighbour atom for the 'minimum_distance' method."], [82, 4, 2, 0, "n_nearest_neighbours", "Number of neighbours that are considered coordinated for the 'n_neighbours' method."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureCoordinationTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 3, 1, 0, "feature_types", "Feature types that are included."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureDensityTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "distinguish_kinds", "Whether to use kinds instead of elements."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureDensityTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureFFPrintTransformer.__init__": [[82, 4, 2, 0, "add_header", "Add leading entries that describe the weights and composition for the ffprint kernels."], [82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "delta_bin", "Bin size to descritize the function in angstrom."], [82, 4, 2, 0, "distinguish_kinds", "Whether different kinds should be distinguished e.g. Ni0 and Ni1 would be considered as different elements if True."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [82, 4, 2, 0, "sigma", "Smearing parameter for the Gaussian function."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureFFPrintTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureMBTRTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [82, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [82, 4, 2, 0, "elements", "List of atomic numbers or chemical symbols."], [82, 4, 2, 0, "geometry", "Setup the geometry function."], [82, 4, 2, 0, "grid", "Setup the discretization grid."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "normalization", "Method for normalizing. Supported options are 'none', 'l2', 'n_atoms', 'valle_oganov'."], [82, 4, 2, 0, "normalize_gaussians", "Whether to normalize the gaussians to an area of 1."], [82, 4, 2, 0, "periodic", "Whether to consider periodic boundary conditions."], [82, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense array."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."], [82, 4, 2, 0, "weighting", "Setup the weighting function and its parameters."]], "aim2dat.ml.transformers.StructureMBTRTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureMatrixTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [82, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [82, 4, 2, 0, "ewald_a", "Parameter controlling the width of the Gaussian functions."], [82, 4, 2, 0, "ewald_accuracy", "Accuracy threshold for the Ewald sum."], [82, 4, 2, 0, "ewald_g_cut", "Reciprocal space cutoff parameter."], [82, 4, 2, 0, "ewald_r_cut", "Real space cutoff parameter."], [82, 4, 2, 0, "ewald_w", "Weight parameter."], [82, 4, 2, 0, "matrix_type", "Matrix type. Supported options are 'coulomb', 'ewald_sum' or 'sine'."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "permutation", "Defines the output format. Options are: 'none', 'sorted_l2', 'eigenspectrum' or 'random'."], [82, 4, 2, 0, "seed", "Seed for the random numbers in case 'random' is chosen for the permutation attibute."], [82, 4, 2, 0, "sigma", "Standar deviation of the Gaussian distributed noise when using 'random' for permutation."], [82, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense 1D array."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructureMatrixTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructurePRDFTransformer.__init__": [[82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "delta_bin", "Bin size to descritize the function in angstrom."], [82, 4, 2, 0, "distinguish_kinds", "Whether different kinds should be distinguished e.g. Ni0 and Ni1 would be considered as different elements if True."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "r_max", "Cut-off value for the maximum distance between two atoms in angstrom."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."]], "aim2dat.ml.transformers.StructurePRDFTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.transformers.StructureSOAPTransformer.__init__": [[82, 4, 2, 0, "average", "The averaging mode over the centers of interest. Supported options are: 'off', 'inner' or 'outer'."], [82, 4, 2, 0, "chunksize", "Number of structures handed to each process at once."], [82, 4, 2, 0, "compression", "Feature compression options."], [82, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [82, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [82, 4, 2, 0, "elements", "List of atomic numbers or chemical symbols."], [82, 4, 2, 0, "l_max", "The maximum degree of spherical harmonics."], [82, 4, 2, 0, "n_max", "The number of radial basis functions."], [82, 4, 2, 0, "n_procs", "Number of parallel processes."], [82, 4, 2, 0, "periodic", "Whether to consider periodic boundary conditions."], [82, 4, 2, 0, "r_cut", "Cutoff value."], [82, 4, 2, 0, "rbf", "The radial basis functions to use. Supported options are: 'gto' or 'polynomial'."], [82, 4, 2, 0, "sigma", "The standard deviation of the gaussians."], [82, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense array."], [82, 4, 2, 0, "verbose", "Whether to print a progress bar."], [82, 4, 2, 0, "weighting", "Contains the options which control the weighting of the atomic density."]], "aim2dat.ml.transformers.StructureSOAPTransformer": [[82, 2, 1, 0, "add_precomputed_properties", "Add precomputed properties."], [82, 2, 1, 0, "clear_precomputed_properties", "Clear all precomputed properties."], [82, 2, 1, 0, "fit", "Fit function that determines the number of features."], [82, 2, 1, 0, "fit_transform", "Fit to data, then transform it."], [82, 2, 1, 0, "get_feature_names_out", "Get feature names."], [82, 2, 1, 0, "get_metadata_routing", "Get metadata routing of this object."], [82, 2, 1, 0, "get_params", "Get parameters for this estimator."], [82, 2, 1, 0, "precompute_parameter_space", "Precompute and store structural properties to be reused later e.g. for a grid search."], [82, 3, 1, 0, "precomputed_properties", "Precomputed properties given as list of tuples consisting of input parameters and StructureOperations object."], [82, 2, 1, 0, "set_output", "Set output container."], [82, 2, 1, 0, "set_params", "Set the parameters of this estimator."], [82, 2, 1, 0, "transform", "Transform structures to features."]], "aim2dat.ml.utils": [[83, 6, 1, 0, "train_test_split_crystals", "Split dataset of crystals into a training and test dataset. The target attribute and/or the composition can be strafied based on binning."]], "aim2dat.plots": [[85, 6, 1, 0, "BandStructure", "Depreciated band structure class."], [85, 1, 1, 0, "BandStructureDOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure, aim2dat.plots.base_dos._BaseDensityOfStates"], [85, 6, 1, 0, "BandStructureDensityOfStates", "Depreciated band structure DOS class."], [85, 1, 1, 0, "BandStructurePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure"], [85, 1, 1, 0, "DOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_dos._BaseDensityOfStates"], [85, 6, 1, 0, "DensityOfStates", "Depreciated DOS class."], [85, 1, 1, 0, "PartialChargesPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [85, 1, 1, 0, "PartialRDFPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [85, 6, 1, 0, "PhaseDiagram", "Depreciated PhaseDiagram class."], [85, 1, 1, 0, "PhasePlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [85, 1, 1, 0, "PlanarFieldPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [85, 1, 1, 0, "SimplePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin"], [85, 6, 1, 0, "Spectrum", "Depreciated Spectrum class."], [85, 1, 1, 0, "SpectrumPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_mixin._PeakDetectionMixin, aim2dat.plots.base_mixin._SmearingMixin"], [85, 1, 1, 0, "SurfacePlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [84, 0, 0, 1, "band_structure_dos", ""], [86, 0, 0, 1, "partial_charges", ""], [87, 0, 0, 1, "partial_rdf", ""], [88, 0, 0, 1, "phase", ""], [89, 0, 0, 1, "planar_fields", ""], [90, 0, 0, 1, "simple_plot", ""], [91, 0, 0, 1, "spectroscopy", ""], [92, 0, 0, 1, "surface", ""], [93, 0, 0, 1, "thermal_properties", ""]], "aim2dat.plots.BandStructureDOSPlot.__init__": [[85, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [85, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [85, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.BandStructureDOSPlot": [[85, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [85, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [85, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [85, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_band_structure", "Import a data set."], [85, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [85, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [85, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [85, 2, 1, 0, "import_total_dos", "Import total density of states."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "set_reference_cell", "Set reference cell."], [85, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [85, 2, 1, 0, "shift_bands_and_dos", "Shift band structure and density of states."], [85, 2, 1, 0, "shift_bands_and_dos_to_vbm", "Shift the bands and the density of states such that the VBM is zero."], [85, 2, 1, 0, "shift_dos", "Shift density of states."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [85, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [85, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.BandStructurePlot": [[85, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [85, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [85, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [85, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_band_structure", "Import a data set."], [85, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "set_reference_cell", "Set reference cell."], [85, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.DOSPlot.__init__": [[85, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [85, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [85, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.DOSPlot": [[85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [85, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [85, 2, 1, 0, "import_total_dos", "Import total density of states."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "shift_dos", "Shift density of states."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [85, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [85, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PartialChargesPlot": [[85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_from_aiida_list", "Import partial charges."], [85, 2, 1, 0, "import_partial_charges", "Import partial charges."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "pc_plot_order", "List of plot assignments to order the plotted data."], [85, 3, 1, 0, "pc_plot_type", "plot type of the partial charge data sets, supported options are 'scatter', 'bar'."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PartialRDFPlot": [[85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_ffingerprint", "Import F-Fingerprint functions."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "x_unit", "Set unit of the x coordinate."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PhasePlot.__init__": [[85, 4, 2, 0, "show_convex_hull", "Whether to calculate and show the convex hull in the plot."]], "aim2dat.plots.PhasePlot": [[85, 2, 1, 0, "add_data_point", "Add datapoint to the dataset."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "elements", "List of elements that are included in the plot. If set to None all elements are included."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_from_pandas_df", "Import data from pandas data frame."], [85, 2, 1, 0, "import_from_structure_collection", "Import data from a StructureCollection object."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "plot_type", "'formation_energy', 'stability', 'band_gap', 'direct_band_gap' and 'numbers'."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_crystal_system", "Show crystal system of the phases."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "top_labels", "Chemical formulas that are shown as labels in the plot."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.PlanarFieldPlot": [[85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 3, 1, 0, "coordinates_unit", "Set unit of the two coordinates."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_field", "Import field."], [85, 2, 1, 0, "import_from_aiida_arraydata", "Import from aiida array data."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "norm", "Set norm of the z-values for matplotlib."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "plot_type", "Set plot-type."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "values_unit", "Set unit of the z-values."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.SimplePlot": [[85, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_bar_data_set", "Import data set for a bar plot."], [85, 2, 1, 0, "import_scatter_data_set", "Import data set for a scatter plot."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.SpectrumPlot.__init__": [[85, 4, 2, 0, "detect_peaks", "Whether to detect peaks of the spectra."], [85, 4, 2, 0, "plot_original_spectra", "Whether to plot the original spectra (in addition to the broadened spectra)."], [85, 4, 2, 0, "plot_unit_x", "Unit of the x-values. Imported spectra are transformed to the corresponding unit if the unit of the imported data set is given."], [85, 4, 2, 0, "smooth_spectra", "Whether to broaden the spectra."]], "aim2dat.plots.SpectrumPlot": [[85, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_spectrum", "Import spectrum."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 3, 1, 0, "peak_color", ""], [85, 3, 1, 0, "peak_distance", ""], [85, 3, 1, 0, "peak_height", ""], [85, 3, 1, 0, "peak_line_style", ""], [85, 3, 1, 0, "peak_max_factor", ""], [85, 3, 1, 0, "peak_plateau_size", ""], [85, 3, 1, 0, "peak_prominence", ""], [85, 3, 1, 0, "peak_rel_height", ""], [85, 3, 1, 0, "peak_threshold", ""], [85, 3, 1, 0, "peak_width", ""], [85, 3, 1, 0, "peak_wlen", ""], [85, 3, 1, 0, "peak_y_min", ""], [85, 3, 1, 0, "peaks", ""], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "plot_unit_x", "Set unit of x-axis."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [85, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [85, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.SurfacePlot": [[85, 2, 1, 0, "add_surface_facet", "Add surface."], [85, 3, 1, 0, "area_unit", "Unit of the surface area."], [85, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [85, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [85, 3, 1, 0, "bulk_phase", "Bulk phase."], [85, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [85, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [85, 3, 1, 0, "custom_colors", "Colors used in the plot."], [85, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [85, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [85, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [85, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [85, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [85, 3, 1, 0, "data_labels", "List of labels for all data sets."], [85, 3, 1, 0, "elemental_phases", "Elemental phases."], [85, 3, 1, 0, "energy_unit", "Energy unit."], [85, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [85, 2, 1, 0, "import_from_pandas_df", "Import surface facets from a results pandas data frame of the workflow builder."], [85, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [85, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [85, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [85, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [85, 2, 1, 0, "plot", "Plot the data sets."], [85, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "plot_properties", "Properties that are plotted on the y-axis."], [85, 3, 1, 0, "plot_type", "Plot type. Supported options are 'chem_potential' or 'excess_atoms'."], [85, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [85, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [85, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [85, 2, 1, 0, "set_bulk_phase", "Set bulk phase."], [85, 2, 1, 0, "set_elemental_phase", "Set elemental phase."], [85, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [85, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [85, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [85, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [85, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [85, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [85, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [85, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [85, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [85, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [85, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [85, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [85, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [85, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [85, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [85, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [85, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [85, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [85, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [85, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [85, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [85, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [85, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [85, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [85, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.band_structure_dos": [[84, 6, 1, 0, "BandStructure", "Depreciated band structure class."], [84, 1, 1, 0, "BandStructureDOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure, aim2dat.plots.base_dos._BaseDensityOfStates"], [84, 6, 1, 0, "BandStructureDensityOfStates", "Depreciated band structure DOS class."], [84, 1, 1, 0, "BandStructurePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_band_structure._BaseBandStructure"], [84, 1, 1, 0, "DOSPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_dos._BaseDensityOfStates"], [84, 6, 1, 0, "DensityOfStates", "Depreciated DOS class."]], "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.__init__": [[84, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [84, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [84, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.band_structure_dos.BandStructureDOSPlot": [[84, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [84, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [84, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [84, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [84, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [84, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [84, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [84, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [84, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [84, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [84, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [84, 3, 1, 0, "custom_colors", "Colors used in the plot."], [84, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [84, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [84, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [84, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [84, 3, 1, 0, "data_labels", "List of labels for all data sets."], [84, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [84, 2, 1, 0, "import_band_structure", "Import a data set."], [84, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [84, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [84, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [84, 2, 1, 0, "import_total_dos", "Import total density of states."], [84, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [84, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [84, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [84, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [84, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [84, 2, 1, 0, "plot", "Plot the data sets."], [84, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [84, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [84, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [84, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [84, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [84, 2, 1, 0, "set_reference_cell", "Set reference cell."], [84, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [84, 2, 1, 0, "shift_bands_and_dos", "Shift band structure and density of states."], [84, 2, 1, 0, "shift_bands_and_dos_to_vbm", "Shift the bands and the density of states such that the VBM is zero."], [84, 2, 1, 0, "shift_dos", "Shift density of states."], [84, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [84, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [84, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [84, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [84, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [84, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [84, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [84, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [84, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [84, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [84, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [84, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [84, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [84, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [84, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [84, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [84, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [84, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [84, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [84, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [84, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [84, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [84, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [84, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [84, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [84, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [84, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [84, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [84, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [84, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.band_structure_dos.BandStructurePlot": [[84, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [84, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [84, 2, 1, 0, "analyse_band", "Calculate the minimum and the maximum energy of the band as well as their k-points."], [84, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [84, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [84, 2, 1, 0, "calculate_band_gap", "Calculate the direct and indirect band gap of the band structure."], [84, 2, 1, 0, "calculate_energy_diff_at_kpoint", "Calculate the energy difference between two bands at a certain k-point."], [84, 2, 1, 0, "calculate_smallest_direct_energy_diff", "Calculate the smallest direct energy difference between two bands."], [84, 2, 1, 0, "calculate_smallest_energy_diff", "Calculate the smallest energy difference between two bands."], [84, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [84, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [84, 3, 1, 0, "custom_colors", "Colors used in the plot."], [84, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [84, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [84, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [84, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [84, 3, 1, 0, "data_labels", "List of labels for all data sets."], [84, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [84, 2, 1, 0, "import_band_structure", "Import a data set."], [84, 2, 1, 0, "import_from_aiida_bandsdata", "Read band structure from an aiida bandsdata node."], [84, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [84, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [84, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [84, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [84, 2, 1, 0, "plot", "Plot the data sets."], [84, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [84, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [84, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [84, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [84, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [84, 2, 1, 0, "set_reference_cell", "Set reference cell."], [84, 2, 1, 0, "shift_bands", "Shift the bands of one data set."], [84, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [84, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [84, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [84, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [84, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [84, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [84, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [84, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [84, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [84, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [84, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [84, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [84, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [84, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [84, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [84, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [84, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [84, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [84, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [84, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [84, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [84, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [84, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [84, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [84, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [84, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.band_structure_dos.DOSPlot.__init__": [[84, 4, 2, 0, "dos_comp_threshold", "Threshold to compare the density of states if detect_equivalent_kinds is set to True when importing projected density of states data sets."], [84, 4, 2, 0, "per_atom", "Normalize all density of states data sets to the numer of atoms."], [84, 4, 2, 0, "sum_pdos", "Whether to sum all pDOS data sets to obtain a tDOS."]], "aim2dat.plots.band_structure_dos.DOSPlot": [[84, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [84, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [84, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [84, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [84, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [84, 3, 1, 0, "custom_colors", "Colors used in the plot."], [84, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [84, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [84, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [84, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [84, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [84, 3, 1, 0, "data_labels", "List of labels for all data sets."], [84, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [84, 2, 1, 0, "import_from_aiida_xydata", "Read projected density of states from an AiiDA xy-data node."], [84, 2, 1, 0, "import_projected_dos", "Import projected density of states."], [84, 2, 1, 0, "import_total_dos", "Import total density of states."], [84, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [84, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [84, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [84, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [84, 3, 1, 0, "pdos_plot_type", "plot type of the pDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [84, 2, 1, 0, "plot", "Plot the data sets."], [84, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [84, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [84, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [84, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [84, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [84, 2, 1, 0, "shift_dos", "Shift density of states."], [84, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [84, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [84, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [84, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [84, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [84, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [84, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [84, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [84, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [84, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [84, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [84, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [84, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [84, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [84, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [84, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [84, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [84, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [84, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [84, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [84, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [84, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [84, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [84, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [84, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [84, 3, 1, 0, "tdos_plot_type", "plot type of the tDOS data sets, supported options are 'line', 'fill' and 'linefill'."], [84, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [84, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [84, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [84, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.partial_charges": [[86, 1, 1, 0, "PartialChargesPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.partial_charges.PartialChargesPlot": [[86, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [86, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [86, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [86, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [86, 3, 1, 0, "custom_colors", "Colors used in the plot."], [86, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [86, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [86, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [86, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [86, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [86, 3, 1, 0, "data_labels", "List of labels for all data sets."], [86, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [86, 2, 1, 0, "import_from_aiida_list", "Import partial charges."], [86, 2, 1, 0, "import_partial_charges", "Import partial charges."], [86, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [86, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [86, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [86, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [86, 3, 1, 0, "pc_plot_order", "List of plot assignments to order the plotted data."], [86, 3, 1, 0, "pc_plot_type", "plot type of the partial charge data sets, supported options are 'scatter', 'bar'."], [86, 2, 1, 0, "plot", "Plot the data sets."], [86, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [86, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [86, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [86, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [86, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [86, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [86, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [86, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [86, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [86, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [86, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [86, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [86, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [86, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [86, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [86, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [86, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [86, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [86, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [86, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [86, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [86, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [86, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [86, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [86, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [86, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [86, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [86, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.partial_rdf": [[87, 1, 1, 0, "PartialRDFPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.partial_rdf.PartialRDFPlot": [[87, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [87, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [87, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [87, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [87, 3, 1, 0, "custom_colors", "Colors used in the plot."], [87, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [87, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [87, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [87, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [87, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [87, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [87, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [87, 3, 1, 0, "data_labels", "List of labels for all data sets."], [87, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [87, 2, 1, 0, "import_ffingerprint", "Import F-Fingerprint functions."], [87, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [87, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [87, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [87, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [87, 2, 1, 0, "plot", "Plot the data sets."], [87, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [87, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [87, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [87, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [87, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [87, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [87, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [87, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [87, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [87, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [87, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [87, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [87, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [87, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [87, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [87, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [87, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [87, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [87, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [87, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [87, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [87, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [87, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [87, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [87, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [87, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [87, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [87, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [87, 3, 1, 0, "x_unit", "Set unit of the x coordinate."], [87, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [87, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.phase": [[88, 6, 1, 0, "PhaseDiagram", "Depreciated PhaseDiagram class."], [88, 1, 1, 0, "PhasePlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.phase.PhasePlot.__init__": [[88, 4, 2, 0, "show_convex_hull", "Whether to calculate and show the convex hull in the plot."]], "aim2dat.plots.phase.PhasePlot": [[88, 2, 1, 0, "add_data_point", "Add datapoint to the dataset."], [88, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [88, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [88, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [88, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [88, 3, 1, 0, "custom_colors", "Colors used in the plot."], [88, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [88, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [88, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [88, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [88, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [88, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [88, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [88, 3, 1, 0, "data_labels", "List of labels for all data sets."], [88, 3, 1, 0, "elements", "List of elements that are included in the plot. If set to None all elements are included."], [88, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [88, 2, 1, 0, "import_from_pandas_df", "Import data from pandas data frame."], [88, 2, 1, 0, "import_from_structure_collection", "Import data from a StructureCollection object."], [88, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [88, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [88, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [88, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [88, 2, 1, 0, "plot", "Plot the data sets."], [88, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [88, 3, 1, 0, "plot_type", "'formation_energy', 'stability', 'band_gap', 'direct_band_gap' and 'numbers'."], [88, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [88, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [88, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [88, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [88, 3, 1, 0, "show_crystal_system", "Show crystal system of the phases."], [88, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [88, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [88, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [88, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [88, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [88, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [88, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [88, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [88, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [88, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [88, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [88, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [88, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [88, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [88, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [88, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [88, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [88, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [88, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [88, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [88, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [88, 3, 1, 0, "top_labels", "Chemical formulas that are shown as labels in the plot."], [88, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [88, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [88, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [88, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.planar_fields": [[89, 1, 1, 0, "PlanarFieldPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.planar_fields.PlanarFieldPlot": [[89, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [89, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [89, 3, 1, 0, "coordinates_unit", "Set unit of the two coordinates."], [89, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [89, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [89, 3, 1, 0, "custom_colors", "Colors used in the plot."], [89, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [89, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [89, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [89, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [89, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [89, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [89, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [89, 3, 1, 0, "data_labels", "List of labels for all data sets."], [89, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [89, 2, 1, 0, "import_field", "Import field."], [89, 2, 1, 0, "import_from_aiida_arraydata", "Import from aiida array data."], [89, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [89, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [89, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [89, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [89, 3, 1, 0, "norm", "Set norm of the z-values for matplotlib."], [89, 2, 1, 0, "plot", "Plot the data sets."], [89, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [89, 3, 1, 0, "plot_type", "Set plot-type."], [89, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [89, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [89, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [89, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [89, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [89, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [89, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [89, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [89, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [89, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [89, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [89, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [89, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [89, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [89, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [89, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [89, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [89, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [89, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [89, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [89, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [89, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [89, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [89, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [89, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [89, 3, 1, 0, "values_unit", "Set unit of the z-values."], [89, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [89, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [89, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [89, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.simple_plot": [[90, 1, 1, 0, "SimplePlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._HLineMixin, aim2dat.plots.base_mixin._VLineMixin"]], "aim2dat.plots.simple_plot.SimplePlot": [[90, 2, 1, 0, "add_hline", "Add a vertical line to the plot."], [90, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [90, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [90, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [90, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [90, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [90, 3, 1, 0, "custom_colors", "Colors used in the plot."], [90, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [90, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [90, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [90, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [90, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [90, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [90, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [90, 3, 1, 0, "data_labels", "List of labels for all data sets."], [90, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [90, 2, 1, 0, "import_bar_data_set", "Import data set for a bar plot."], [90, 2, 1, 0, "import_scatter_data_set", "Import data set for a scatter plot."], [90, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [90, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [90, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [90, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [90, 2, 1, 0, "plot", "Plot the data sets."], [90, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [90, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [90, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [90, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [90, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [90, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [90, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [90, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [90, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [90, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [90, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [90, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [90, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [90, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [90, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [90, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [90, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [90, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [90, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [90, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [90, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [90, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [90, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [90, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [90, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [90, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [90, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [90, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [90, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [90, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [90, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.spectroscopy": [[91, 6, 1, 0, "Spectrum", "Depreciated Spectrum class."], [91, 1, 1, 0, "SpectrumPlot", "Bases: aim2dat.plots.base_plot._BasePlot, aim2dat.plots.base_mixin._VLineMixin, aim2dat.plots.base_mixin._PeakDetectionMixin, aim2dat.plots.base_mixin._SmearingMixin"]], "aim2dat.plots.spectroscopy.SpectrumPlot.__init__": [[91, 4, 2, 0, "detect_peaks", "Whether to detect peaks of the spectra."], [91, 4, 2, 0, "plot_original_spectra", "Whether to plot the original spectra (in addition to the broadened spectra)."], [91, 4, 2, 0, "plot_unit_x", "Unit of the x-values. Imported spectra are transformed to the corresponding unit if the unit of the imported data set is given."], [91, 4, 2, 0, "smooth_spectra", "Whether to broaden the spectra."]], "aim2dat.plots.spectroscopy.SpectrumPlot": [[91, 2, 1, 0, "add_vline", "Add a vertical line to the plot."], [91, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [91, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [91, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [91, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [91, 3, 1, 0, "custom_colors", "Colors used in the plot."], [91, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [91, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [91, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [91, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [91, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [91, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [91, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [91, 3, 1, 0, "data_labels", "List of labels for all data sets."], [91, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [91, 2, 1, 0, "import_spectrum", "Import spectrum."], [91, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [91, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [91, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [91, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [91, 3, 1, 0, "peak_color", ""], [91, 3, 1, 0, "peak_distance", ""], [91, 3, 1, 0, "peak_height", ""], [91, 3, 1, 0, "peak_line_style", ""], [91, 3, 1, 0, "peak_max_factor", ""], [91, 3, 1, 0, "peak_plateau_size", ""], [91, 3, 1, 0, "peak_prominence", ""], [91, 3, 1, 0, "peak_rel_height", ""], [91, 3, 1, 0, "peak_threshold", ""], [91, 3, 1, 0, "peak_width", ""], [91, 3, 1, 0, "peak_wlen", ""], [91, 3, 1, 0, "peak_y_min", ""], [91, 3, 1, 0, "peaks", ""], [91, 2, 1, 0, "plot", "Plot the data sets."], [91, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [91, 3, 1, 0, "plot_unit_x", "Set unit of x-axis."], [91, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [91, 2, 1, 0, "remove_additional_plot_elements", "Remove all added plot elements."], [91, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [91, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [91, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [91, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [91, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [91, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [91, 3, 1, 0, "smearing_delta", "Spacing between two values. If set to None the original function is used."], [91, 3, 1, 0, "smearing_method", "Method used to smear out the functions. Supported options are 'gaussian' and 'lorentzian'."], [91, 3, 1, 0, "smearing_sigma", "Sigma value of the smearing distribution."], [91, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [91, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [91, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [91, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [91, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [91, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [91, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [91, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [91, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [91, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [91, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [91, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [91, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [91, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [91, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [91, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [91, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [91, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [91, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [91, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [91, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [91, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.surface": [[92, 1, 1, 0, "SurfacePlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.surface.SurfacePlot": [[92, 2, 1, 0, "add_surface_facet", "Add surface."], [92, 3, 1, 0, "area_unit", "Unit of the surface area."], [92, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [92, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [92, 3, 1, 0, "bulk_phase", "Bulk phase."], [92, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [92, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [92, 3, 1, 0, "custom_colors", "Colors used in the plot."], [92, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [92, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [92, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [92, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [92, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [92, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [92, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [92, 3, 1, 0, "data_labels", "List of labels for all data sets."], [92, 3, 1, 0, "elemental_phases", "Elemental phases."], [92, 3, 1, 0, "energy_unit", "Energy unit."], [92, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [92, 2, 1, 0, "import_from_pandas_df", "Import surface facets from a results pandas data frame of the workflow builder."], [92, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [92, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [92, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [92, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [92, 2, 1, 0, "plot", "Plot the data sets."], [92, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [92, 3, 1, 0, "plot_properties", "Properties that are plotted on the y-axis."], [92, 3, 1, 0, "plot_type", "Plot type. Supported options are 'chem_potential' or 'excess_atoms'."], [92, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [92, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [92, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [92, 2, 1, 0, "set_bulk_phase", "Set bulk phase."], [92, 2, 1, 0, "set_elemental_phase", "Set elemental phase."], [92, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [92, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [92, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [92, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [92, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [92, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [92, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [92, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [92, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [92, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [92, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [92, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [92, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [92, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [92, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [92, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [92, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [92, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [92, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [92, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [92, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [92, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [92, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [92, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [92, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [92, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.thermal_properties": [[93, 1, 1, 0, "QHAPlot", "Bases: aim2dat.plots.base_plot._BasePlot"], [93, 1, 1, 0, "ThermalPropertiesPlot", "Bases: aim2dat.plots.base_plot._BasePlot"]], "aim2dat.plots.thermal_properties.QHAPlot": [[93, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [93, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [93, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [93, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [93, 3, 1, 0, "custom_colors", "Colors used in the plot."], [93, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [93, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [93, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [93, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [93, 3, 1, 0, "data_labels", "List of labels for all data sets."], [93, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [93, 2, 1, 0, "import_qha_properties", "Import data set."], [93, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [93, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [93, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [93, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [93, 2, 1, 0, "plot", "Plot the data sets."], [93, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [93, 3, 1, 0, "plot_properties", "Properties that are plotted."], [93, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [93, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [93, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [93, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [93, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [93, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [93, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [93, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [93, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [93, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [93, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [93, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [93, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [93, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [93, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [93, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [93, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [93, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [93, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [93, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [93, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [93, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [93, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [93, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [93, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [93, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [93, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [93, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [93, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.plots.thermal_properties.ThermalPropertiesPlot": [[93, 2, 1, 0, "auto_set_axis_properties", "Whether the axis labels and other axis properties are auto-generated."], [93, 3, 1, 0, "backend", "used backend library to plot the data. Supported values are \"matplotlib\" and \"plotly\"."], [93, 2, 1, 0, "create_default_gridspec", "Create default grid for multiple plots."], [93, 3, 1, 0, "custom_alpha", "Alpha value(s) controlling the opacity of plot elements."], [93, 3, 1, 0, "custom_colors", "Colors used in the plot."], [93, 3, 1, 0, "custom_linestyles", "Line styles used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_linewidths", "Line widths used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_markers", "Marker types used in the plot (This feature is not supported by all plot types)."], [93, 3, 1, 0, "custom_xticklabels", "List of labels for the ticks on the x-axis."], [93, 3, 1, 0, "custom_xticks", "List of values to set ticks on the x-axis."], [93, 3, 1, 0, "custom_yticklabels", "List of labels for the ticks on the y-axis."], [93, 3, 1, 0, "custom_yticks", "List of values to set ticks on the y-axis."], [93, 3, 1, 0, "data_labels", "List of labels for all data sets."], [93, 3, 1, 0, "equal_aspect_ratio", "Set equal aspect ratio of the plot(s)."], [93, 2, 1, 0, "import_thermal_properties", "Import data set."], [93, 3, 1, 0, "legend_bbox_to_anchor", "Shift between box and anchor. The default value is (1, 1)."], [93, 3, 1, 0, "legend_loc", "Location of the legend. The default value is 1."], [93, 3, 1, 0, "legend_ncol", "Columns of the legend (only supported for the matplotlib backend)."], [93, 3, 1, 0, "legend_sort_entries", "Sort entries of the legend."], [93, 2, 1, 0, "plot", "Plot the data sets."], [93, 3, 1, 0, "plot_grid", "Whether to draw a grid in the plot. The default value is False."], [93, 3, 1, 0, "plot_properties", "Plot properties."], [93, 3, 1, 0, "ratio", "Length-to-width ratio of the plot given as a tuple of two numbers."], [93, 2, 1, 0, "reset_gridspec", "Reset gridspec settings."], [93, 2, 1, 0, "return_data_labels", "Return the labels of all data sets."], [93, 3, 1, 0, "show_colorbar", "Show colorbar (not supported by all plots)."], [93, 3, 1, 0, "show_grid", "Whether to draw a grid in the plot. The default value is False."], [93, 3, 1, 0, "show_legend", "Show legend. The default value is False."], [93, 3, 1, 0, "show_plot", "Show plot. The default value is False."], [93, 3, 1, 0, "store_path", "Path of the folder to store the plot. The default value is ./."], [93, 3, 1, 0, "store_plot", "Store plot. The default value is False."], [93, 3, 1, 0, "style_sheet", "Custom matplotlib style sheet."], [93, 3, 1, 0, "subplot_adjust", "Keyword arguments for the matplotlib subplots_adjust function."], [93, 3, 1, 0, "subplot_align_ylabels", "Align y label of plot. The default value is False."], [93, 3, 1, 0, "subplot_gridspec", "Grid spec values."], [93, 3, 1, 0, "subplot_hspace", "Vertical spacing between the subplots."], [93, 3, 1, 0, "subplot_ncols", "Number of columns. The default value is 1."], [93, 3, 1, 0, "subplot_nrows", "Number of rows. The default value is 2."], [93, 3, 1, 0, "subplot_share_colorbar", "Use one common colorbar for all subplots."], [93, 3, 1, 0, "subplot_share_legend", "Merge legend items of all subplots."], [93, 3, 1, 0, "subplot_sharex", "Share the x-axis of subplots located in the same column."], [93, 3, 1, 0, "subplot_sharey", "Share the y-axis of subplots located in the same row."], [93, 3, 1, 0, "subplot_sup_title", "Title of the whole figure."], [93, 3, 1, 0, "subplot_sup_x_label", "x-label of the whole figure."], [93, 3, 1, 0, "subplot_sup_y_label", "y-label of the whole figure."], [93, 3, 1, 0, "subplot_tight_layout", "Tight layout of plot. The default value is False."], [93, 3, 1, 0, "subplot_wspace", "Horizontal spacing between the subplots."], [93, 3, 1, 0, "x_label", "Label of the x-axis. If None is given no label will be shown. The default value is None."], [93, 3, 1, 0, "x_range", "Range of the x-axis. The default value is None."], [93, 3, 1, 0, "y_label", "Label of the y-axis. If None is given no label will be shown. The default value is None."], [93, 3, 1, 0, "y_range", "Range of the y-axis. The default value is None."]], "aim2dat.strct": [[108, 1, 1, 0, "Structure", "Bases: aim2dat.strct.mixin.AnalysisMixin, aim2dat.strct.mixin.ManipulationMixin"], [108, 1, 1, 0, "StructureCollection", "The StructureCollection class is a container for one or multiple atomic structures. It implements several import_* and append_* functions to add new data to the object."], [108, 1, 1, 0, "StructureImporter", "Bases: aim2dat.strct.mixin.ConstraintsMixin"], [108, 1, 1, 0, "SurfaceGeneration", "Generates a surfaces and surface slabs based on a bulk crystal structure."], [94, 0, 0, 1, "brillouin_zone_2d", ""], [100, 0, 0, 1, "ext_analysis", ""], [107, 0, 0, 1, "ext_manipulation", ""], [109, 0, 0, 1, "mixin", ""], [110, 0, 0, 1, "stability", ""], [111, 0, 0, 1, "strct", ""], [112, 0, 0, 1, "strct_comparison", ""], [113, 0, 0, 1, "strct_coordination", ""], [114, 0, 0, 1, "strct_io", ""], [115, 0, 0, 1, "strct_manipulation", ""], [116, 0, 0, 1, "strct_misc", ""], [117, 0, 0, 1, "strct_point_groups", ""], [118, 0, 0, 1, "strct_prdf", ""], [119, 0, 0, 1, "strct_space_groups", ""], [120, 0, 0, 1, "strct_super_cell", ""], [121, 0, 0, 1, "strct_validation", ""], [122, 0, 0, 1, "structure_collection", ""], [123, 0, 0, 1, "structure_importer", ""], [124, 0, 0, 1, "structure_operations", ""], [125, 0, 0, 1, "surface", ""], [126, 0, 0, 1, "surface_utils", ""]], "aim2dat.strct.Structure": [[108, 3, 1, 0, "analysis_methods", "Return calculation methods."], [108, 3, 1, 0, "attributes", "Return attributes."], [108, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [108, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [108, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [108, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [108, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [108, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [108, 3, 1, 0, "cell", "Return the cell of the structure."], [108, 3, 1, 0, "cell_angles", "Cell angles."], [108, 3, 1, 0, "cell_lengths", "cell lengths."], [108, 3, 1, 0, "cell_volume", "cell volume."], [108, 3, 1, 0, "chem_formula", "Return chemical formula."], [108, 2, 1, 0, "copy", "Return copy of Structure object."], [108, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [108, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [108, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."], [108, 3, 1, 0, "elements", "Return the elements of the structure."], [108, 3, 1, 0, "export_methods", "Return export methods."], [108, 3, 1, 0, "extras", "Return extras."], [108, 2, 1, 0, "from_aiida_structuredata", "Append structure from AiiDA structure node."], [108, 2, 1, 0, "from_ase_atoms", "Get structure from ase atoms object."], [108, 2, 1, 0, "from_file", "Get structure from file using the ase read-function."], [108, 2, 1, 0, "from_pymatgen_structure", "Get structure from pymatgen structure or molecule object."], [108, 3, 1, 0, "function_args", "Return function arguments for stored extras."], [108, 2, 1, 0, "get", "Get attribute by key and return default if not present."], [108, 2, 1, 0, "get_positions", "Return positions of atoms."], [108, 3, 1, 0, "import_methods", "Return import methods."], [108, 2, 1, 0, "iter_sites", "Iterate through the sites of the structure."], [108, 2, 1, 0, "keys", "Return property names to create the structure."], [108, 3, 1, 0, "kinds", "Kinds of the structure."], [108, 3, 1, 0, "label", "Return label of the structure (especially relevant in StructureCollection)."], [108, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [108, 3, 1, 0, "pbc", "Return the pbc of the structure."], [108, 2, 1, 0, "perform_analysis", "Perform structure analaysis using an external method."], [108, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [108, 3, 1, 0, "positions", "Return the cartesian positions of the structure."], [108, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [108, 3, 1, 0, "scaled_positions", "Return the scaled positions of the structure."], [108, 2, 1, 0, "set_attribute", "Set attribute."], [108, 2, 1, 0, "set_positions", "Set postions of atoms."], [108, 2, 1, 0, "set_site_attribute", "Set site attribute."], [108, 3, 1, 0, "site_attributes", "dict: Dictionary containing the label of a site attribute as key and a tuple/list of values having the same length as the Structure object itself (number of sites) containing site specific properties or attributes (e.g. charges, magnetic moments, forces, ...)."], [108, 3, 1, 0, "store_calculated_properties", "Store calculated properties to reuse them later."], [108, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."], [108, 2, 1, 0, "to_aiida_structuredata", "Create AiiDA structuredata."], [108, 2, 1, 0, "to_ase_atoms", "Create ase Atoms object."], [108, 2, 1, 0, "to_dict", "Export structure to python dictionary."], [108, 2, 1, 0, "to_file", "Export structure to file using the ase interface or certain file formats for Zeo++."], [108, 2, 1, 0, "to_pymatgen_structure", "Create pymatgen Structure (if cell is not None) or Molecule (if cell is None) object."]], "aim2dat.strct.StructureCollection": [[108, 2, 1, 0, "append", "Append structure."], [108, 2, 1, 0, "append_from_aiida_structuredata", "Append structure from aiida structuredata."], [108, 2, 1, 0, "append_from_ase_atoms", "Append structure from ase atoms object."], [108, 2, 1, 0, "append_from_file", "Append structure from file using the ase read-function."], [108, 2, 1, 0, "append_from_pymatgen_structure", "Append structure from pymatgen structure or molecule object."], [108, 2, 1, 0, "append_structure", "Append Structure object to collection. The label of the structure needs to be either given via the structures's property or as keyword argument."], [108, 2, 1, 0, "copy", "Return copy of StructureCollection object."], [108, 2, 1, 0, "create_pandas_df", "Create a pandas data frame of the object."], [108, 2, 1, 0, "duplicate_structure", "Duplicate structure."], [108, 2, 1, 0, "get_all_attribute_keys", "Get all attribute keys."], [108, 2, 1, 0, "get_all_elements", "Get the element symbols of all structures."], [108, 2, 1, 0, "get_all_kinds", "Get the kind strings of all structures."], [108, 2, 1, 0, "get_all_structures", "Return a list of all structures."], [108, 2, 1, 0, "get_structure", "Get structure by key."], [108, 2, 1, 0, "import_from_aiida_db", "Import from the AiiDA database."], [108, 2, 1, 0, "import_from_hdf5_file", "Import from hdf5-file. Calculated extras are not yet supported."], [108, 2, 1, 0, "import_from_pandas_df", "Import from pandas data frame."], [108, 2, 1, 0, "index", "Return index of label. If the label is not present, None is returned."], [108, 2, 1, 0, "items", "Return a list of label, value tuples."], [108, 3, 1, 0, "labels", "Labels assigened to the structures."], [108, 2, 1, 0, "pop", "Pop structure."], [108, 2, 1, 0, "store_in_aiida_db", "Store structures into the AiiDA-database."], [108, 2, 1, 0, "store_in_hdf5_file", "Store structures in hdf5-file. Calculated extras are not yet supported."]], "aim2dat.strct.StructureImporter": [[108, 2, 1, 0, "add_chem_formula_constraint", "Add a chemical formula as a constraint."], [108, 2, 1, 0, "append_from_mp_by_id", "Append structure via the database-id."], [108, 3, 1, 0, "attribute_constraints", "Attribute constraints."], [108, 3, 1, 0, "chem_formula_constraints", "Constraints on the chemical formula."], [108, 3, 1, 0, "concentration_constraints", "Elemental concentration constraints."], [108, 2, 1, 0, "generate_random_crystals", "Generate random crystals using the PyXtaL library."], [108, 2, 1, 0, "import_from_mp", "Import structures from the crystal database Materials Project using the pymatgen interface."], [108, 2, 1, 0, "import_from_optimade", "Import crystal structures using the optimade-API."], [108, 2, 1, 0, "import_from_oqmd", "Import from the open quantum materials database."], [108, 3, 1, 0, "neglect_elemental_structures", "Whether to neglect elemental phases."], [108, 2, 1, 0, "remove_constraints", "Remove all constraints."], [108, 2, 1, 0, "return_optimade_database_ids", "Return a list of all ids of online databases that provide a base-url."], [108, 2, 1, 0, "set_attribute_constraint", "Set a constraint on attributes."], [108, 2, 1, 0, "set_concentration_constraint", "Set a constraint on the concentration of an element in the structure."], [108, 3, 1, 0, "structures", "Return the internal StructureCollection object."]], "aim2dat.strct.SurfaceGeneration": [[108, 2, 1, 0, "create_surface", "Create surface from a bulk crystal structure."], [108, 2, 1, 0, "generate_surface_slabs", "Generate surface slabs with all terminations for a certain direction given by its miller indices."], [108, 2, 1, 0, "store_surfaces_in_aiida_db", "Store surfaces into the AiiDA-database."], [108, 2, 1, 0, "to_aiida_surfacedata", "Create surface from a bulk crystal structure."]], "aim2dat.strct.brillouin_zone_2d": [[94, 7, 1, 0, "C_RECT_LGS", ""], [94, 7, 1, 0, "P_HEX_LGS", ""], [94, 7, 1, 0, "P_OBL_LGS", ""], [94, 7, 1, 0, "P_RECT_LGS", ""], [94, 7, 1, 0, "P_SQU_LGS", ""], [94, 7, 1, 0, "P_TRIG_LGS", ""]], "aim2dat.strct.ext_analysis": [[100, 6, 1, 0, "calculate_acsf_descriptor", "Calculate ACSF descriptor as defined in doi:10.1063/1.3553717. This method is based on the implementations of the dscribe python package."], [100, 6, 1, 0, "calculate_ffingerprint_order_p", "Calculate order parameters for the total structure and for each individual site."], [100, 6, 1, 0, "calculate_interaction_matrix", "Calculate interaction matrices as defined in doi:10.1002/qua.24917. This method is based on the implementations of the dscribe python package."], [100, 6, 1, 0, "calculate_mbtr_descriptor", "Calculate MBTR descriptor as defined in doi:10.1088/2632-2153/aca005. This method is based on the implementations of the dscribe python package."], [100, 6, 1, 0, "calculate_planes", "Find planar arangements of atoms in the structure."], [100, 6, 1, 0, "calculate_prdf", "Calculate the partial radial distribution function. The calculation is based on: doi:10.1103/PhysRevB.89.205118."], [100, 6, 1, 0, "calculate_soap_descriptor", "is based on the implementations of the dscribe python package."], [100, 6, 1, 0, "calculate_warren_cowley_order_p", "Calculate Warren-Cowley like order parameters as defined in doi:10.1103/PhysRevB.96.024104."], [100, 6, 1, 0, "create_graph", "Create graph based on the coordination."], [95, 0, 0, 1, "decorator", ""], [100, 6, 1, 0, "determine_molecular_fragments", "Find molecular fragments in a larger molecule/cluster of periodic crystal."], [96, 0, 0, 1, "dscribe_descriptors", ""], [97, 0, 0, 1, "ffprint_order_p", ""], [98, 0, 0, 1, "fragmentation", ""], [99, 0, 0, 1, "graphs", ""], [101, 0, 0, 1, "planes", ""], [102, 0, 0, 1, "prdf", ""], [103, 0, 0, 1, "warren_cowley_order_parameters", ""]], "aim2dat.strct.ext_analysis.calculate_interaction_matrix": [[100, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [100, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [100, 4, 2, 0, "ewald_a", "Parameter controlling the width of the Gaussian functions."], [100, 4, 2, 0, "ewald_accuracy", "Accuracy threshold for the Ewald sum."], [100, 4, 2, 0, "ewald_g_cut", "Reciprocal space cutoff parameter."], [100, 4, 2, 0, "ewald_r_cut", "Real space cutoff parameter."], [100, 4, 2, 0, "ewald_w", "Weight parameter."], [100, 4, 2, 0, "matrix_type", "Matrix type. Supported options are 'coulomb', 'ewald_sum' or 'sine'."], [100, 4, 2, 0, "permutation", "Defines the output format. Options are: 'none', 'sorted_l2', 'eigenspectrum' or 'random'."], [100, 4, 2, 0, "seed", "Seed for the random numbers in case 'random' is chosen for the permutation attibute."], [100, 4, 2, 0, "sigma", "Standar deviation of the Gaussian distributed noise when using 'random' for permutation."], [100, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense 1D array."], [100, 4, 2, 0, "structure", "Structure object."]], "aim2dat.strct.ext_analysis.decorator": [[95, 6, 1, 0, "external_analysis_method", "Decorate external analysis methods."]], "aim2dat.strct.ext_analysis.dscribe_descriptors": [[96, 6, 1, 0, "calculate_acsf_descriptor", "Calculate ACSF descriptor as defined in doi:10.1063/1.3553717. This method is based on the implementations of the dscribe python package."], [96, 6, 1, 0, "calculate_interaction_matrix", "Calculate interaction matrices as defined in doi:10.1002/qua.24917. This method is based on the implementations of the dscribe python package."], [96, 6, 1, 0, "calculate_mbtr_descriptor", "Calculate MBTR descriptor as defined in doi:10.1088/2632-2153/aca005. This method is based on the implementations of the dscribe python package."], [96, 6, 1, 0, "calculate_soap_descriptor", "is based on the implementations of the dscribe python package."]], "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_interaction_matrix": [[96, 4, 2, 0, "dscribe_n_jobs", "Number of jobs used by dscribe to calculate the interaction matrix."], [96, 4, 2, 0, "dscribe_only_physical_cores", "Whether to only use physicsl cores."], [96, 4, 2, 0, "ewald_a", "Parameter controlling the width of the Gaussian functions."], [96, 4, 2, 0, "ewald_accuracy", "Accuracy threshold for the Ewald sum."], [96, 4, 2, 0, "ewald_g_cut", "Reciprocal space cutoff parameter."], [96, 4, 2, 0, "ewald_r_cut", "Real space cutoff parameter."], [96, 4, 2, 0, "ewald_w", "Weight parameter."], [96, 4, 2, 0, "matrix_type", "Matrix type. Supported options are 'coulomb', 'ewald_sum' or 'sine'."], [96, 4, 2, 0, "permutation", "Defines the output format. Options are: 'none', 'sorted_l2', 'eigenspectrum' or 'random'."], [96, 4, 2, 0, "seed", "Seed for the random numbers in case 'random' is chosen for the permutation attibute."], [96, 4, 2, 0, "sigma", "Standar deviation of the Gaussian distributed noise when using 'random' for permutation."], [96, 4, 2, 0, "sparse", "Whether to return a sparse matrix or a dense 1D array."], [96, 4, 2, 0, "structure", "Structure object."]], "aim2dat.strct.ext_analysis.ffprint_order_p": [[97, 6, 1, 0, "calculate_ffingerprint_order_p", "Calculate order parameters for the total structure and for each individual site."]], "aim2dat.strct.ext_analysis.fragmentation": [[98, 6, 1, 0, "determine_molecular_fragments", "Find molecular fragments in a larger molecule/cluster of periodic crystal."]], "aim2dat.strct.ext_analysis.graphs": [[99, 6, 1, 0, "create_graph", "Create graph based on the coordination."]], "aim2dat.strct.ext_analysis.planes": [[101, 6, 1, 0, "calculate_planes", "Find planar arangements of atoms in the structure."]], "aim2dat.strct.ext_analysis.prdf": [[102, 6, 1, 0, "calculate_prdf", "Calculate the partial radial distribution function. The calculation is based on: doi:10.1103/PhysRevB.89.205118."]], "aim2dat.strct.ext_analysis.warren_cowley_order_parameters": [[103, 6, 1, 0, "calculate_warren_cowley_order_p", "Calculate Warren-Cowley like order parameters as defined in doi:10.1103/PhysRevB.96.024104."]], "aim2dat.strct.ext_manipulation": [[107, 6, 1, 0, "add_functional_group", "Add a functional group or an atom to a host site."], [104, 0, 0, 1, "add_functional_group", ""], [105, 0, 0, 1, "add_structure", ""], [107, 6, 1, 0, "add_structure_coord", "Add a functional group or an atom to a host site."], [107, 6, 1, 0, "add_structure_random", "Add structure at random position and orientation."], [106, 0, 0, 1, "decorator", ""]], "aim2dat.strct.ext_manipulation.add_functional_group": [[104, 6, 1, 0, "add_functional_group", "Add a functional group or an atom to a host site."]], "aim2dat.strct.ext_manipulation.add_structure": [[105, 6, 1, 0, "add_structure_coord", "Add a functional group or an atom to a host site."], [105, 6, 1, 0, "add_structure_random", "Add structure at random position and orientation."], [105, 7, 1, 0, "cwd", ""]], "aim2dat.strct.ext_manipulation.decorator": [[106, 6, 1, 0, "external_manipulation_method", "Decorate external manipulation methods."]], "aim2dat.strct.mixin": [[109, 1, 1, 0, "AnalysisMixin", "Mixin class to perform structural analysis tasks."], [109, 8, 1, 0, "ConstraintError", "Bases: Exception"], [109, 1, 1, 0, "ConstraintsMixin", "Mixin to implement structural constraints."], [109, 1, 1, 0, "ManipulationMixin", "Mixin class to perform structural manipulation tasks."], [109, 6, 1, 0, "analysis_method", "Mark function as calculation function."], [109, 6, 1, 0, "manipulates_structure", "Mark structure manipulating functions."]], "aim2dat.strct.mixin.AnalysisMixin": [[109, 3, 1, 0, "analysis_methods", "Return calculation methods."], [109, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [109, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [109, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [109, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [109, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [109, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [109, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [109, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."]], "aim2dat.strct.mixin.ConstraintError": [[109, 1, 1, 0, "args", ""], [109, 2, 1, 0, "with_traceback", "Exception.with_traceback(tb) -- set self.__traceback__ to tb and return self."]], "aim2dat.strct.mixin.ConstraintsMixin": [[109, 2, 1, 0, "add_chem_formula_constraint", "Add a chemical formula as a constraint."], [109, 3, 1, 0, "attribute_constraints", "Attribute constraints."], [109, 3, 1, 0, "chem_formula_constraints", "Constraints on the chemical formula."], [109, 3, 1, 0, "concentration_constraints", "Elemental concentration constraints."], [109, 3, 1, 0, "neglect_elemental_structures", "Whether to neglect elemental phases."], [109, 2, 1, 0, "remove_constraints", "Remove all constraints."], [109, 2, 1, 0, "set_attribute_constraint", "Set a constraint on attributes."], [109, 2, 1, 0, "set_concentration_constraint", "Set a constraint on the concentration of an element in the structure."]], "aim2dat.strct.mixin.ManipulationMixin": [[109, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [109, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [109, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [109, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [109, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."]], "aim2dat.strct.strct": [[111, 1, 1, 0, "Structure", "Bases: aim2dat.strct.mixin.AnalysisMixin, aim2dat.strct.mixin.ManipulationMixin"], [111, 7, 1, 0, "aiida", ""], [111, 6, 1, 0, "export_method", "Mark function as export function."], [111, 6, 1, 0, "import_method", "Mark function as import function."], [111, 7, 1, 0, "pymatgen", ""]], "aim2dat.strct.strct.Structure": [[111, 3, 1, 0, "analysis_methods", "Return calculation methods."], [111, 3, 1, 0, "attributes", "Return attributes."], [111, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [111, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [111, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [111, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [111, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [111, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [111, 3, 1, 0, "cell", "Return the cell of the structure."], [111, 3, 1, 0, "cell_angles", "Cell angles."], [111, 3, 1, 0, "cell_lengths", "cell lengths."], [111, 3, 1, 0, "cell_volume", "cell volume."], [111, 3, 1, 0, "chem_formula", "Return chemical formula."], [111, 2, 1, 0, "copy", "Return copy of Structure object."], [111, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [111, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [111, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."], [111, 3, 1, 0, "elements", "Return the elements of the structure."], [111, 3, 1, 0, "export_methods", "Return export methods."], [111, 3, 1, 0, "extras", "Return extras."], [111, 2, 1, 0, "from_aiida_structuredata", "Append structure from AiiDA structure node."], [111, 2, 1, 0, "from_ase_atoms", "Get structure from ase atoms object."], [111, 2, 1, 0, "from_file", "Get structure from file using the ase read-function."], [111, 2, 1, 0, "from_pymatgen_structure", "Get structure from pymatgen structure or molecule object."], [111, 3, 1, 0, "function_args", "Return function arguments for stored extras."], [111, 2, 1, 0, "get", "Get attribute by key and return default if not present."], [111, 2, 1, 0, "get_positions", "Return positions of atoms."], [111, 3, 1, 0, "import_methods", "Return import methods."], [111, 2, 1, 0, "iter_sites", "Iterate through the sites of the structure."], [111, 2, 1, 0, "keys", "Return property names to create the structure."], [111, 3, 1, 0, "kinds", "Kinds of the structure."], [111, 3, 1, 0, "label", "Return label of the structure (especially relevant in StructureCollection)."], [111, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [111, 3, 1, 0, "pbc", "Return the pbc of the structure."], [111, 2, 1, 0, "perform_analysis", "Perform structure analaysis using an external method."], [111, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [111, 3, 1, 0, "positions", "Return the cartesian positions of the structure."], [111, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [111, 3, 1, 0, "scaled_positions", "Return the scaled positions of the structure."], [111, 2, 1, 0, "set_attribute", "Set attribute."], [111, 2, 1, 0, "set_positions", "Set postions of atoms."], [111, 2, 1, 0, "set_site_attribute", "Set site attribute."], [111, 3, 1, 0, "site_attributes", "dict: Dictionary containing the label of a site attribute as key and a tuple/list of values having the same length as the Structure object itself (number of sites) containing site specific properties or attributes (e.g. charges, magnetic moments, forces, ...)."], [111, 3, 1, 0, "store_calculated_properties", "Store calculated properties to reuse them later."], [111, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."], [111, 2, 1, 0, "to_aiida_structuredata", "Create AiiDA structuredata."], [111, 2, 1, 0, "to_ase_atoms", "Create ase Atoms object."], [111, 2, 1, 0, "to_dict", "Export structure to python dictionary."], [111, 2, 1, 0, "to_file", "Export structure to file using the ase interface or certain file formats for Zeo++."], [111, 2, 1, 0, "to_pymatgen_structure", "Create pymatgen Structure (if cell is not None) or Molecule (if cell is None) object."]], "aim2dat.strct.strct_coordination": [[113, 6, 1, 0, "calculate_coordination", "Calculate the coordination of all sites."]], "aim2dat.strct.strct_io": [[114, 6, 1, 0, "get_structure_from_file", "Get function to read structure file."]], "aim2dat.strct.strct_manipulation": [[115, 7, 1, 0, "cwd", ""], [115, 6, 1, 0, "delete_atoms", "Delete atoms."], [115, 6, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [115, 6, 1, 0, "substitute_elements", "Substitute all atoms of the same element by another element."]], "aim2dat.strct.strct_misc": [[116, 6, 1, 0, "calculate_angle", "Calculate angle between three atomic positions."], [116, 6, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atomic positions."], [116, 6, 1, 0, "calculate_distance", "Calculate distance."]], "aim2dat.strct.strct_point_groups": [[117, 6, 1, 0, "determine_point_group", "Determine point group."]], "aim2dat.strct.strct_prdf": [[118, 6, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint."]], "aim2dat.strct.strct_space_groups": [[119, 6, 1, 0, "determine_space_group", "Determine space group."]], "aim2dat.strct.strct_super_cell": [[120, 6, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi tessellation."]], "aim2dat.strct.structure_collection": [[122, 1, 1, 0, "StructureCollection", "The StructureCollection class is a container for one or multiple atomic structures. It implements several import_* and append_* functions to add new data to the object."], [122, 7, 1, 0, "aiida", ""], [122, 7, 1, 0, "pymatgen", ""]], "aim2dat.strct.structure_collection.StructureCollection": [[122, 2, 1, 0, "append", "Append structure."], [122, 2, 1, 0, "append_from_aiida_structuredata", "Append structure from aiida structuredata."], [122, 2, 1, 0, "append_from_ase_atoms", "Append structure from ase atoms object."], [122, 2, 1, 0, "append_from_file", "Append structure from file using the ase read-function."], [122, 2, 1, 0, "append_from_pymatgen_structure", "Append structure from pymatgen structure or molecule object."], [122, 2, 1, 0, "append_structure", "Append Structure object to collection. The label of the structure needs to be either given via the structures's property or as keyword argument."], [122, 2, 1, 0, "copy", "Return copy of StructureCollection object."], [122, 2, 1, 0, "create_pandas_df", "Create a pandas data frame of the object."], [122, 2, 1, 0, "duplicate_structure", "Duplicate structure."], [122, 2, 1, 0, "get_all_attribute_keys", "Get all attribute keys."], [122, 2, 1, 0, "get_all_elements", "Get the element symbols of all structures."], [122, 2, 1, 0, "get_all_kinds", "Get the kind strings of all structures."], [122, 2, 1, 0, "get_all_structures", "Return a list of all structures."], [122, 2, 1, 0, "get_structure", "Get structure by key."], [122, 2, 1, 0, "import_from_aiida_db", "Import from the AiiDA database."], [122, 2, 1, 0, "import_from_hdf5_file", "Import from hdf5-file. Calculated extras are not yet supported."], [122, 2, 1, 0, "import_from_pandas_df", "Import from pandas data frame."], [122, 2, 1, 0, "index", "Return index of label. If the label is not present, None is returned."], [122, 2, 1, 0, "items", "Return a list of label, value tuples."], [122, 3, 1, 0, "labels", "Labels assigened to the structures."], [122, 2, 1, 0, "pop", "Pop structure."], [122, 2, 1, 0, "store_in_aiida_db", "Store structures into the AiiDA-database."], [122, 2, 1, 0, "store_in_hdf5_file", "Store structures in hdf5-file. Calculated extras are not yet supported."]], "aim2dat.strct.structure_importer": [[123, 1, 1, 0, "StructureImporter", "Bases: aim2dat.strct.mixin.ConstraintsMixin"]], "aim2dat.strct.structure_importer.StructureImporter": [[123, 2, 1, 0, "add_chem_formula_constraint", "Add a chemical formula as a constraint."], [123, 2, 1, 0, "append_from_mp_by_id", "Append structure via the database-id."], [123, 3, 1, 0, "attribute_constraints", "Attribute constraints."], [123, 3, 1, 0, "chem_formula_constraints", "Constraints on the chemical formula."], [123, 3, 1, 0, "concentration_constraints", "Elemental concentration constraints."], [123, 2, 1, 0, "generate_random_crystals", "Generate random crystals using the PyXtaL library."], [123, 2, 1, 0, "import_from_mp", "Import structures from the crystal database Materials Project using the pymatgen interface."], [123, 2, 1, 0, "import_from_optimade", "Import crystal structures using the optimade-API."], [123, 2, 1, 0, "import_from_oqmd", "Import from the open quantum materials database."], [123, 3, 1, 0, "neglect_elemental_structures", "Whether to neglect elemental phases."], [123, 2, 1, 0, "remove_constraints", "Remove all constraints."], [123, 2, 1, 0, "return_optimade_database_ids", "Return a list of all ids of online databases that provide a base-url."], [123, 2, 1, 0, "set_attribute_constraint", "Set a constraint on attributes."], [123, 2, 1, 0, "set_concentration_constraint", "Set a constraint on the concentration of an element in the structure."], [123, 3, 1, 0, "structures", "Return the internal StructureCollection object."]], "aim2dat.strct.structure_operations": [[124, 1, 1, 0, "StructureOperations", "Bases: aim2dat.strct.mixin.AnalysisMixin, aim2dat.strct.mixin.ManipulationMixin"], [124, 6, 1, 0, "compare_structures", "Parallelize structure comparison methods via this wrapper function."], [124, 6, 1, 0, "structure_wrapper", "Parallelize structure analysis and manipulation methods via this wrapper function."]], "aim2dat.strct.structure_operations.StructureOperations": [[124, 3, 1, 0, "analysis_methods", "Return calculation methods."], [124, 2, 1, 0, "calculate_angle", "Calculate angle between three atoms."], [124, 2, 1, 0, "calculate_coordination", "Calculate coordination environment of each atomic site."], [124, 2, 1, 0, "calculate_dihedral_angle", "Calculate dihedral angle between four atoms."], [124, 2, 1, 0, "calculate_distance", "Calculate distance between two atoms."], [124, 2, 1, 0, "calculate_ffingerprint", "Calculate f-fingerprint function for each element-pair and atomic site."], [124, 2, 1, 0, "calculate_stabilities", "Calculate the formation energies and stabilities of all structures."], [124, 2, 1, 0, "calculate_voronoi_tessellation", "Calculate voronoi polyhedron for each atomic site."], [124, 3, 1, 0, "chunksize", "Number of tasks handed to each process at once."], [124, 2, 1, 0, "compare_sites_via_coordination", "Compare two atomic sites based on their coordination and the distances to their neighbour atoms."], [124, 2, 1, 0, "compare_sites_via_ffingerprint", "Calculate similarity of two atom sites."], [124, 2, 1, 0, "compare_structures_via_comp_sym", "Compare two structures merely based on the composition and space group."], [124, 2, 1, 0, "compare_structures_via_direct_comp", "Compare structures by comparing lattice vectors, angles and scaled positions."], [124, 2, 1, 0, "compare_structures_via_ffingerprint", "Calculate similarity of two structures."], [124, 2, 1, 0, "copy", "Return copy of StructureCollection object."], [124, 2, 1, 0, "delete_atoms", "Delete atoms by element, list of elements, site index  or list of site indices."], [124, 2, 1, 0, "determine_point_group", "Determine the point group of a molecule."], [124, 2, 1, 0, "determine_space_group", "Determine the space group of the structure using spglib as backend."], [124, 2, 1, 0, "find_duplicates_via_comp_sym", "Find duplicate structures coimparing the composition and space group."], [124, 2, 1, 0, "find_duplicates_via_direct_comp", "standardized structures.."], [124, 2, 1, 0, "find_duplicates_via_ffingerprint", "Find duplicate structures using the FFingerprint method."], [124, 2, 1, 0, "find_eq_sites_via_coordination", "Find equivalent sites by comparing the coordination of each site and its distance to the neighbour atoms."], [124, 2, 1, 0, "find_eq_sites_via_ffingerprint", "Find equivalent sites by comparing the F-Fingerprint of each site."], [124, 3, 1, 0, "manipulation_methods", "Return manipulation methods."], [124, 3, 1, 0, "n_procs", "Number of parallel processes."], [124, 3, 1, 0, "output_format", "Specify the output format of calculation methods. Supported options are 'dict' and 'DataFrame'."], [124, 2, 1, 0, "perform_analysis", "Perform structure analaysis using an external method."], [124, 2, 1, 0, "perform_manipulation", "Perform structure manipulation using an external method."], [124, 2, 1, 0, "scale_unit_cell", "Scale unit cell of the structure."], [124, 3, 1, 0, "structures", "Return the internal StructureCollection object."], [124, 2, 1, 0, "substitute_elements", "Substitute all atoms of one or several elements."], [124, 3, 1, 0, "supported_output_formats", "Return the supported output formats."], [124, 3, 1, 0, "verbose", "Print progress bar."]], "aim2dat.strct.surface": [[125, 1, 1, 0, "SurfaceGeneration", "Generates a surfaces and surface slabs based on a bulk crystal structure."]], "aim2dat.strct.surface.SurfaceGeneration": [[125, 2, 1, 0, "create_surface", "Create surface from a bulk crystal structure."], [125, 2, 1, 0, "generate_surface_slabs", "Generate surface slabs with all terminations for a certain direction given by its miller indices."], [125, 2, 1, 0, "store_surfaces_in_aiida_db", "Store surfaces into the AiiDA-database."], [125, 2, 1, 0, "to_aiida_surfacedata", "Create surface from a bulk crystal structure."]], "aim2dat.strct.surface_utils": [[126, 7, 1, 0, "SPACE_GROUP_HN_TO_LAYER_GROUP", ""]], "aim2dat.utils": [[127, 0, 0, 1, "chem_formula", ""], [128, 0, 0, 1, "dict_tools", ""], [129, 0, 0, 1, "element_properties", ""], [131, 0, 0, 1, "maths", ""], [132, 0, 0, 1, "print", ""], [133, 0, 0, 1, "space_groups", ""], [134, 0, 0, 1, "units", ""]], "aim2dat.utils.chem_formula": [[127, 6, 1, 0, "compare_formulas", "Check if two chemical formulas are identical."], [127, 6, 1, 0, "reduce_formula", "Try to find a reduced formula only having natural numbers as quantities"], [127, 6, 1, 0, "transform_dict_to_latexstr", "Create a string from a formula dictionary, fractional quantities are rounded."], [127, 6, 1, 0, "transform_dict_to_str", "Create a string from a formula dictionary, fractional quantities are rounded."], [127, 6, 1, 0, "transform_list_to_dict", "Convert a list of elements to a dictionary."], [127, 6, 1, 0, "transform_list_to_str", "Convert a list of elements to a dictionary."], [127, 6, 1, 0, "transform_str_to_dict", "Create a dictionary from a formula string. The function supports round, squared and curly brackets as well as recurring elements."]], "aim2dat.utils.dict_tools": [[128, 6, 1, 0, "dict_create_tree", "Create a nested dictionary."], [128, 6, 1, 0, "dict_merge", "Merge two dictionaries."], [128, 6, 1, 0, "dict_retrieve_parameter", "Retrieve value from nested dictionary."], [128, 6, 1, 0, "dict_set_parameter", "Set parameter in a nested dictionary."]], "aim2dat.utils.element_properties": [[129, 7, 1, "id0", "element_groups", ""], [129, 6, 1, 0, "get_atomic_mass", "Return atomic mass of the element from the atomic number, element symbol or name."], [129, 6, 1, 0, "get_atomic_number", "Return atomic number of the element from element symbol or name."], [129, 6, 1, 0, "get_atomic_radius", "Return the covalent or van der Waals radius of the element. The following sources are used for different radius types:"], [129, 6, 1, 0, "get_electronegativity", "Return the electronegativity of the element."], [129, 6, 1, 0, "get_element_groups", "Return groups that contain the element from the atomic number, element symbol or name."], [129, 6, 1, 0, "get_element_symbol", "Return symbol of the element from element number or name."], [129, 6, 1, 0, "get_group", "Return all elements in the group."]], "aim2dat.utils.maths": [[131, 6, 1, 0, "calc_angle", "Calculate the angle between two vectors."], [131, 6, 1, 0, "calc_circular_segment_area", "Calculate the circular segment."], [131, 6, 1, 0, "calc_plane_equation", "Calculate the plane from 3 given points in the form a*x + b*y + c*z = d."], [131, 6, 1, 0, "calc_polygon_area", "Calculate the area of a polygon."], [131, 6, 1, 0, "calc_reflection_matrix", "Calculate the 3d reflection matrix normal to the input vector."], [131, 6, 1, 0, "calc_solid_angle", "Calculate the solid angle between a center point and points that span a polyhedron."], [131, 6, 1, 0, "gaussian_function", "Calculate the Gaussian function with a certain sigma-value."]], "aim2dat.utils.print": [[132, 7, 1, 0, "MAX_STR_LENGTH", ""]], "aim2dat.utils.space_groups": [[133, 6, 1, 0, "get_crystal_system", "Return the crystal system of a space group given by a string or number."], [133, 6, 1, 0, "get_lattice_type", "Return the crystal system of a space group given by a string or number."], [133, 6, 1, 0, "get_space_group_details", "Return space group details from name or international number using spglib."], [133, 6, 1, 0, "transform_to_nr", "Parse the space group into the corresponding number (if necessary) using the ase library."], [133, 6, 1, 0, "transform_to_str", "Parse the space group from its number to the symbol using the ase library."]], "aim2dat.utils.units": [[134, 1, 1, 0, "Energy", "Bases: _BaseQuantity"], [134, 1, 1, 0, "Frequency", "Bases: _BaseQuantity"], [134, 1, 1, 0, "Length", "Bases: _BaseQuantity"], [134, 1, 1, 0, "UnitConverter", "Bases: _BaseUnitConverter"], [134, 1, 1, 0, "Wavevector", "Bases: _BaseQuantity"], [134, 7, 1, 0, "energy", ""], [134, 7, 1, 0, "frequency", ""], [134, 7, 1, 0, "length", ""], [134, 7, 1, 0, "wavevector", ""]], "aim2dat.utils.units.Energy": [[134, 3, 1, 0, "available_units", "List of all available units."], [134, 2, 1, 0, "get_unit", "Return the value of the unit."]], "aim2dat.utils.units.Frequency": [[134, 3, 1, 0, "available_units", "List of all available units."], [134, 2, 1, 0, "get_unit", "Return the value of the unit."]], "aim2dat.utils.units.Length": [[134, 3, 1, 0, "available_units", "List of all available units."], [134, 2, 1, 0, "get_unit", "Return the value of the unit."]], "aim2dat.utils.units.UnitConverter": [[134, 5, 1, 0, "available_units", ""], [134, 2, 1, 0, "convert_units", "Convert one unit into another."], [134, 5, 1, 0, "plot_labels", ""]], "aim2dat.utils.units.Wavevector": [[134, 3, 1, 0, "available_units", "List of all available units."], [134, 2, 1, 0, "get_unit", "Return the value of the unit."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:parameter", "5": "py:attribute", "6": "py:function", "7": "py:data", "8": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "function", "Python function"], "7": ["py", "data", "Python data"], "8": ["py", "exception", "Python exception"]}, "titleterms": {"aiida": [0, 39, 153, 169], "process": [0, 153], "chargemol": [0, 5, 6, 7], "cp2k": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 65, 66, 67, 68, 139, 152], "critic2": [0, 29, 30, 31, 69, 144, 145], "enumlib": [0, 32, 33, 34, 35], "aim2dat": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 155], "aiida_data": [1, 2, 3], "gaussian_cube_data": 1, "modul": [1, 3, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 37, 38, 42, 54, 56, 57, 58, 59, 60, 62, 64, 65, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134], "content": [1, 3, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 37, 38, 42, 46, 54, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134], "class": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 58, 59, 61, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 122, 123, 124, 125, 134, 138, 144, 145, 146, 153, 154, 161, 162, 163, 165], "properti": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 59, 61, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 122, 123, 124, 134, 141, 162], "method": [1, 3, 5, 7, 9, 10, 11, 12, 17, 18, 20, 21, 23, 24, 25, 26, 29, 31, 32, 33, 38, 57, 58, 59, 61, 78, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 108, 109, 111, 122, 123, 124, 125, 134, 167], "note": [1, 3, 5, 10, 29, 32, 162, 165, 166], "submodul": [2, 6, 22, 30, 34, 36, 46, 61, 66, 71, 79, 100, 107, 108, 130], "surface_data": 3, "aiida_workflow": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "_workflow_builder_util": 4, "calcjob": [5, 10, 29], "warn": [5, 9, 10, 11, 12, 17, 18, 20, 21, 24, 25, 26, 29, 32, 159], "parser": [7, 23, 31], "auxiliary_funct": 8, "function": [8, 19, 27, 28, 32, 35, 37, 42, 46, 57, 60, 62, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 85, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 124, 127, 128, 129, 131, 133, 137, 138, 151], "band_structure_work_chain": 9, "attribut": [10, 12, 19, 23, 24, 25, 26, 27, 28, 38, 62, 105, 111, 115, 122, 129, 134], "cell_opt_work_chain": 11, "combined_work_chain": 12, "core_work_chain_handl": 13, "core_work_chain_input": 14, "core_work_chain_opt": 15, "core_work_chain_scf": 16, "cube_work_chain": 17, "eigenvalues_work_chain": 18, "el_properties_util": 19, "find_scf_p_work_chain": 20, "geo_opt_work_chain": 21, "partial_charges_work_chain": 24, "pdos_work_chain": 25, "planar_fields_work_chain": 26, "surface_opt_util": 27, "work_chain_spec": 28, "enum_calcjob": 32, "enum_pars": 33, "util": [35, 37, 74, 83, 127, 128, 129, 130, 131, 132, 133, 134], "workflow_build": 38, "paramt": 38, "ext_interfac": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56], "ase_atom": 40, "ase_surfac": 41, "dscribe": 42, "graph": [43, 99, 154], "hdf5": 44, "import_opt_depend": 45, "packag": [46, 61, 66, 85, 100, 107, 108, 147, 158, 167, 168], "mp": 47, "mp_openapi": 48, "optimad": 49, "oqmd": 50, "panda": 51, "phonopi": [52, 72, 141], "pymatgen": 53, "pyxtal": [54, 168], "seekpath": 55, "spglib": 56, "fct": [57, 58, 59, 60, 61, 62], "discret": [57, 137, 138], "fingerprint": [58, 150, 151], "function_comparison": 59, "hull": 60, "smear": 62, "subpackag": [63, 71, 108], "io": [64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "cif": 64, "bands_do": 65, "restart": 67, "stdout": 68, "fhi_aim": 70, "qe": 73, "xmgrace": 75, "yaml": 76, "zeo": 77, "ml": [78, 79, 80, 81, 82, 83, 159], "cell_grid_search": 78, "kernel": [80, 160], "metric": [81, 151, 160], "transform": [82, 159, 160], "plot": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 139, 140, 141, 142, 143, 144, 145, 146, 147, 161, 162, 163], "band_structure_do": 84, "partial_charg": 86, "partial_rdf": 87, "phase": 88, "planar_field": 89, "simple_plot": 90, "spectroscopi": 91, "surfac": [92, 125, 169], "thermal_properti": 93, "strct": [94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126], "brillouin_zone_2d": 94, "ext_analysi": [95, 96, 97, 98, 99, 100, 101, 102, 103], "decor": [95, 106], "dscribe_descriptor": 96, "ffprint_order_p": 97, "fragment": 98, "plane": [101, 145], "prdf": 102, "warren_cowley_order_paramet": 103, "ext_manipul": [104, 105, 106, 107], "add_functional_group": 104, "add_structur": 105, "mixin": 109, "stabil": 110, "strct_comparison": 112, "strct_coordin": 113, "strct_io": 114, "strct_manipul": 115, "strct_misc": 116, "strct_point_group": 117, "strct_prdf": 118, "strct_space_group": 119, "strct_super_cel": 120, "strct_valid": 121, "structure_collect": 122, "structure_import": 123, "structure_oper": 124, "surface_util": 126, "chem_formula": 127, "dict_tool": 128, "element_properti": 129, "math": 131, "print": 132, "space_group": 133, "unit": 134, "changelog": 135, "version": [135, 152], "0": 135, "2": 135, "1": 135, "exampl": [136, 151, 153, 161, 163, 165, 167, 168], "list": [136, 152, 155, 160, 161, 162], "creat": [137, 138, 169], "grid": [137, 138, 164], "analys": [137, 149], "axi": [137, 162], "merg": 137, "two": [137, 138], "object": [137, 167], "same": 137, "axis_typ": 137, "can": 137, "transpos": 137, "combin": [137, 152], "differ": [137, 148], "weight": 137, "compar": [138, 150, 165], "how": [138, 147], "appli": [138, 159], "fringerprint": 138, "an": 138, "instanc": [138, 153, 154, 163, 165, 167, 168], "functiondiscretizationfingerprint": 138, "band": [139, 140, 141, 142, 143], "structur": [139, 140, 141, 142, 143, 149, 150, 160, 165, 166, 167, 168], "project": [139, 140, 141, 142, 143, 149], "densiti": [139, 140, 141, 142, 143], "state": [139, 140, 141, 142, 143, 154], "pdo": [139, 140, 141, 142, 143], "from": [139, 140, 141, 142, 143, 144, 145, 149, 159, 169], "output": [139, 140, 141, 142, 144, 145], "file": [139, 140, 141, 142, 144, 145], "The": [139, 140, 141, 142, 152, 154, 165], "fhi": 140, "aim": 140, "thermal": 141, "quantum": [142, 149], "espresso": 142, "materi": [143, 149], "atom": [144, 148], "partial": 144, "charg": 144, "read": 144, "initi": [144, 149, 159, 167], "import": [144, 145, 151, 163], "data": [144, 145, 147, 159, 163], "planar": 145, "field": 145, "calcul": [145, 148, 150, 152], "vector": 145, "pars": 145, "planarfieldplot": 145, "us": [146, 147, 152, 154], "simpleplot": [146, 163], "flexibl": 146, "framework": 146, "x": 147, "rai": 147, "absorpt": 147, "spectrum": 147, "singl": 147, "each": 147, "set": [147, 154, 159, 162, 163, 164], "multipl": [147, 165], "dataset": [147, 149, 151], "one": 147, "subplot": [147, 164], "peak": 147, "detect": 147, "smoothen": 147, "coordin": 148, "number": 148, "site": 148, "queri": 149, "pool": 149, "c": [149, 157], "te": 149, "binari": 149, "system": [149, 156, 157], "crystal": [149, 150, 167, 168, 169], "open": 149, "databas": [149, 168], "exploit": 149, "chemic": 149, "similar": 149, "increas": 149, "f": 150, "analysi": [151, 165, 166, 167], "support": [151, 152, 162], "comparison": 151, "relat": [151, 153, 154, 161, 163, 165, 167, 168], "run": 152, "high": [152, 153, 169], "throughput": [152, 153, 169], "core": 152, "work": 152, "chain": 152, "exit": 152, "code": 152, "all": [152, 161, 162], "statu": 152, "messag": 152, "workflow": [153, 154, 169], "builder": [153, 154], "api": [153, 154, 163, 165, 167, 168], "handl": [154, 165], "complex": 154, "protocol": 154, "up": [154, 159], "input": [154, 169], "paramet": 154, "parent": 154, "node": 154, "check": 154, "execut": 154, "task": 154, "visual": 154, "proven": 154, "multipleworkflowbuild": 154, "store": 154, "load": 154, "document": 155, "featur": [155, 159, 162], "contribut": 155, "linux": 156, "oper": [156, 157], "window": 157, "microsoft": 157, "build": 157, "tool": 157, "anaconda": 157, "virtual": 157, "environ": 157, "overview": [158, 170], "depend": 158, "machin": 159, "learn": [159, 160], "split": 159, "train": 159, "test": 159, "extract": 159, "model": 159, "perform": 159, "new": 159, "unknown": 159, "scikit": 160, "integr": [160, 169], "custom": [160, 162], "common": 162, "automat": 162, "backend": 162, "assign": 164, "spec": 164, "valu": 164, "onc": 165, "structurecollect": 165, "manipul": [165, 167], "via": 165, "structureoper": 165, "represent": 167, "molecul": 167, "interfac": [167, 168], "other": 167, "extern": 167, "onlin": 168, "random": 168, "gener": 168, "ad": 168, "constraint": 168, "bulk": 169}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"AiiDA Processes": [[0, "aiida-processes"]], "chargemol": [[0, "chargemol"]], "CP2K": [[0, "cp2k"]], "critic2": [[0, "critic2"]], "enumlib": [[0, "enumlib"]], "aim2dat.aiida_data.gaussian_cube_data": [[1, "module-aim2dat.aiida_data.gaussian_cube_data"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [5, "module-contents"], [7, "module-contents"], [8, "module-contents"], [9, "module-contents"], [10, "module-contents"], [11, "module-contents"], [12, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [35, "module-contents"], [37, "module-contents"], [38, "module-contents"], [42, "module-contents"], [54, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [62, "module-contents"], [64, "module-contents"], [65, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [109, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [5, "classes"], [7, "classes"], [9, "classes"], [10, "classes"], [11, "classes"], [12, "classes"], [17, "classes"], [18, "classes"], [20, "classes"], [21, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [38, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [61, "classes"], [78, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [108, "classes"], [109, "classes"], [111, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [134, "classes"]], "Properties": [[1, "id1"], [3, "id1"], [5, "id2"], [7, "id1"], [9, "id2"], [10, "id2"], [11, "id2"], [12, "id2"], [12, "id5"], [17, "id2"], [18, "id2"], [20, "id2"], [21, "id2"], [23, "id1"], [23, "id3"], [23, "id5"], [24, "id2"], [25, "id2"], [26, "id2"], [29, "id2"], [31, "id1"], [32, "id2"], [33, "id1"], [38, "id2"], [38, "id4"], [57, "id1"], [57, "id3"], [59, "id1"], [61, "id1"], [61, "id3"], [61, "id5"], [82, "id1"], [82, "id3"], [82, "id5"], [82, "id7"], [82, "id9"], [82, "id11"], [82, "id13"], [82, "id15"], [82, "id17"], [82, "id19"], [84, "id1"], [84, "id3"], [84, "id5"], [85, "id1"], [85, "id3"], [85, "id5"], [85, "id7"], [85, "id9"], [85, "id11"], [85, "id13"], [85, "id15"], [85, "id17"], [85, "id19"], [86, "id1"], [87, "id1"], [88, "id1"], [89, "id1"], [90, "id1"], [91, "id1"], [92, "id1"], [93, "id1"], [93, "id3"], [108, "id1"], [108, "id3"], [108, "id5"], [109, "id2"], [109, "id4"], [109, "id6"], [111, "id1"], [122, "id1"], [123, "id1"], [124, "id1"], [134, "id1"], [134, "id3"], [134, "id5"], [134, "id8"]], "Methods": [[1, "id2"], [3, "id2"], [5, "id1"], [5, "id3"], [7, "id2"], [9, "id1"], [9, "id3"], [10, "id1"], [10, "id3"], [11, "id1"], [11, "id3"], [12, "id1"], [12, "id3"], [12, "id4"], [12, "id6"], [17, "id1"], [17, "id3"], [18, "id1"], [18, "id3"], [20, "id1"], [20, "id3"], [21, "id1"], [21, "id3"], [23, "id2"], [23, "id4"], [23, "id6"], [24, "id1"], [24, "id3"], [25, "id1"], [25, "id3"], [26, "id1"], [26, "id3"], [29, "id1"], [29, "id3"], [31, "id2"], [32, "id1"], [32, "id3"], [33, "id2"], [38, "id1"], [38, "id3"], [38, "id5"], [57, "id2"], [57, "id4"], [58, "id1"], [59, "id2"], [61, "id2"], [61, "id4"], [61, "id6"], [61, "id7"], [78, "id1"], [82, "id2"], [82, "id4"], [82, "id6"], [82, "id8"], [82, "id10"], [82, "id12"], [82, "id14"], [82, "id16"], [82, "id18"], [82, "id20"], [84, "id2"], [84, "id4"], [84, "id6"], [85, "id2"], [85, "id4"], [85, "id6"], [85, "id8"], [85, "id10"], [85, "id12"], [85, "id14"], [85, "id16"], [85, "id18"], [85, "id20"], [86, "id2"], [87, "id2"], [88, "id2"], [89, "id2"], [90, "id2"], [91, "id2"], [92, "id2"], [93, "id2"], [93, "id4"], [108, "id2"], [108, "id4"], [108, "id6"], [108, "id7"], [109, "id1"], [109, "id3"], [109, "id5"], [109, "id7"], [111, "id2"], [122, "id2"], [123, "id2"], [124, "id2"], [125, "id1"], [134, "id2"], [134, "id4"], [134, "id6"], [134, "id7"], [134, "id9"]], "Note": [[1, null], [1, null], [3, null], [3, null], [5, null], [10, null], [29, null], [32, null], [162, null], [165, null], [166, null]], "aim2dat.aiida_data": [[2, "module-aim2dat.aiida_data"]], "Submodules": [[2, "submodules"], [6, "submodules"], [22, "submodules"], [30, "submodules"], [34, "submodules"], [36, "submodules"], [46, "submodules"], [61, "submodules"], [66, "submodules"], [71, "submodules"], [79, "submodules"], [100, "submodules"], [107, "submodules"], [108, "submodules"], [130, "submodules"]], "aim2dat.aiida_data.surface_data": [[3, "module-aim2dat.aiida_data.surface_data"]], "aim2dat.aiida_workflows._workflow_builder_utils": [[4, "module-aim2dat.aiida_workflows._workflow_builder_utils"]], "aim2dat.aiida_workflows.chargemol.calcjobs": [[5, "module-aim2dat.aiida_workflows.chargemol.calcjobs"]], "Warning": [[5, null], [9, null], [10, null], [11, null], [12, null], [12, null], [17, null], [18, null], [20, null], [21, null], [24, null], [25, null], [26, null], [29, null], [32, null], [159, null]], "aim2dat.aiida_workflows.chargemol": [[6, "module-aim2dat.aiida_workflows.chargemol"]], "aim2dat.aiida_workflows.chargemol.parsers": [[7, "module-aim2dat.aiida_workflows.chargemol.parsers"]], "aim2dat.aiida_workflows.cp2k.auxiliary_functions": [[8, "module-aim2dat.aiida_workflows.cp2k.auxiliary_functions"]], "Functions": [[8, "functions"], [19, "functions"], [27, "functions"], [28, "functions"], [32, "functions"], [35, "functions"], [37, "functions"], [42, "functions"], [46, "functions"], [57, "functions"], [60, "functions"], [62, "functions"], [64, "functions"], [65, "functions"], [66, "functions"], [67, "functions"], [68, "functions"], [69, "functions"], [70, "functions"], [72, "functions"], [73, "functions"], [74, "functions"], [75, "functions"], [76, "functions"], [77, "functions"], [80, "functions"], [81, "functions"], [83, "functions"], [84, "functions"], [85, "functions"], [88, "functions"], [91, "functions"], [95, "functions"], [96, "functions"], [97, "functions"], [98, "functions"], [99, "functions"], [100, "functions"], [101, "functions"], [102, "functions"], [103, "functions"], [104, "functions"], [105, "functions"], [106, "functions"], [107, "functions"], [109, "functions"], [111, "functions"], [113, "functions"], [114, "functions"], [115, "functions"], [116, "functions"], [117, "functions"], [118, "functions"], [119, "functions"], [120, "functions"], [124, "functions"], [127, "functions"], [128, "functions"], [129, "functions"], [131, "functions"], [133, "functions"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain": [[9, "module-aim2dat.aiida_workflows.cp2k.band_structure_work_chain"]], "aim2dat.aiida_workflows.cp2k.calcjobs": [[10, "module-aim2dat.aiida_workflows.cp2k.calcjobs"]], "Attributes": [[10, "attributes"], [12, "attributes"], [19, "attributes"], [23, "attributes"], [24, "attributes"], [25, "attributes"], [26, "attributes"], [27, "attributes"], [28, "attributes"], [38, "attributes"], [62, "attributes"], [105, "attributes"], [111, "attributes"], [115, "attributes"], [122, "attributes"], [129, "attributes"], [134, "attributes"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain": [[11, "module-aim2dat.aiida_workflows.cp2k.cell_opt_work_chain"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains": [[12, "module-aim2dat.aiida_workflows.cp2k.combined_work_chains"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_handlers": [[13, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_handlers"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs": [[14, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_inputs"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_opt": [[15, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_opt"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_scf": [[16, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_scf"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain": [[17, "module-aim2dat.aiida_workflows.cp2k.cube_work_chain"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain": [[18, "module-aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain"]], "aim2dat.aiida_workflows.cp2k.el_properties_utils": [[19, "module-aim2dat.aiida_workflows.cp2k.el_properties_utils"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain": [[20, "module-aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain": [[21, "module-aim2dat.aiida_workflows.cp2k.geo_opt_work_chain"]], "aim2dat.aiida_workflows.cp2k": [[22, "module-aim2dat.aiida_workflows.cp2k"]], "aim2dat.aiida_workflows.cp2k.parsers": [[23, "module-aim2dat.aiida_workflows.cp2k.parsers"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain": [[24, "module-aim2dat.aiida_workflows.cp2k.partial_charges_work_chain"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain": [[25, "module-aim2dat.aiida_workflows.cp2k.pdos_work_chain"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain": [[26, "module-aim2dat.aiida_workflows.cp2k.planar_fields_work_chain"]], "aim2dat.aiida_workflows.cp2k.surface_opt_utils": [[27, "module-aim2dat.aiida_workflows.cp2k.surface_opt_utils"]], "aim2dat.aiida_workflows.cp2k.work_chain_specs": [[28, "module-aim2dat.aiida_workflows.cp2k.work_chain_specs"]], "aim2dat.aiida_workflows.critic2.calcjobs": [[29, "module-aim2dat.aiida_workflows.critic2.calcjobs"]], "aim2dat.aiida_workflows.critic2": [[30, "module-aim2dat.aiida_workflows.critic2"]], "aim2dat.aiida_workflows.critic2.parsers": [[31, "module-aim2dat.aiida_workflows.critic2.parsers"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob": [[32, "module-aim2dat.aiida_workflows.enumlib.enum_calcjob"]], "aim2dat.aiida_workflows.enumlib.enum_parsers": [[33, "module-aim2dat.aiida_workflows.enumlib.enum_parsers"]], "aim2dat.aiida_workflows.enumlib": [[34, "module-aim2dat.aiida_workflows.enumlib"]], "aim2dat.aiida_workflows.enumlib.utils": [[35, "module-aim2dat.aiida_workflows.enumlib.utils"]], "aim2dat.aiida_workflows": [[36, "module-aim2dat.aiida_workflows"]], "aim2dat.aiida_workflows.utils": [[37, "module-aim2dat.aiida_workflows.utils"]], "aim2dat.aiida_workflows.workflow_builder": [[38, "module-aim2dat.aiida_workflows.workflow_builder"]], "Paramters": [[38, "paramters"]], "aim2dat.ext_interfaces.aiida": [[39, "module-aim2dat.ext_interfaces.aiida"]], "aim2dat.ext_interfaces.ase_atoms": [[40, "module-aim2dat.ext_interfaces.ase_atoms"]], "aim2dat.ext_interfaces.ase_surface": [[41, "module-aim2dat.ext_interfaces.ase_surface"]], "aim2dat.ext_interfaces.dscribe": [[42, "module-aim2dat.ext_interfaces.dscribe"]], "aim2dat.ext_interfaces.graphs": [[43, "module-aim2dat.ext_interfaces.graphs"]], "aim2dat.ext_interfaces.hdf5": [[44, "module-aim2dat.ext_interfaces.hdf5"]], "aim2dat.ext_interfaces.import_opt_dependencies": [[45, "module-aim2dat.ext_interfaces.import_opt_dependencies"]], "aim2dat.ext_interfaces": [[46, "module-aim2dat.ext_interfaces"]], "Package Contents": [[46, "package-contents"], [61, "package-contents"], [66, "package-contents"], [85, "package-contents"], [100, "package-contents"], [107, "package-contents"], [108, "package-contents"]], "aim2dat.ext_interfaces.mp": [[47, "module-aim2dat.ext_interfaces.mp"]], "aim2dat.ext_interfaces.mp_openapi": [[48, "module-aim2dat.ext_interfaces.mp_openapi"]], "aim2dat.ext_interfaces.optimade": [[49, "module-aim2dat.ext_interfaces.optimade"]], "aim2dat.ext_interfaces.oqmd": [[50, "module-aim2dat.ext_interfaces.oqmd"]], "aim2dat.ext_interfaces.pandas": [[51, "module-aim2dat.ext_interfaces.pandas"]], "aim2dat.ext_interfaces.phonopy": [[52, "module-aim2dat.ext_interfaces.phonopy"]], "aim2dat.ext_interfaces.pymatgen": [[53, "module-aim2dat.ext_interfaces.pymatgen"]], "aim2dat.ext_interfaces.pyxtal": [[54, "module-aim2dat.ext_interfaces.pyxtal"]], "aim2dat.ext_interfaces.seekpath": [[55, "module-aim2dat.ext_interfaces.seekpath"]], "aim2dat.ext_interfaces.spglib": [[56, "module-aim2dat.ext_interfaces.spglib"]], "aim2dat.fct.discretization": [[57, "module-aim2dat.fct.discretization"]], "aim2dat.fct.fingerprint": [[58, "module-aim2dat.fct.fingerprint"]], "aim2dat.fct.function_comparison": [[59, "module-aim2dat.fct.function_comparison"]], "aim2dat.fct.hull": [[60, "module-aim2dat.fct.hull"]], "aim2dat.fct": [[61, "module-aim2dat.fct"]], "aim2dat.fct.smearing": [[62, "module-aim2dat.fct.smearing"]], "aim2dat": [[63, "module-aim2dat"]], "Subpackages": [[63, "subpackages"], [71, "subpackages"], [108, "subpackages"]], "aim2dat.io.cif": [[64, "module-aim2dat.io.cif"]], "aim2dat.io.cp2k.bands_dos": [[65, "module-aim2dat.io.cp2k.bands_dos"]], "aim2dat.io.cp2k": [[66, "module-aim2dat.io.cp2k"]], "aim2dat.io.cp2k.restart": [[67, "module-aim2dat.io.cp2k.restart"]], "aim2dat.io.cp2k.stdout": [[68, "module-aim2dat.io.cp2k.stdout"]], "aim2dat.io.critic2": [[69, "module-aim2dat.io.critic2"]], "aim2dat.io.fhi_aims": [[70, "module-aim2dat.io.fhi_aims"]], "aim2dat.io": [[71, "module-aim2dat.io"]], "aim2dat.io.phonopy": [[72, "module-aim2dat.io.phonopy"]], "aim2dat.io.qe": [[73, "module-aim2dat.io.qe"]], "aim2dat.io.utils": [[74, "module-aim2dat.io.utils"]], "aim2dat.io.xmgrace": [[75, "module-aim2dat.io.xmgrace"]], "aim2dat.io.yaml": [[76, "module-aim2dat.io.yaml"]], "aim2dat.io.zeo": [[77, "module-aim2dat.io.zeo"]], "aim2dat.ml.cell_grid_search": [[78, "module-aim2dat.ml.cell_grid_search"]], "aim2dat.ml": [[79, "module-aim2dat.ml"]], "aim2dat.ml.kernels": [[80, "module-aim2dat.ml.kernels"]], "aim2dat.ml.metrics": [[81, "module-aim2dat.ml.metrics"]], "aim2dat.ml.transformers": [[82, "module-aim2dat.ml.transformers"]], "aim2dat.ml.utils": [[83, "module-aim2dat.ml.utils"]], "aim2dat.plots.band_structure_dos": [[84, "module-aim2dat.plots.band_structure_dos"]], "aim2dat.plots": [[85, "module-aim2dat.plots"]], "aim2dat.plots.partial_charges": [[86, "module-aim2dat.plots.partial_charges"]], "aim2dat.plots.partial_rdf": [[87, "module-aim2dat.plots.partial_rdf"]], "aim2dat.plots.phase": [[88, "module-aim2dat.plots.phase"]], "aim2dat.plots.planar_fields": [[89, "module-aim2dat.plots.planar_fields"]], "aim2dat.plots.simple_plot": [[90, "module-aim2dat.plots.simple_plot"]], "aim2dat.plots.spectroscopy": [[91, "module-aim2dat.plots.spectroscopy"]], "aim2dat.plots.surface": [[92, "module-aim2dat.plots.surface"]], "aim2dat.plots.thermal_properties": [[93, "module-aim2dat.plots.thermal_properties"]], "aim2dat.strct.brillouin_zone_2d": [[94, "module-aim2dat.strct.brillouin_zone_2d"]], "aim2dat.strct.ext_analysis.decorator": [[95, "module-aim2dat.strct.ext_analysis.decorator"]], "aim2dat.strct.ext_analysis.dscribe_descriptors": [[96, "module-aim2dat.strct.ext_analysis.dscribe_descriptors"]], "aim2dat.strct.ext_analysis.ffprint_order_p": [[97, "module-aim2dat.strct.ext_analysis.ffprint_order_p"]], "aim2dat.strct.ext_analysis.fragmentation": [[98, "module-aim2dat.strct.ext_analysis.fragmentation"]], "aim2dat.strct.ext_analysis.graphs": [[99, "module-aim2dat.strct.ext_analysis.graphs"]], "aim2dat.strct.ext_analysis": [[100, "module-aim2dat.strct.ext_analysis"]], "aim2dat.strct.ext_analysis.planes": [[101, "module-aim2dat.strct.ext_analysis.planes"]], "aim2dat.strct.ext_analysis.prdf": [[102, "module-aim2dat.strct.ext_analysis.prdf"]], "aim2dat.strct.ext_analysis.warren_cowley_order_parameters": [[103, "module-aim2dat.strct.ext_analysis.warren_cowley_order_parameters"]], "aim2dat.strct.ext_manipulation.add_functional_group": [[104, "module-aim2dat.strct.ext_manipulation.add_functional_group"]], "aim2dat.strct.ext_manipulation.add_structure": [[105, "module-aim2dat.strct.ext_manipulation.add_structure"]], "aim2dat.strct.ext_manipulation.decorator": [[106, "module-aim2dat.strct.ext_manipulation.decorator"]], "aim2dat.strct.ext_manipulation": [[107, "module-aim2dat.strct.ext_manipulation"]], "aim2dat.strct": [[108, "module-aim2dat.strct"]], "aim2dat.strct.mixin": [[109, "module-aim2dat.strct.mixin"]], "aim2dat.strct.stability": [[110, "module-aim2dat.strct.stability"]], "aim2dat.strct.strct": [[111, "module-aim2dat.strct.strct"]], "aim2dat.strct.strct_comparison": [[112, "module-aim2dat.strct.strct_comparison"]], "aim2dat.strct.strct_coordination": [[113, "module-aim2dat.strct.strct_coordination"]], "aim2dat.strct.strct_io": [[114, "module-aim2dat.strct.strct_io"]], "aim2dat.strct.strct_manipulation": [[115, "module-aim2dat.strct.strct_manipulation"]], "aim2dat.strct.strct_misc": [[116, "module-aim2dat.strct.strct_misc"]], "aim2dat.strct.strct_point_groups": [[117, "module-aim2dat.strct.strct_point_groups"]], "aim2dat.strct.strct_prdf": [[118, "module-aim2dat.strct.strct_prdf"]], "aim2dat.strct.strct_space_groups": [[119, "module-aim2dat.strct.strct_space_groups"]], "aim2dat.strct.strct_super_cell": [[120, "module-aim2dat.strct.strct_super_cell"]], "aim2dat.strct.strct_validation": [[121, "module-aim2dat.strct.strct_validation"]], "aim2dat.strct.structure_collection": [[122, "module-aim2dat.strct.structure_collection"]], "aim2dat.strct.structure_importer": [[123, "module-aim2dat.strct.structure_importer"]], "aim2dat.strct.structure_operations": [[124, "module-aim2dat.strct.structure_operations"]], "aim2dat.strct.surface": [[125, "module-aim2dat.strct.surface"]], "aim2dat.strct.surface_utils": [[126, "module-aim2dat.strct.surface_utils"]], "aim2dat.utils.chem_formula": [[127, "module-aim2dat.utils.chem_formula"]], "aim2dat.utils.dict_tools": [[128, "module-aim2dat.utils.dict_tools"]], "aim2dat.utils.element_properties": [[129, "module-aim2dat.utils.element_properties"]], "aim2dat.utils": [[130, "module-aim2dat.utils"]], "aim2dat.utils.maths": [[131, "module-aim2dat.utils.maths"]], "aim2dat.utils.print": [[132, "module-aim2dat.utils.print"]], "aim2dat.utils.space_groups": [[133, "module-aim2dat.utils.space_groups"]], "aim2dat.utils.units": [[134, "module-aim2dat.utils.units"]], "Changelog": [[135, "changelog"]], "Version 0.2.0": [[135, "version-0-2-0"]], "Version 0.1.0": [[135, "version-0-1-0"]], "Example List": [[136, "example-list"]], "Creating a discretized grid to analyse functions": [[137, "Creating-a-discretized-grid-to-analyse-functions"]], "Create a discretized axis": [[137, "Create-a-discretized-axis"]], "Merge two objects with the same axis_type": [[137, "Merge-two-objects-with-the-same-axis_type"]], "Axis can be transposed": [[137, "Axis-can-be-transposed"]], "Combine two objects with different axis_type to a grid": [[137, "Combine-two-objects-with-different-axis_type-to-a-grid"]], "Weighted grid": [[137, "Weighted-grid"]], "Comparing two functions on a discretized grid": [[138, "Comparing-two-functions-on-a-discretized-grid"]], "How to create a grid": [[138, "How-to-create-a-grid"]], "Apply the fringerprint": [[138, "Apply-the-fringerprint"]], "Create an instance of the FunctionDiscretizationFingerprint class": [[138, "Create-an-instance-of-the-FunctionDiscretizationFingerprint-class"]], "Plotting the band structure and projected density of states (pDOS) from CP2K output-files": [[139, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-CP2K-output-files"]], "The band structure plot": [[139, "The-band-structure-plot"], [140, "The-band-structure-plot"], [141, "The-band-structure-plot"], [142, "The-band-structure-plot"]], "The projected density of states plot": [[139, "The-projected-density-of-states-plot"], [140, "The-projected-density-of-states-plot"], [141, "The-projected-density-of-states-plot"], [142, "The-projected-density-of-states-plot"]], "Band structure + projected density of states plot": [[139, "Band-structure-+-projected-density-of-states-plot"], [140, "Band-structure-+-projected-density-of-states-plot"], [141, "Band-structure-+-projected-density-of-states-plot"], [142, "Band-structure-+-projected-density-of-states-plot"]], "Plotting the band structure and projected density of states (pDOS) from FHI-aims output files": [[140, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-FHI-aims-output-files"]], "Plotting the band structure, projected density of states (pDOS) and thermal properties from phonopy output-files": [[141, "Plotting-the-band-structure,-projected-density-of-states-(pDOS)-and-thermal-properties-from-phonopy-output-files"]], "Plotting the band structure and projected density of states (pDOS) from Quantum ESPRESSO output-files": [[142, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-Quantum-ESPRESSO-output-files"]], "Plotting the band structure and projected density of states (pDOS) from Materials Project": [[143, "Plotting-the-band-structure-and-projected-density-of-states-(pDOS)-from-Materials-Project"]], "Plotting atomic partial charges from Critic2 output-files": [[144, "Plotting-atomic-partial-charges-from-Critic2-output-files"]], "Reading the output files": [[144, "Reading-the-output-files"]], "Initialize the plot class": [[144, "Initialize-the-plot-class"]], "Importing data into class": [[144, "Importing-data-into-class"]], "Plotting data": [[144, "Plotting-data"]], "Plotting planar fields from Critic2 output files": [[145, "Plotting-planar-fields-from-Critic2-output-files"]], "Calculating the plane vectors": [[145, "Calculating-the-plane-vectors"]], "Parsing and importing the critic2 field data into the PlanarFieldPlot class": [[145, "Parsing-and-importing-the-critic2-field-data-into-the-PlanarFieldPlot-class"]], "Plotting the field": [[145, "Plotting-the-field"]], "Using the SimplePlot class as a flexible plotting framework": [[146, "Using-the-SimplePlot-class-as-a-flexible-plotting-framework"]], "How to use the plots package to plot a x-ray absorption spectrum": [[147, "How-to-use-the-plots-package-to-plot-a-x-ray-absorption-spectrum"]], "Single plot for each data set": [[147, "Single-plot-for-each-data-set"]], "Multiple datasets in one plot": [[147, "Multiple-datasets-in-one-plot"]], "Plot each dataset in a single subplot": [[147, "Plot-each-dataset-in-a-single-subplot"]], "Peak detection": [[147, "Peak-detection"]], "Smoothening the spectrum": [[147, "Smoothening-the-spectrum"]], "Calculating the coordination numbers for different atomic sites": [[148, "Calculating-the-coordination-numbers-for-different-atomic-sites"]], "Querying the structure pool for the Cs-Te binary system": [[149, "Querying-the-structure-pool-for-the-Cs-Te-binary-system"]], "Querying crystals from Materials Project and Open Quantum Materials Database": [[149, "Querying-crystals-from-Materials-Project-and-Open-Quantum-Materials-Database"]], "Analysing the initial dataset": [[149, "Analysing-the-initial-dataset"]], "Exploiting chemical similarity to increase the structure pool": [[149, "Exploiting-chemical-similarity-to-increase-the-structure-pool"]], "Calculating the F-Fingerprint to compare crystal structures": [[150, "Calculating-the-F-Fingerprint-to-compare-crystal-structures"]], "Function Analysis": [[151, "Function-Analysis"]], "Importing datasets": [[151, "Importing-datasets"]], "Supported comparison metrics": [[151, "Supported-comparison-metrics"]], "Comparison fingerprint": [[151, "Comparison-fingerprint"]], "Related examples": [[151, "Related-examples"], [153, "related-examples"], [161, "related-examples"], [163, "Related-examples"], [165, "Related-examples"], [167, "Related-examples"], [168, "Related-examples"]], "Running high-throughput calculations using CP2K": [[152, "Running-high-throughput-calculations-using-CP2K"]], "Supported CP2K versions": [[152, "Supported-CP2K-versions"]], "The core work chains": [[152, "The-core-work-chains"]], "The combined work chains": [[152, "The-combined-work-chains"]], "Exit-codes": [[152, "Exit-codes"]], "List of all exit status messages:": [[152, "List-of-all-exit-status-messages:"]], "High-throughput Workflows": [[153, "high-throughput-workflows"]], "AiiDA processes": [[153, "aiida-processes"]], "Workflow builder classes": [[153, "workflow-builder-classes"]], "Related API instances": [[153, "related-api-instances"], [154, "Related-API-instances"], [163, "Related-API-instances"], [165, "Related-API-instances"], [167, "Related-API-instances"], [168, "Related-API-instances"]], "Handling complex workflows using the workflow builders": [[154, "Handling-complex-workflows-using-the-workflow-builders"]], "The workflow protocol": [[154, "The-workflow-protocol"]], "Setting up the input parameters and parent node": [[154, "Setting-up-the-input-parameters-and-parent-node"]], "Checking the workflow state": [[154, "Checking-the-workflow-state"]], "Executing workflow tasks": [[154, "Executing-workflow-tasks"]], "Visualizing the provenance graph of the workflow": [[154, "Visualizing-the-provenance-graph-of-the-workflow"]], "The MultipleWorkflowBuilder class": [[154, "The-MultipleWorkflowBuilder-class"]], "Storing and loading workflows": [[154, "Storing-and-loading-workflows"]], "aim2dat Documentation": [[155, "aim2dat-documentation"]], "Feature List": [[155, "feature-list"]], "Contributing": [[155, "contributing"]], "Linux operating systems": [[156, "linux-operating-systems"]], "Windows operating systems": [[157, "windows-operating-systems"]], "Microsoft C++ Build Tools": [[157, "microsoft-c-build-tools"]], "Anaconda & Virtual Environment": [[157, "anaconda-virtual-environment"]], "Overview and Package Dependencies": [[158, "overview-and-package-dependencies"]], "Package Dependencies": [[158, "package-dependencies"]], "Machine Learning": [[159, "Machine-Learning"]], "Splitting up the initial data set into a training and test set": [[159, "Splitting-up-the-initial-data-set-into-a-training-and-test-set"]], "Extracting features from data sets": [[159, "Extracting-features-from-data-sets"]], "Transforming data, model training and performance testing": [[159, "Transforming-data,-model-training-and-performance-testing"]], "Applying the ML model on new unknown data": [[159, "Applying-the-ML-model-on-new-unknown-data"]], "Scikit-learn integration": [[160, "scikit-learn-integration"]], "List of structure transformers": [[160, "list-of-structure-transformers"]], "List of custom metrics and kernels": [[160, "list-of-custom-metrics-and-kernels"]], "Plots": [[161, "plots"]], "List of all plot classes": [[161, "list-of-all-plot-classes"]], "Common features": [[162, "Common-features"]], "Automatic axis settings": [[162, "Automatic-axis-settings"]], "Plot customizations": [[162, "Plot-customizations"]], "Supported plot backends": [[162, "Supported-plot-backends"]], "List of all class properties": [[162, "List-of-all-class-properties"]], "Plotting with the SimplePlot class": [[163, "Plotting-with-the-SimplePlot-class"]], "Importing data sets": [[163, "Importing-data-sets"]], "Plotting data sets": [[163, "Plotting-data-sets"]], "Subplots and grids": [[164, "Subplots-and-grids"]], "Subplot assignment": [[164, "Subplot-assignment"]], "Setting grid spec values": [[164, "Setting-grid-spec-values"]], "Handling multiple structures at once": [[165, "Handling-multiple-structures-at-once"]], "The StructureCollection class": [[165, "The-StructureCollection-class"]], "Analysis and manipulation of multiple structures via the StructureOperations class": [[165, "Analysis-and-manipulation-of-multiple-structures-via-the-StructureOperations-class"]], "Comparing structures via the StructureOperations class": [[165, "Comparing-structures-via-the-StructureOperations-class"]], "Structural Analysis": [[166, "structural-analysis"]], "Representation of molecules and crystals": [[167, "Representation-of-molecules-and-crystals"]], "Initialization of the object": [[167, "Initialization-of-the-object"]], "Interface to other packages": [[167, "Interface-to-other-packages"]], "Structural analysis methods": [[167, "Structural-analysis-methods"]], "Manipulating structures": [[167, "Manipulating-structures"]], "External analysis and manipulation methods": [[167, "External-analysis-and-manipulation-methods"]], "Interfaces to online databases and random crystal generation": [[168, "Interfaces-to-online-databases-and-random-crystal-generation"]], "Adding constraints": [[168, "Adding-constraints"]], "Generating random crystal structure interfacing the PyXtaL package": [[168, "Generating-random-crystal-structure-interfacing-the-PyXtaL-package"]], "Creating surfaces from bulk crystals": [[169, "Creating-surfaces-from-bulk-crystals"]], "Surfaces as input to high-throughput workflows and AiiDA integration": [[169, "Surfaces-as-input-to-high-throughput-workflows-and-AiiDA-integration"]], "Overview": [[170, "overview"]]}, "indexentries": {"collection() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.Collection"], [1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.collection"]], "gaussiancubedata (class in aim2dat.aiida_data.gaussian_cube_data)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData"]], "aim2dat.aiida_data.gaussian_cube_data": [[1, "module-aim2dat.aiida_data.gaussian_cube_data"]], "atomic_charges (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.atomic_charges"]], "atomic_numbers (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.atomic_numbers"]], "atomic_positions (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.atomic_positions"]], "backend (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.backend"]], "backend_entity (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.backend_entity"]], "base() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.base"]], "cell (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.cell"]], "class_node_type() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.class_node_type"]], "clone() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.clone"]], "comment (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.comment"]], "computer (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.computer"]], "convert() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.convert"]], "creator (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.creator"]], "ctime (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.ctime"]], "description (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.description"]], "dset_ids (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.dset_ids"]], "entry_point() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.entry_point"]], "export() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.export"]], "get() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get"]], "get_collection() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_collection"]], "get_content() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_content"]], "get_cube_data() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_cube_data"]], "get_description() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_description"]], "get_export_formats() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_export_formats"]], "get_structure() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.get_structure"]], "id (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.id"]], "importfile() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importfile"]], "importstring() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.importstring"]], "initialize() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.initialize"]], "is_stored (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.is_stored"]], "is_valid_cache (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.is_valid_cache"]], "label (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.label"]], "logger (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.logger"]], "module": [[1, "module-aim2dat.aiida_data.gaussian_cube_data"], [2, "module-aim2dat.aiida_data"], [3, "module-aim2dat.aiida_data.surface_data"], [4, "module-aim2dat.aiida_workflows._workflow_builder_utils"], [5, "module-aim2dat.aiida_workflows.chargemol.calcjobs"], [6, "module-aim2dat.aiida_workflows.chargemol"], [7, "module-aim2dat.aiida_workflows.chargemol.parsers"], [8, "module-aim2dat.aiida_workflows.cp2k.auxiliary_functions"], [9, "module-aim2dat.aiida_workflows.cp2k.band_structure_work_chain"], [10, "module-aim2dat.aiida_workflows.cp2k.calcjobs"], [11, "module-aim2dat.aiida_workflows.cp2k.cell_opt_work_chain"], [12, "module-aim2dat.aiida_workflows.cp2k.combined_work_chains"], [13, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_handlers"], [14, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_inputs"], [15, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_opt"], [16, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_scf"], [17, "module-aim2dat.aiida_workflows.cp2k.cube_work_chain"], [18, "module-aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain"], [19, "module-aim2dat.aiida_workflows.cp2k.el_properties_utils"], [20, "module-aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain"], [21, "module-aim2dat.aiida_workflows.cp2k.geo_opt_work_chain"], [22, "module-aim2dat.aiida_workflows.cp2k"], [23, "module-aim2dat.aiida_workflows.cp2k.parsers"], [24, "module-aim2dat.aiida_workflows.cp2k.partial_charges_work_chain"], [25, "module-aim2dat.aiida_workflows.cp2k.pdos_work_chain"], [26, "module-aim2dat.aiida_workflows.cp2k.planar_fields_work_chain"], [27, "module-aim2dat.aiida_workflows.cp2k.surface_opt_utils"], [28, "module-aim2dat.aiida_workflows.cp2k.work_chain_specs"], [29, "module-aim2dat.aiida_workflows.critic2.calcjobs"], [30, "module-aim2dat.aiida_workflows.critic2"], [31, "module-aim2dat.aiida_workflows.critic2.parsers"], [32, "module-aim2dat.aiida_workflows.enumlib.enum_calcjob"], [33, "module-aim2dat.aiida_workflows.enumlib.enum_parsers"], [34, "module-aim2dat.aiida_workflows.enumlib"], [35, "module-aim2dat.aiida_workflows.enumlib.utils"], [36, "module-aim2dat.aiida_workflows"], [37, "module-aim2dat.aiida_workflows.utils"], [38, "module-aim2dat.aiida_workflows.workflow_builder"], [39, "module-aim2dat.ext_interfaces.aiida"], [40, "module-aim2dat.ext_interfaces.ase_atoms"], [41, "module-aim2dat.ext_interfaces.ase_surface"], [42, "module-aim2dat.ext_interfaces.dscribe"], [43, "module-aim2dat.ext_interfaces.graphs"], [44, "module-aim2dat.ext_interfaces.hdf5"], [45, "module-aim2dat.ext_interfaces.import_opt_dependencies"], [46, "module-aim2dat.ext_interfaces"], [47, "module-aim2dat.ext_interfaces.mp"], [48, "module-aim2dat.ext_interfaces.mp_openapi"], [49, "module-aim2dat.ext_interfaces.optimade"], [50, "module-aim2dat.ext_interfaces.oqmd"], [51, "module-aim2dat.ext_interfaces.pandas"], [52, "module-aim2dat.ext_interfaces.phonopy"], [53, "module-aim2dat.ext_interfaces.pymatgen"], [54, "module-aim2dat.ext_interfaces.pyxtal"], [55, "module-aim2dat.ext_interfaces.seekpath"], [56, "module-aim2dat.ext_interfaces.spglib"], [57, "module-aim2dat.fct.discretization"], [58, "module-aim2dat.fct.fingerprint"], [59, "module-aim2dat.fct.function_comparison"], [60, "module-aim2dat.fct.hull"], [61, "module-aim2dat.fct"], [62, "module-aim2dat.fct.smearing"], [63, "module-aim2dat"], [64, "module-aim2dat.io.cif"], [65, "module-aim2dat.io.cp2k.bands_dos"], [66, "module-aim2dat.io.cp2k"], [67, "module-aim2dat.io.cp2k.restart"], [68, "module-aim2dat.io.cp2k.stdout"], [69, "module-aim2dat.io.critic2"], [70, "module-aim2dat.io.fhi_aims"], [71, "module-aim2dat.io"], [72, "module-aim2dat.io.phonopy"], [73, "module-aim2dat.io.qe"], [74, "module-aim2dat.io.utils"], [75, "module-aim2dat.io.xmgrace"], [76, "module-aim2dat.io.yaml"], [77, "module-aim2dat.io.zeo"], [78, "module-aim2dat.ml.cell_grid_search"], [79, "module-aim2dat.ml"], [80, "module-aim2dat.ml.kernels"], [81, "module-aim2dat.ml.metrics"], [82, "module-aim2dat.ml.transformers"], [83, "module-aim2dat.ml.utils"], [84, "module-aim2dat.plots.band_structure_dos"], [85, "module-aim2dat.plots"], [86, "module-aim2dat.plots.partial_charges"], [87, "module-aim2dat.plots.partial_rdf"], [88, "module-aim2dat.plots.phase"], [89, "module-aim2dat.plots.planar_fields"], [90, "module-aim2dat.plots.simple_plot"], [91, "module-aim2dat.plots.spectroscopy"], [92, "module-aim2dat.plots.surface"], [93, "module-aim2dat.plots.thermal_properties"], [94, "module-aim2dat.strct.brillouin_zone_2d"], [95, "module-aim2dat.strct.ext_analysis.decorator"], [96, "module-aim2dat.strct.ext_analysis.dscribe_descriptors"], [97, "module-aim2dat.strct.ext_analysis.ffprint_order_p"], [98, "module-aim2dat.strct.ext_analysis.fragmentation"], [99, "module-aim2dat.strct.ext_analysis.graphs"], [100, "module-aim2dat.strct.ext_analysis"], [101, "module-aim2dat.strct.ext_analysis.planes"], [102, "module-aim2dat.strct.ext_analysis.prdf"], [103, "module-aim2dat.strct.ext_analysis.warren_cowley_order_parameters"], [104, "module-aim2dat.strct.ext_manipulation.add_functional_group"], [105, "module-aim2dat.strct.ext_manipulation.add_structure"], [106, "module-aim2dat.strct.ext_manipulation.decorator"], [107, "module-aim2dat.strct.ext_manipulation"], [108, "module-aim2dat.strct"], [109, "module-aim2dat.strct.mixin"], [110, "module-aim2dat.strct.stability"], [111, "module-aim2dat.strct.strct"], [112, "module-aim2dat.strct.strct_comparison"], [113, "module-aim2dat.strct.strct_coordination"], [114, "module-aim2dat.strct.strct_io"], [115, "module-aim2dat.strct.strct_manipulation"], [116, "module-aim2dat.strct.strct_misc"], [117, "module-aim2dat.strct.strct_point_groups"], [118, "module-aim2dat.strct.strct_prdf"], [119, "module-aim2dat.strct.strct_space_groups"], [120, "module-aim2dat.strct.strct_super_cell"], [121, "module-aim2dat.strct.strct_validation"], [122, "module-aim2dat.strct.structure_collection"], [123, "module-aim2dat.strct.structure_importer"], [124, "module-aim2dat.strct.structure_operations"], [125, "module-aim2dat.strct.surface"], [126, "module-aim2dat.strct.surface_utils"], [127, "module-aim2dat.utils.chem_formula"], [128, "module-aim2dat.utils.dict_tools"], [129, "module-aim2dat.utils.element_properties"], [130, "module-aim2dat.utils"], [131, "module-aim2dat.utils.maths"], [132, "module-aim2dat.utils.print"], [133, "module-aim2dat.utils.space_groups"], [134, "module-aim2dat.utils.units"]], "mtime (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.mtime"]], "node_type (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.node_type"]], "objects() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.objects"]], "open_cube() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.open_cube"]], "origin (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.origin"]], "pk (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.pk"]], "process_type (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.process_type"]], "set_from_file() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata class method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.set_from_file"]], "set_source() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.set_source"]], "shape (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.shape"]], "source (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.source"]], "store() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.store"]], "store_all() (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata method)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.store_all"]], "title (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.title"]], "user (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.user"]], "uuid (aim2dat.aiida_data.gaussian_cube_data.gaussiancubedata property)": [[1, "aim2dat.aiida_data.gaussian_cube_data.GaussianCubeData.uuid"]], "aim2dat.aiida_data": [[2, "module-aim2dat.aiida_data"]], "collection() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.Collection"], [3, "aim2dat.aiida_data.surface_data.SurfaceData.collection"]], "surfacedata (class in aim2dat.aiida_data.surface_data)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData"]], "aim2dat.aiida_data.surface_data": [[3, "module-aim2dat.aiida_data.surface_data"]], "aperiodic_dir (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.aperiodic_dir"]], "backend (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.backend"]], "backend_entity (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.backend_entity"]], "base() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.base"]], "bottom_terminating_structure (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.bottom_terminating_structure"]], "class_node_type() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.class_node_type"]], "clone() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.clone"]], "computer (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.computer"]], "convert() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.convert"]], "creator (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.creator"]], "ctime (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.ctime"]], "description (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.description"]], "entry_point() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.entry_point"]], "export() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.export"]], "get() (aim2dat.aiida_data.surface_data.surfacedata class method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.get"]], "get_collection() (aim2dat.aiida_data.surface_data.surfacedata class method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.get_collection"]], "get_description() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.get_description"]], "get_export_formats() (aim2dat.aiida_data.surface_data.surfacedata class method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.get_export_formats"]], "id (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.id"]], "importfile() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.importfile"]], "importstring() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.importstring"]], "initialize() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.initialize"]], "is_stored (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.is_stored"]], "is_valid_cache (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.is_valid_cache"]], "label (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.label"]], "logger (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.logger"]], "miller_indices (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.miller_indices"]], "mtime (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.mtime"]], "node_type (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.node_type"]], "objects() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.objects"]], "pk (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.pk"]], "process_type (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.process_type"]], "repeating_structure (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.repeating_structure"]], "set_bottom_terminating_structure() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.set_bottom_terminating_structure"]], "set_repeating_structure() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.set_repeating_structure"]], "set_source() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.set_source"]], "set_top_terminating_structure() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.set_top_terminating_structure"]], "set_top_terminating_structure_nsym() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.set_top_terminating_structure_nsym"]], "source (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.source"]], "store() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.store"]], "store_all() (aim2dat.aiida_data.surface_data.surfacedata method)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.store_all"]], "surface_area (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.surface_area"]], "termination (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.termination"]], "top_terminating_structure (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.top_terminating_structure"]], "top_terminating_structure_nsym (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.top_terminating_structure_nsym"]], "user (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.user"]], "uuid (aim2dat.aiida_data.surface_data.surfacedata property)": [[3, "aim2dat.aiida_data.surface_data.SurfaceData.uuid"]], "aim2dat.aiida_workflows._workflow_builder_utils": [[4, "module-aim2dat.aiida_workflows._workflow_builder_utils"]], "calc_id (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation.savekeys attribute)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys.CALC_ID"]], "chargemolcalculation (class in aim2dat.aiida_workflows.chargemol.calcjobs)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation"]], "chargemolcalculation.savekeys (class in aim2dat.aiida_workflows.chargemol.calcjobs)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation attribute)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.chargemol.calcjobs": [[5, "module-aim2dat.aiida_workflows.chargemol.calcjobs"]], "build_process_type() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.init"]], "inputs (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation attribute)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.metadata"]], "name() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation.savekeys method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.node"]], "on_create() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.on_terminated"]], "options (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.options"]], "out() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out"]], "out_many() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.out_many"]], "parse() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.presubmit"]], "report() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.report"]], "run() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.run"]], "runner (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.set_status"]], "spec() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation class method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.spec_options"]], "submit() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.submit"]], "terminate() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation static method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation property)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.uuid"]], "value() (aim2dat.aiida_workflows.chargemol.calcjobs.chargemolcalculation.savekeys method)": [[5, "aim2dat.aiida_workflows.chargemol.calcjobs.ChargemolCalculation.SaveKeys.value"]], "aim2dat.aiida_workflows.chargemol": [[6, "module-aim2dat.aiida_workflows.chargemol"]], "chargemolparser (class in aim2dat.aiida_workflows.chargemol.parsers)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser"]], "aim2dat.aiida_workflows.chargemol.parsers": [[7, "module-aim2dat.aiida_workflows.chargemol.parsers"]], "exit_codes (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.exit_codes"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser method)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.logger"]], "node (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.node"]], "out() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser method)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.out"]], "outputs (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.outputs"]], "parse() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser method)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser class method)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.parse_from_node"]], "retrieved (aim2dat.aiida_workflows.chargemol.parsers.chargemolparser property)": [[7, "aim2dat.aiida_workflows.chargemol.parsers.ChargemolParser.retrieved"]], "aim2dat.aiida_workflows.cp2k.auxiliary_functions": [[8, "module-aim2dat.aiida_workflows.cp2k.auxiliary_functions"]], "calc_nr_explicit_electrons() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.calc_nr_explicit_electrons"]], "calculate_added_mos() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.calculate_added_mos"]], "create_aiida_node() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.create_aiida_node"]], "estimate_comp_resources() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.estimate_comp_resources"]], "return_rec_space_eigenvalues() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_rec_space_eigenvalues"]], "return_runtime_stats() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_runtime_stats"]], "return_scf_parameters() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_scf_parameters"]], "return_work_chain_info() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.return_work_chain_info"]], "set_xc_functional() (in module aim2dat.aiida_workflows.cp2k.auxiliary_functions)": [[8, "aim2dat.aiida_workflows.cp2k.auxiliary_functions.set_xc_functional"]], "bandstructureworkchain (class in aim2dat.aiida_workflows.cp2k.band_structure_work_chain)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain"]], "bandstructureworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.band_structure_work_chain)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys"]], "calc_id (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain.savekeys attribute)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys.CALC_ID"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain attribute)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.band_structure_work_chain": [[9, "module-aim2dat.aiida_workflows.cp2k.band_structure_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain.savekeys method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain class method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain property)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain.savekeys method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.band_structure_work_chain.bandstructureworkchain method)": [[9, "aim2dat.aiida_workflows.cp2k.band_structure_work_chain.BandStructureWorkChain.wc_specific_post_processing"]], "bandsdata (in module aim2dat.aiida_workflows.cp2k.calcjobs)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.BandsData"]], "calc_id (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation.savekeys attribute)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys.CALC_ID"]], "cp2kcalculation (class in aim2dat.aiida_workflows.cp2k.calcjobs)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation"]], "cp2kcalculation.savekeys (class in aim2dat.aiida_workflows.cp2k.calcjobs)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation attribute)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SINGLE_OUTPUT_LINKNAME"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.calcjobs)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.StructureData"]], "xydata (in module aim2dat.aiida_workflows.cp2k.calcjobs)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.XyData"]], "aim2dat.aiida_workflows.cp2k.calcjobs": [[10, "module-aim2dat.aiida_workflows.cp2k.calcjobs"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.init"]], "inputs (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation attribute)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation.savekeys method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.on_terminated"]], "options (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.options"]], "out() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.out_many"]], "parse() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.presubmit"]], "report() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.report"]], "run() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.run"]], "runner (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.set_status"]], "spec() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation class method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.spec_options"]], "submit() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.submit"]], "terminate() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation static method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation property)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.calcjobs.cp2kcalculation.savekeys method)": [[10, "aim2dat.aiida_workflows.cp2k.calcjobs.Cp2kCalculation.SaveKeys.value"]], "calc_id (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain.savekeys attribute)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys.CALC_ID"]], "celloptworkchain (class in aim2dat.aiida_workflows.cp2k.cell_opt_work_chain)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain"]], "celloptworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.cell_opt_work_chain)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain attribute)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain": [[11, "module-aim2dat.aiida_workflows.cp2k.cell_opt_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.init"]], "initialize_opt_parameters() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.initialize_opt_parameters"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain.savekeys method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.on_wait"]], "opt_post_processing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.opt_post_processing"]], "out() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.report"]], "resubmit_unconverged_geometry() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.resubmit_unconverged_geometry"]], "resubmit_unfinished_calculation() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.resubmit_unfinished_calculation"]], "results() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.save_instance_state"]], "set_additional_optimization_p() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.set_additional_optimization_p"]], "set_status() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain class method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain property)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain.savekeys method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.celloptworkchain method)": [[11, "aim2dat.aiida_workflows.cp2k.cell_opt_work_chain.CellOptWorkChain.wc_specific_post_processing"]], "bandstructurewc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.BandStructureWC"]], "calc_id (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain.savekeys attribute)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys.CALC_ID"]], "calc_id (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain.savekeys attribute)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys.CALC_ID"]], "celloptwc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.CellOptWC"]], "cp2kcalculation (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.Cp2kCalculation"]], "eigenvalueswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.EigenvaluesWC"]], "electronicpropertiesworkchain (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain"]], "electronicpropertiesworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys"]], "findscfparameterswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.FindSCFParametersWC"]], "geooptwc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.GeoOptWC"]], "pdoswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.PDOSWC"]], "partialchargeswc (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.PartialChargesWC"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain attribute)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SINGLE_OUTPUT_LINKNAME"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain attribute)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SINGLE_OUTPUT_LINKNAME"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.StructureData"]], "surfacedata (in module aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceData"]], "surfaceoptworkchain (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain"]], "surfaceoptworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.combined_work_chains)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys"]], "aim2dat.aiida_workflows.cp2k.combined_work_chains": [[12, "module-aim2dat.aiida_workflows.cp2k.combined_work_chains"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.build_process_type"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.build_process_type"]], "ctx (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.ctx"]], "ctx (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.decode_input_args"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.define"]], "define() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.define"]], "dft_cell_opt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.dft_cell_opt"]], "electronic_structure() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.electronic_structure"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.encode_input_args"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exit_codes"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_inputs"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.exposed_outputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.exposed_outputs"]], "find_scf_p() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.find_scf_p"]], "find_scf_parameters() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.find_scf_parameters"]], "geo_opt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.geo_opt"]], "geo_preopt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.geo_preopt"]], "get_builder() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_builder"]], "get_builder() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_exit_statuses"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_or_create_db_record"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_parent_calc"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.get_provenance_inputs_iterator"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.init"]], "init() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.init"]], "inputs (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.inputs"]], "inputs (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.inputs"]], "inspect_find_scf_p_results() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.inspect_find_scf_p_results"]], "inspect_geo_opt_results() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.inspect_geo_opt_results"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.is_valid_cache"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.kill"]], "kill() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.load_instance_state"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.metadata"]], "metadata (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain.savekeys method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys.name"]], "name() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain.savekeys method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.node"]], "node (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_create"]], "on_create() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_entered"]], "on_entered() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_except"]], "on_except() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_exiting"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_finish"]], "on_finish() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_output_emitting"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_paused"]], "on_paused() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_playing"]], "on_playing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_run"]], "on_run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_terminated"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.on_wait"]], "on_wait() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out"]], "out() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.out_many"]], "out_many() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.post_processing"]], "post_processing() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.post_processing"]], "report() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.report"]], "report() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.report"]], "run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.run"]], "run() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.run"]], "run_el_prop_wc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.run_el_prop_wc"]], "runner (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.runner"]], "runner (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.save_instance_state"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.save_instance_state"]], "set_input_parameter() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain static method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.set_input_parameter"]], "set_status() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.set_status"]], "set_status() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.setup"]], "setup() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.setup"]], "should_run_add_calc() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.should_run_add_calc"]], "should_run_cell_opt() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.should_run_cell_opt"]], "should_run_slab_conv() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.should_run_slab_conv"]], "spec() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.spec"]], "spec() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain class method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.spec_metadata"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.submit"]], "submit() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.submit"]], "to_context() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.to_context"]], "to_context() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.update_outputs"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.uuid"]], "uuid (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain property)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.combined_work_chains.electronicpropertiesworkchain.savekeys method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.ElectronicPropertiesWorkChain.SaveKeys.value"]], "value() (aim2dat.aiida_workflows.cp2k.combined_work_chains.surfaceoptworkchain.savekeys method)": [[12, "aim2dat.aiida_workflows.cp2k.combined_work_chains.SurfaceOptWorkChain.SaveKeys.value"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_handlers": [[13, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_handlers"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs": [[14, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_inputs"]], "cwd (in module aim2dat.aiida_workflows.cp2k.core_work_chain_inputs)": [[14, "aim2dat.aiida_workflows.cp2k.core_work_chain_inputs.cwd"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_opt": [[15, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_opt"]], "cwd (in module aim2dat.aiida_workflows.cp2k.core_work_chain_opt)": [[15, "aim2dat.aiida_workflows.cp2k.core_work_chain_opt.cwd"]], "aim2dat.aiida_workflows.cp2k.core_work_chain_scf": [[16, "module-aim2dat.aiida_workflows.cp2k.core_work_chain_scf"]], "cwd (in module aim2dat.aiida_workflows.cp2k.core_work_chain_scf)": [[16, "aim2dat.aiida_workflows.cp2k.core_work_chain_scf.cwd"]], "calc_id (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain.savekeys attribute)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys.CALC_ID"]], "cubeworkchain (class in aim2dat.aiida_workflows.cp2k.cube_work_chain)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain"]], "cubeworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.cube_work_chain)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain attribute)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.cube_work_chain": [[17, "module-aim2dat.aiida_workflows.cp2k.cube_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain.savekeys method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain class method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain property)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain.savekeys method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.cube_work_chain.cubeworkchain method)": [[17, "aim2dat.aiida_workflows.cp2k.cube_work_chain.CubeWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain.savekeys attribute)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys.CALC_ID"]], "eigenvaluesworkchain (class in aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain"]], "eigenvaluesworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain attribute)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain": [[18, "module-aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain.savekeys method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain class method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain property)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain.savekeys method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.eigenvaluesworkchain method)": [[18, "aim2dat.aiida_workflows.cp2k.eigenvalues_work_chain.EigenvaluesWorkChain.wc_specific_post_processing"]], "aim2dat.aiida_workflows.cp2k.el_properties_utils": [[19, "module-aim2dat.aiida_workflows.cp2k.el_properties_utils"]], "cwd (in module aim2dat.aiida_workflows.cp2k.el_properties_utils)": [[19, "aim2dat.aiida_workflows.cp2k.el_properties_utils.cwd"]], "elprop_setup() (in module aim2dat.aiida_workflows.cp2k.el_properties_utils)": [[19, "aim2dat.aiida_workflows.cp2k.el_properties_utils.elprop_setup"]], "set_ctx_parameters_from_protocol() (in module aim2dat.aiida_workflows.cp2k.el_properties_utils)": [[19, "aim2dat.aiida_workflows.cp2k.el_properties_utils.set_ctx_parameters_from_protocol"]], "calc_id (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain.savekeys attribute)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys.CALC_ID"]], "findscfparametersworkchain (class in aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain"]], "findscfparametersworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain attribute)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain": [[20, "module-aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain.savekeys method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain class method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain property)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain.savekeys method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.findscfparametersworkchain method)": [[20, "aim2dat.aiida_workflows.cp2k.find_scf_p_work_chain.FindSCFParametersWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain.savekeys attribute)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys.CALC_ID"]], "geooptworkchain (class in aim2dat.aiida_workflows.cp2k.geo_opt_work_chain)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain"]], "geooptworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.geo_opt_work_chain)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain attribute)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain": [[21, "module-aim2dat.aiida_workflows.cp2k.geo_opt_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.init"]], "initialize_opt_parameters() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.initialize_opt_parameters"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain.savekeys method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.on_wait"]], "opt_post_processing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.opt_post_processing"]], "out() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.report"]], "resubmit_unconverged_geometry() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.resubmit_unconverged_geometry"]], "resubmit_unfinished_calculation() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.resubmit_unfinished_calculation"]], "results() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.save_instance_state"]], "set_additional_optimization_p() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.set_additional_optimization_p"]], "set_status() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain class method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain property)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain.savekeys method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.geooptworkchain method)": [[21, "aim2dat.aiida_workflows.cp2k.geo_opt_work_chain.GeoOptWorkChain.wc_specific_post_processing"]], "aim2dat.aiida_workflows.cp2k": [[22, "module-aim2dat.aiida_workflows.cp2k"]], "bandsdata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.BandsData"]], "cp2kpartialchargesparser (class in aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser"]], "cp2kstandardparser (class in aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser"]], "cp2ktrajectoryparser (class in aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser"]], "gcubedata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.GCubeData"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.StructureData"]], "xydata (in module aim2dat.aiida_workflows.cp2k.parsers)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.XyData"]], "aim2dat.aiida_workflows.cp2k.parsers": [[23, "module-aim2dat.aiida_workflows.cp2k.parsers"]], "exit_codes (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.exit_codes"]], "exit_codes (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.exit_codes"]], "exit_codes (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.exit_codes"]], "extra_output_functions (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser attribute)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.extra_output_functions"]], "extra_output_functions (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser attribute)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.extra_output_functions"]], "extra_output_functions (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser attribute)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.extra_output_functions"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.get_outputs_for_parsing"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.get_outputs_for_parsing"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.logger"]], "logger (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.logger"]], "logger (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.logger"]], "node (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.node"]], "node (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.node"]], "node (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.node"]], "out() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.out"]], "out() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.out"]], "out() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.out"]], "outputs (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.outputs"]], "outputs (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.outputs"]], "outputs (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.outputs"]], "parse() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse"]], "parse() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse"]], "parse() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser class method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse_from_node"]], "parse_from_node() (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser class method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse_from_node"]], "parse_from_node() (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser class method)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse_from_node"]], "parser_type (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser attribute)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parser_type"]], "parser_type (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser attribute)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parser_type"]], "parser_type (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser attribute)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parser_type"]], "retrieved (aim2dat.aiida_workflows.cp2k.parsers.cp2kpartialchargesparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.retrieved"]], "retrieved (aim2dat.aiida_workflows.cp2k.parsers.cp2kstandardparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.retrieved"]], "retrieved (aim2dat.aiida_workflows.cp2k.parsers.cp2ktrajectoryparser property)": [[23, "aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.retrieved"]], "calc_id (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain.savekeys attribute)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys.CALC_ID"]], "chargemolcalculation (in module aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.ChargemolCalculation"]], "critic2calculation (in module aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.Critic2Calculation"]], "partialchargesworkchain (class in aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain"]], "partialchargesworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.partial_charges_work_chain)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain attribute)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain": [[24, "module-aim2dat.aiida_workflows.cp2k.partial_charges_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain.savekeys method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup"]], "setup_external_partial_charge_analysis() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup_external_partial_charge_analysis"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain class method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain property)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain.savekeys method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.partialchargesworkchain method)": [[24, "aim2dat.aiida_workflows.cp2k.partial_charges_work_chain.PartialChargesWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain.savekeys attribute)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys.CALC_ID"]], "pdosworkchain (class in aim2dat.aiida_workflows.cp2k.pdos_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain"]], "pdosworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.pdos_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain attribute)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SINGLE_OUTPUT_LINKNAME"]], "structuredata (in module aim2dat.aiida_workflows.cp2k.pdos_work_chain)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.StructureData"]], "aim2dat.aiida_workflows.cp2k.pdos_work_chain": [[25, "module-aim2dat.aiida_workflows.cp2k.pdos_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain.savekeys method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.setup"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain class method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.submit"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain property)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain.savekeys method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.pdos_work_chain.pdosworkchain method)": [[25, "aim2dat.aiida_workflows.cp2k.pdos_work_chain.PDOSWorkChain.wc_specific_post_processing"]], "calc_id (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain.savekeys attribute)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys.CALC_ID"]], "critic2calculation (in module aim2dat.aiida_workflows.cp2k.planar_fields_work_chain)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.Critic2Calculation"]], "planarfieldsworkchain (class in aim2dat.aiida_workflows.cp2k.planar_fields_work_chain)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain"]], "planarfieldsworkchain.savekeys (class in aim2dat.aiida_workflows.cp2k.planar_fields_work_chain)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain attribute)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain": [[26, "module-aim2dat.aiida_workflows.cp2k.planar_fields_work_chain"]], "build_process_type() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.build_process_type"]], "check_scf_convergence() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.check_scf_convergence"]], "ctx (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.ctx"]], "decode_input_args() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.decode_input_args"]], "define() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.define"]], "encode_input_args() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_exit_statuses"]], "get_or_create_db_record() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_or_create_db_record"]], "get_outputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_outputs"]], "get_parent_calc() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_parent_calc"]], "get_process_handlers() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_process_handlers"]], "get_process_handlers_by_priority() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_process_handlers_by_priority"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.get_provenance_inputs_iterator"]], "init() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.init"]], "initialize_scf_parameters() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.initialize_scf_parameters"]], "inputs (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.inputs"]], "inspect_process() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.inspect_process"]], "is_process_handler() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.is_process_handler"]], "is_valid_cache() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.kill"]], "load_instance_state() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.load_instance_state"]], "metadata (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.metadata"]], "name() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain.savekeys method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys.name"]], "node (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.node"]], "on_create() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_create"]], "on_entered() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_entered"]], "on_except() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_except"]], "on_exiting() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_exiting"]], "on_finish() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_paused"]], "on_playing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_playing"]], "on_run() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_run"]], "on_terminated() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_terminated"]], "on_wait() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.on_wait"]], "out() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out"]], "out_many() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.out_many"]], "post_processing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.post_processing"]], "process_class (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.process_class"]], "report() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.report"]], "results() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.results"]], "run() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.run"]], "run_process() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.run_process"]], "runner (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.runner"]], "save_instance_state() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.set_status"]], "setup() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup"]], "setup_critic2_calculation() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup_critic2_calculation"]], "setup_inputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup_inputs"]], "setup_wc_specific_inputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.setup_wc_specific_inputs"]], "should_run_process() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.should_run_process"]], "spec() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain class method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.spec"]], "spec_metadata() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.spec_metadata"]], "submit() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.submit"]], "switch_to_atomic_scf_guess() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.switch_to_atomic_scf_guess"]], "switch_to_broyden_mixing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.switch_to_broyden_mixing"]], "switch_to_open_shell_ks() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.switch_to_open_shell_ks"]], "to_context() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.to_context"]], "update_outputs() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.update_outputs"]], "uuid (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain property)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.uuid"]], "value() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain.savekeys method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.SaveKeys.value"]], "wc_specific_post_processing() (aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.planarfieldsworkchain method)": [[26, "aim2dat.aiida_workflows.cp2k.planar_fields_work_chain.PlanarFieldsWorkChain.wc_specific_post_processing"]], "aim2dat.aiida_workflows.cp2k.surface_opt_utils": [[27, "module-aim2dat.aiida_workflows.cp2k.surface_opt_utils"]], "create_surface_slab (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[27, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.create_surface_slab"]], "surfopt_setup() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[27, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.surfopt_setup"]], "surfopt_should_run_add_calc() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[27, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.surfopt_should_run_add_calc"]], "surfopt_should_run_slab_conv() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[27, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.surfopt_should_run_slab_conv"]], "update_surf_slab() (in module aim2dat.aiida_workflows.cp2k.surface_opt_utils)": [[27, "aim2dat.aiida_workflows.cp2k.surface_opt_utils.update_surf_slab"]], "cp2kcalculation (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[28, "aim2dat.aiida_workflows.cp2k.work_chain_specs.Cp2kCalculation"]], "aim2dat.aiida_workflows.cp2k.work_chain_specs": [[28, "module-aim2dat.aiida_workflows.cp2k.work_chain_specs"]], "core_work_chain_exit_codes() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[28, "aim2dat.aiida_workflows.cp2k.work_chain_specs.core_work_chain_exit_codes"]], "numerical_p_specs() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[28, "aim2dat.aiida_workflows.cp2k.work_chain_specs.numerical_p_specs"]], "seekpath_p_specs() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[28, "aim2dat.aiida_workflows.cp2k.work_chain_specs.seekpath_p_specs"]], "structural_p_specs() (in module aim2dat.aiida_workflows.cp2k.work_chain_specs)": [[28, "aim2dat.aiida_workflows.cp2k.work_chain_specs.structural_p_specs"]], "calc_id (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation.savekeys attribute)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys.CALC_ID"]], "critic2calculation (class in aim2dat.aiida_workflows.critic2.calcjobs)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation"]], "critic2calculation.savekeys (class in aim2dat.aiida_workflows.critic2.calcjobs)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation attribute)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.critic2.calcjobs": [[29, "module-aim2dat.aiida_workflows.critic2.calcjobs"]], "build_process_type() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.init"]], "inputs (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation attribute)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.metadata"]], "name() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation.savekeys method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.node"]], "on_create() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.on_terminated"]], "options (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.options"]], "out() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out"]], "out_many() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.out_many"]], "parse() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.presubmit"]], "report() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.report"]], "run() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.run"]], "runner (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.set_status"]], "spec() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation class method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.spec_options"]], "submit() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.submit"]], "terminate() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation static method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation property)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.uuid"]], "value() (aim2dat.aiida_workflows.critic2.calcjobs.critic2calculation.savekeys method)": [[29, "aim2dat.aiida_workflows.critic2.calcjobs.Critic2Calculation.SaveKeys.value"]], "aim2dat.aiida_workflows.critic2": [[30, "module-aim2dat.aiida_workflows.critic2"]], "critic2parser (class in aim2dat.aiida_workflows.critic2.parsers)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser"]], "aim2dat.aiida_workflows.critic2.parsers": [[31, "module-aim2dat.aiida_workflows.critic2.parsers"]], "exit_codes (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.exit_codes"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.critic2.parsers.critic2parser method)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.logger"]], "node (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.node"]], "out() (aim2dat.aiida_workflows.critic2.parsers.critic2parser method)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.out"]], "outputs (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.outputs"]], "parse() (aim2dat.aiida_workflows.critic2.parsers.critic2parser method)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.critic2.parsers.critic2parser class method)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.parse_from_node"]], "retrieved (aim2dat.aiida_workflows.critic2.parsers.critic2parser property)": [[31, "aim2dat.aiida_workflows.critic2.parsers.Critic2Parser.retrieved"]], "calc_id (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation.savekeys attribute)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys.CALC_ID"]], "enumlibcalculation (class in aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation"]], "enumlibcalculation.savekeys (class in aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys"]], "single_output_linkname (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation attribute)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SINGLE_OUTPUT_LINKNAME"]], "aim2dat.aiida_workflows.enumlib.enum_calcjob": [[32, "module-aim2dat.aiida_workflows.enumlib.enum_calcjob"]], "build_process_type() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.build_process_type"]], "decode_input_args() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.decode_input_args"]], "define() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.define"]], "encode_input_args() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.encode_input_args"]], "exit_codes() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exit_codes"]], "exposed_inputs() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_inputs"]], "exposed_outputs() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.exposed_outputs"]], "get_builder() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_builder"]], "get_exit_statuses() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_exit_statuses"]], "get_importer() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_importer"]], "get_or_create_db_record() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_or_create_db_record"]], "get_parent_calc() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_parent_calc"]], "get_provenance_inputs_iterator() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_provenance_inputs_iterator"]], "get_state_classes() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.get_state_classes"]], "init() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.init"]], "inputs (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.inputs"]], "is_valid_cache() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.is_valid_cache"]], "kill() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.kill"]], "link_label_retrieved (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation attribute)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.link_label_retrieved"]], "load_instance_state() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.load_instance_state"]], "metadata (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.metadata"]], "name() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation.savekeys method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys.name"]], "node (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.node"]], "on_create() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_create"]], "on_entered() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_entered"]], "on_except() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_except"]], "on_finish() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_finish"]], "on_output_emitting() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_output_emitting"]], "on_paused() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_paused"]], "on_playing() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_playing"]], "on_terminated() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.on_terminated"]], "options (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.options"]], "out() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out"]], "out_many() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.out_many"]], "parse() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse"]], "parse_retrieved_output() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse_retrieved_output"]], "parse_scheduler_output() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.parse_scheduler_output"]], "prepare_for_submission() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.prepare_for_submission"]], "presubmit() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.presubmit"]], "report() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.report"]], "run() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.run"]], "runner (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.runner"]], "save_instance_state() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.save_instance_state"]], "set_status() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.set_status"]], "spec() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation class method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.spec"]], "spec_metadata() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.spec_metadata"]], "spec_options() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.spec_options"]], "submit() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.submit"]], "terminate() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation static method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.terminate"]], "update_outputs() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.update_outputs"]], "uuid (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation property)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.uuid"]], "validate_elements_to_enumerate() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_elements_to_enumerate"]], "validate_inputs() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_inputs"]], "validate_makestr_path() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_makeStr_path"]], "validate_sites_to_enumerate() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_sites_to_enumerate"]], "validate_structure() (in module aim2dat.aiida_workflows.enumlib.enum_calcjob)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.validate_structure"]], "value() (aim2dat.aiida_workflows.enumlib.enum_calcjob.enumlibcalculation.savekeys method)": [[32, "aim2dat.aiida_workflows.enumlib.enum_calcjob.EnumlibCalculation.SaveKeys.value"]], "enumlibparser (class in aim2dat.aiida_workflows.enumlib.enum_parsers)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser"]], "aim2dat.aiida_workflows.enumlib.enum_parsers": [[33, "module-aim2dat.aiida_workflows.enumlib.enum_parsers"]], "exit_codes (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.exit_codes"]], "get_outputs_for_parsing() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.get_outputs_for_parsing"]], "logger (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.logger"]], "node (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.node"]], "out() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.out"]], "outputs (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.outputs"]], "parse() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.parse"]], "parse_from_node() (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser class method)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.parse_from_node"]], "retrieved (aim2dat.aiida_workflows.enumlib.enum_parsers.enumlibparser property)": [[33, "aim2dat.aiida_workflows.enumlib.enum_parsers.EnumlibParser.retrieved"]], "aim2dat.aiida_workflows.enumlib": [[34, "module-aim2dat.aiida_workflows.enumlib"]], "aim2dat.aiida_workflows.enumlib.utils": [[35, "module-aim2dat.aiida_workflows.enumlib.utils"]], "check_kinds() (in module aim2dat.aiida_workflows.enumlib.utils)": [[35, "aim2dat.aiida_workflows.enumlib.utils.check_kinds"]], "get_kindnames() (in module aim2dat.aiida_workflows.enumlib.utils)": [[35, "aim2dat.aiida_workflows.enumlib.utils.get_kindnames"]], "aim2dat.aiida_workflows": [[36, "module-aim2dat.aiida_workflows"]], "aim2dat.aiida_workflows.utils": [[37, "module-aim2dat.aiida_workflows.utils"]], "concatenate_workflow_results() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.concatenate_workflow_results"]], "create_aiida_node() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.create_aiida_node"]], "create_surface_slab() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.create_surface_slab"]], "get_results_cp2k_legacy_wc() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.get_results_cp2k_legacy_wc"]], "obtain_value_from_aiida_node() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.obtain_value_from_aiida_node"]], "seekpath_structure_analysis() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.seekpath_structure_analysis"]], "workflow_queue() (in module aim2dat.aiida_workflows.utils)": [[37, "aim2dat.aiida_workflows.utils.workflow_queue"]], "aiidacode (in module aim2dat.aiida_workflows.workflow_builder)": [[38, "aim2dat.aiida_workflows.workflow_builder.AiidaCode"]], "multipleworkflowbuilder (class in aim2dat.aiida_workflows.workflow_builder)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder"]], "workflowbuilder (class in aim2dat.aiida_workflows.workflow_builder)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder"]], "workflowprotocolerror": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError"]], "workflowprotocolerror.args (class in aim2dat.aiida_workflows.workflow_builder)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError.args"]], "add_parent_node() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.add_parent_node"]], "add_to_task_queue() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.add_to_task_queue"]], "adopt_input_nodes_from_workflow() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.adopt_input_nodes_from_workflow"]], "adopt_input_nodes_from_workflow() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.adopt_input_nodes_from_workflow"]], "aiida_group (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.aiida_group"]], "aiida_group (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.aiida_group"]], "aim2dat.aiida_workflows.workflow_builder": [[38, "module-aim2dat.aiida_workflows.workflow_builder"]], "completed_tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.completed_tasks"]], "determine_workflow_state() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.determine_workflow_state"]], "execute_task_queue() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.execute_task_queue"]], "failed_tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.failed_tasks"]], "from_file() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder class method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.from_file"]], "from_file() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder class method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.from_file"]], "generate_inputs() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.generate_inputs"]], "generate_inputs() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.generate_inputs"]], "generate_provenance_graph() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.generate_provenance_graph"]], "generate_provenance_graph() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.generate_provenance_graph"]], "graph_attributes (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.graph_attributes"]], "import_parent_nodes_from_aiida_db() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.import_parent_nodes_from_aiida_db"]], "import_parent_nodes_from_pandas_df() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.import_parent_nodes_from_pandas_df"]], "parent_node (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.parent_node"]], "protocol (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.protocol"]], "protocol (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.protocol"]], "reset_task_queue() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.reset_task_queue"]], "results (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.results"]], "return_process_nodes() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_process_nodes"]], "return_results() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_results"]], "return_runtimes() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_runtimes"]], "return_workflow_states() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_workflow_states"]], "run_task() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.run_task"]], "run_task() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.run_task"]], "running_tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.running_tasks"]], "set_user_input() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.set_user_input"]], "set_user_input() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.set_user_input"]], "submit_task() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.submit_task"]], "submit_task() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.submit_task"]], "task_queue (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.task_queue"]], "tasks (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.tasks"]], "tasks (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.tasks"]], "to_file() (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.to_file"]], "to_file() (aim2dat.aiida_workflows.workflow_builder.workflowbuilder method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.to_file"]], "use_uuid (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.use_uuid"]], "use_uuid (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.use_uuid"]], "user_input (aim2dat.aiida_workflows.workflow_builder.multipleworkflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.user_input"]], "user_input (aim2dat.aiida_workflows.workflow_builder.workflowbuilder property)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.user_input"]], "with_traceback() (aim2dat.aiida_workflows.workflow_builder.workflowprotocolerror method)": [[38, "aim2dat.aiida_workflows.workflow_builder.WorkflowProtocolError.with_traceback"]], "aim2dat.ext_interfaces.aiida": [[39, "module-aim2dat.ext_interfaces.aiida"]], "aim2dat.ext_interfaces.ase_atoms": [[40, "module-aim2dat.ext_interfaces.ase_atoms"]], "aim2dat.ext_interfaces.ase_surface": [[41, "module-aim2dat.ext_interfaces.ase_surface"]], "aim2dat.ext_interfaces.dscribe": [[42, "module-aim2dat.ext_interfaces.dscribe"]], "calc_acsf_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[42, "aim2dat.ext_interfaces.dscribe.calc_acsf_descriptor"]], "calc_interaction_matrix() (in module aim2dat.ext_interfaces.dscribe)": [[42, "aim2dat.ext_interfaces.dscribe.calc_interaction_matrix"]], "calc_mbtr_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[42, "aim2dat.ext_interfaces.dscribe.calc_mbtr_descriptor"]], "calc_soap_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[42, "aim2dat.ext_interfaces.dscribe.calc_soap_descriptor"]], "return_descriptor() (in module aim2dat.ext_interfaces.dscribe)": [[42, "aim2dat.ext_interfaces.dscribe.return_descriptor"]], "aim2dat.ext_interfaces.graphs": [[43, "module-aim2dat.ext_interfaces.graphs"]], "aim2dat.ext_interfaces.hdf5": [[44, "module-aim2dat.ext_interfaces.hdf5"]], "aim2dat.ext_interfaces.import_opt_dependencies": [[45, "module-aim2dat.ext_interfaces.import_opt_dependencies"]], "aim2dat.ext_interfaces": [[46, "module-aim2dat.ext_interfaces"]], "aim2dat.ext_interfaces.mp": [[47, "module-aim2dat.ext_interfaces.mp"]], "aim2dat.ext_interfaces.mp_openapi": [[48, "module-aim2dat.ext_interfaces.mp_openapi"]], "aim2dat.ext_interfaces.optimade": [[49, "module-aim2dat.ext_interfaces.optimade"]], "aim2dat.ext_interfaces.oqmd": [[50, "module-aim2dat.ext_interfaces.oqmd"]], "aim2dat.ext_interfaces.pandas": [[51, "module-aim2dat.ext_interfaces.pandas"]], "aim2dat.ext_interfaces.phonopy": [[52, "module-aim2dat.ext_interfaces.phonopy"]], "aim2dat.ext_interfaces.pymatgen": [[53, "module-aim2dat.ext_interfaces.pymatgen"]], "nr_of_space_groups (in module aim2dat.ext_interfaces.pyxtal)": [[54, "aim2dat.ext_interfaces.pyxtal.NR_OF_SPACE_GROUPS"]], "space_group_limits (in module aim2dat.ext_interfaces.pyxtal)": [[54, "aim2dat.ext_interfaces.pyxtal.SPACE_GROUP_LIMITS"]], "aim2dat.ext_interfaces.pyxtal": [[54, "module-aim2dat.ext_interfaces.pyxtal"]], "aim2dat.ext_interfaces.seekpath": [[55, "module-aim2dat.ext_interfaces.seekpath"]], "centrosymmetric_pg (in module aim2dat.ext_interfaces.spglib)": [[56, "aim2dat.ext_interfaces.spglib.CENTROSYMMETRIC_PG"]], "aim2dat.ext_interfaces.spglib": [[56, "module-aim2dat.ext_interfaces.spglib"]], "discretizedaxis (class in aim2dat.fct.discretization)": [[57, "aim2dat.fct.discretization.DiscretizedAxis"]], "discretizedgrid (class in aim2dat.fct.discretization)": [[57, "aim2dat.fct.discretization.DiscretizedGrid"]], "t (aim2dat.fct.discretization.discretizedaxis property)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.T"]], "aim2dat.fct.discretization": [[57, "module-aim2dat.fct.discretization"]], "axis (aim2dat.fct.discretization.discretizedaxis property)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.axis"]], "axis_type (aim2dat.fct.discretization.discretizedaxis property)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.axis_type"]], "create_grid() (aim2dat.fct.discretization.discretizedgrid method)": [[57, "aim2dat.fct.discretization.DiscretizedGrid.create_grid"]], "discretization_method (aim2dat.fct.discretization.discretizedaxis property)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.discretization_method"]], "discretize_axis() (aim2dat.fct.discretization.discretizedaxis method)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.discretize_axis"]], "grid (aim2dat.fct.discretization.discretizedgrid property)": [[57, "aim2dat.fct.discretization.DiscretizedGrid.grid"]], "is_empty (aim2dat.fct.discretization.discretizedaxis property)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.is_empty"]], "is_empty (aim2dat.fct.discretization.discretizedgrid property)": [[57, "aim2dat.fct.discretization.DiscretizedGrid.is_empty"]], "limit_array() (in module aim2dat.fct.discretization)": [[57, "aim2dat.fct.discretization.limit_array"]], "plot_grid() (aim2dat.fct.discretization.discretizedgrid method)": [[57, "aim2dat.fct.discretization.DiscretizedGrid.plot_grid"]], "shape (aim2dat.fct.discretization.discretizedaxis property)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.shape"]], "transpose() (aim2dat.fct.discretization.discretizedaxis method)": [[57, "aim2dat.fct.discretization.DiscretizedAxis.transpose"]], "functiondiscretizationfingerprint (class in aim2dat.fct.fingerprint)": [[58, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint"]], "aim2dat.fct.fingerprint": [[58, "module-aim2dat.fct.fingerprint"]], "calculate_fingerprint() (aim2dat.fct.fingerprint.functiondiscretizationfingerprint method)": [[58, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint.calculate_fingerprint"]], "compare_fingerprints() (aim2dat.fct.fingerprint.functiondiscretizationfingerprint method)": [[58, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint.compare_fingerprints"]], "plot_fingerprint() (aim2dat.fct.fingerprint.functiondiscretizationfingerprint method)": [[58, "aim2dat.fct.fingerprint.FunctionDiscretizationFingerprint.plot_fingerprint"]], "functionanalysis (class in aim2dat.fct.function_comparison)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis"]], "aim2dat.fct.function_comparison": [[59, "module-aim2dat.fct.function_comparison"]], "allowed_distance_methods (aim2dat.fct.function_comparison.functionanalysis property)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.allowed_distance_methods"]], "calculate_correlation() (aim2dat.fct.function_comparison.functionanalysis method)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.calculate_correlation"]], "calculate_discrete_fingerprint() (aim2dat.fct.function_comparison.functionanalysis method)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.calculate_discrete_fingerprint"]], "calculate_distance() (aim2dat.fct.function_comparison.functionanalysis method)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.calculate_distance"]], "compare_areas() (aim2dat.fct.function_comparison.functionanalysis method)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.compare_areas"]], "compare_functions_by_discrete_fingerprint() (aim2dat.fct.function_comparison.functionanalysis method)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.compare_functions_by_discrete_fingerprint"]], "import_data() (aim2dat.fct.function_comparison.functionanalysis method)": [[59, "aim2dat.fct.function_comparison.FunctionAnalysis.import_data"]], "aim2dat.fct.hull": [[60, "module-aim2dat.fct.hull"]], "get_convex_hull() (in module aim2dat.fct.hull)": [[60, "aim2dat.fct.hull.get_convex_hull"]], "get_minimum_maximum_points() (in module aim2dat.fct.hull)": [[60, "aim2dat.fct.hull.get_minimum_maximum_points"]], "discretizedaxis (class in aim2dat.fct)": [[61, "aim2dat.fct.DiscretizedAxis"]], "discretizedgrid (class in aim2dat.fct)": [[61, "aim2dat.fct.DiscretizedGrid"]], "functionanalysis (class in aim2dat.fct)": [[61, "aim2dat.fct.FunctionAnalysis"]], "functiondiscretizationfingerprint (class in aim2dat.fct)": [[61, "aim2dat.fct.FunctionDiscretizationFingerprint"]], "t (aim2dat.fct.discretizedaxis property)": [[61, "aim2dat.fct.DiscretizedAxis.T"]], "aim2dat.fct": [[61, "module-aim2dat.fct"]], "allowed_distance_methods (aim2dat.fct.functionanalysis property)": [[61, "aim2dat.fct.FunctionAnalysis.allowed_distance_methods"]], "axis (aim2dat.fct.discretizedaxis property)": [[61, "aim2dat.fct.DiscretizedAxis.axis"]], "axis_type (aim2dat.fct.discretizedaxis property)": [[61, "aim2dat.fct.DiscretizedAxis.axis_type"]], "calculate_correlation() (aim2dat.fct.functionanalysis method)": [[61, "aim2dat.fct.FunctionAnalysis.calculate_correlation"]], "calculate_discrete_fingerprint() (aim2dat.fct.functionanalysis method)": [[61, "aim2dat.fct.FunctionAnalysis.calculate_discrete_fingerprint"]], "calculate_distance() (aim2dat.fct.functionanalysis method)": [[61, "aim2dat.fct.FunctionAnalysis.calculate_distance"]], "calculate_fingerprint() (aim2dat.fct.functiondiscretizationfingerprint method)": [[61, "aim2dat.fct.FunctionDiscretizationFingerprint.calculate_fingerprint"]], "compare_areas() (aim2dat.fct.functionanalysis method)": [[61, "aim2dat.fct.FunctionAnalysis.compare_areas"]], "compare_fingerprints() (aim2dat.fct.functiondiscretizationfingerprint method)": [[61, "aim2dat.fct.FunctionDiscretizationFingerprint.compare_fingerprints"]], "compare_functions_by_discrete_fingerprint() (aim2dat.fct.functionanalysis method)": [[61, "aim2dat.fct.FunctionAnalysis.compare_functions_by_discrete_fingerprint"]], "create_grid() (aim2dat.fct.discretizedgrid method)": [[61, "aim2dat.fct.DiscretizedGrid.create_grid"]], "discretization_method (aim2dat.fct.discretizedaxis property)": [[61, "aim2dat.fct.DiscretizedAxis.discretization_method"]], "discretize_axis() (aim2dat.fct.discretizedaxis method)": [[61, "aim2dat.fct.DiscretizedAxis.discretize_axis"]], "grid (aim2dat.fct.discretizedgrid property)": [[61, "aim2dat.fct.DiscretizedGrid.grid"]], "import_data() (aim2dat.fct.functionanalysis method)": [[61, "aim2dat.fct.FunctionAnalysis.import_data"]], "is_empty (aim2dat.fct.discretizedaxis property)": [[61, "aim2dat.fct.DiscretizedAxis.is_empty"]], "is_empty (aim2dat.fct.discretizedgrid property)": [[61, "aim2dat.fct.DiscretizedGrid.is_empty"]], "plot_fingerprint() (aim2dat.fct.functiondiscretizationfingerprint method)": [[61, "aim2dat.fct.FunctionDiscretizationFingerprint.plot_fingerprint"]], "plot_grid() (aim2dat.fct.discretizedgrid method)": [[61, "aim2dat.fct.DiscretizedGrid.plot_grid"]], "shape (aim2dat.fct.discretizedaxis property)": [[61, "aim2dat.fct.DiscretizedAxis.shape"]], "transpose() (aim2dat.fct.discretizedaxis method)": [[61, "aim2dat.fct.DiscretizedAxis.transpose"]], "available_smearing_methods (in module aim2dat.fct.smearing)": [[62, "aim2dat.fct.smearing.AVAILABLE_SMEARING_METHODS"]], "aim2dat.fct.smearing": [[62, "module-aim2dat.fct.smearing"]], "apply_smearing() (in module aim2dat.fct.smearing)": [[62, "aim2dat.fct.smearing.apply_smearing"]], "aim2dat": [[63, "module-aim2dat"]], "aim2dat.io.cif": [[64, "module-aim2dat.io.cif"]], "read_file() (in module aim2dat.io.cif)": [[64, "aim2dat.io.cif.read_file"]], "aim2dat.io.cp2k.bands_dos": [[65, "module-aim2dat.io.cp2k.bands_dos"]], "read_atom_proj_density_of_states() (in module aim2dat.io.cp2k.bands_dos)": [[65, "aim2dat.io.cp2k.bands_dos.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.cp2k.bands_dos)": [[65, "aim2dat.io.cp2k.bands_dos.read_band_structure"]], "aim2dat.io.cp2k": [[66, "module-aim2dat.io.cp2k"]], "read_atom_proj_density_of_states() (in module aim2dat.io.cp2k)": [[66, "aim2dat.io.cp2k.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.cp2k)": [[66, "aim2dat.io.cp2k.read_band_structure"]], "read_optimized_structure() (in module aim2dat.io.cp2k)": [[66, "aim2dat.io.cp2k.read_optimized_structure"]], "read_restart_structure() (in module aim2dat.io.cp2k)": [[66, "aim2dat.io.cp2k.read_restart_structure"]], "read_stdout() (in module aim2dat.io.cp2k)": [[66, "aim2dat.io.cp2k.read_stdout"]], "aim2dat.io.cp2k.restart": [[67, "module-aim2dat.io.cp2k.restart"]], "read_optimized_structure() (in module aim2dat.io.cp2k.restart)": [[67, "aim2dat.io.cp2k.restart.read_optimized_structure"]], "read_restart_structure() (in module aim2dat.io.cp2k.restart)": [[67, "aim2dat.io.cp2k.restart.read_restart_structure"]], "aim2dat.io.cp2k.stdout": [[68, "module-aim2dat.io.cp2k.stdout"]], "read_stdout() (in module aim2dat.io.cp2k.stdout)": [[68, "aim2dat.io.cp2k.stdout.read_stdout"]], "aim2dat.io.critic2": [[69, "module-aim2dat.io.critic2"]], "read_plane() (in module aim2dat.io.critic2)": [[69, "aim2dat.io.critic2.read_plane"]], "read_stdout() (in module aim2dat.io.critic2)": [[69, "aim2dat.io.critic2.read_stdout"]], "aim2dat.io.fhi_aims": [[70, "module-aim2dat.io.fhi_aims"]], "read_atom_proj_density_of_states() (in module aim2dat.io.fhi_aims)": [[70, "aim2dat.io.fhi_aims.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.fhi_aims)": [[70, "aim2dat.io.fhi_aims.read_band_structure"]], "read_total_density_of_states() (in module aim2dat.io.fhi_aims)": [[70, "aim2dat.io.fhi_aims.read_total_density_of_states"]], "aim2dat.io": [[71, "module-aim2dat.io"]], "aim2dat.io.phonopy": [[72, "module-aim2dat.io.phonopy"]], "read_atom_proj_density_of_states() (in module aim2dat.io.phonopy)": [[72, "aim2dat.io.phonopy.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.phonopy)": [[72, "aim2dat.io.phonopy.read_band_structure"]], "read_qha_properties() (in module aim2dat.io.phonopy)": [[72, "aim2dat.io.phonopy.read_qha_properties"]], "read_thermal_properties() (in module aim2dat.io.phonopy)": [[72, "aim2dat.io.phonopy.read_thermal_properties"]], "read_total_density_of_states() (in module aim2dat.io.phonopy)": [[72, "aim2dat.io.phonopy.read_total_density_of_states"]], "aim2dat.io.qe": [[73, "module-aim2dat.io.qe"]], "read_atom_proj_density_of_states() (in module aim2dat.io.qe)": [[73, "aim2dat.io.qe.read_atom_proj_density_of_states"]], "read_band_structure() (in module aim2dat.io.qe)": [[73, "aim2dat.io.qe.read_band_structure"]], "read_input_structure() (in module aim2dat.io.qe)": [[73, "aim2dat.io.qe.read_input_structure"]], "read_total_density_of_states() (in module aim2dat.io.qe)": [[73, "aim2dat.io.qe.read_total_density_of_states"]], "aim2dat.io.utils": [[74, "module-aim2dat.io.utils"]], "custom_open() (in module aim2dat.io.utils)": [[74, "aim2dat.io.utils.custom_open"]], "read_multiple() (in module aim2dat.io.utils)": [[74, "aim2dat.io.utils.read_multiple"]], "read_structure() (in module aim2dat.io.utils)": [[74, "aim2dat.io.utils.read_structure"]], "aim2dat.io.xmgrace": [[75, "module-aim2dat.io.xmgrace"]], "read_band_structure() (in module aim2dat.io.xmgrace)": [[75, "aim2dat.io.xmgrace.read_band_structure"]], "read_xmgrace_file() (in module aim2dat.io.xmgrace)": [[75, "aim2dat.io.xmgrace.read_xmgrace_file"]], "aim2dat.io.yaml": [[76, "module-aim2dat.io.yaml"]], "load_yaml_file() (in module aim2dat.io.yaml)": [[76, "aim2dat.io.yaml.load_yaml_file"]], "store_in_yaml_file() (in module aim2dat.io.yaml)": [[76, "aim2dat.io.yaml.store_in_yaml_file"]], "aim2dat.io.zeo": [[77, "module-aim2dat.io.zeo"]], "write_to_file() (in module aim2dat.io.zeo)": [[77, "aim2dat.io.zeo.write_to_file"]], "cellgridsearch (class in aim2dat.ml.cell_grid_search)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch"]], "aim2dat.ml.cell_grid_search": [[78, "module-aim2dat.ml.cell_grid_search"]], "fit() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.fit"]], "get_optimized_structure() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.get_optimized_structure"]], "return_initial_score() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.return_initial_score"]], "return_search_space() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.return_search_space"]], "set_initial_structure() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.set_initial_structure"]], "set_model() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.set_model"]], "set_target_structure() (aim2dat.ml.cell_grid_search.cellgridsearch method)": [[78, "aim2dat.ml.cell_grid_search.CellGridSearch.set_target_structure"]], "aim2dat.ml": [[79, "module-aim2dat.ml"]], "aim2dat.ml.kernels": [[80, "module-aim2dat.ml.kernels"]], "krr_ffprint_cosine() (in module aim2dat.ml.kernels)": [[80, "aim2dat.ml.kernels.krr_ffprint_cosine"]], "krr_ffprint_laplace() (in module aim2dat.ml.kernels)": [[80, "aim2dat.ml.kernels.krr_ffprint_laplace"]], "aim2dat.ml.metrics": [[81, "module-aim2dat.ml.metrics"]], "ffprint_cosine() (in module aim2dat.ml.metrics)": [[81, "aim2dat.ml.metrics.ffprint_cosine"]], "structureacsftransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer"]], "structurechemordertransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer"]], "structurecompositiontransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer"]], "structurecoordinationtransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer"]], "structuredensitytransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer"]], "structureffprinttransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer"]], "structurembtrtransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer"]], "structurematrixtransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer"]], "structureprdftransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer"]], "structuresoaptransformer (class in aim2dat.ml.transformers)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer"]], "add_precomputed_properties() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.add_precomputed_properties"]], "add_precomputed_properties() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.add_precomputed_properties"]], "aim2dat.ml.transformers": [[82, "module-aim2dat.ml.transformers"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.clear_precomputed_properties"]], "clear_precomputed_properties() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.clear_precomputed_properties"]], "feature_types (aim2dat.ml.transformers.structurecoordinationtransformer property)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.feature_types"]], "fit() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.fit"]], "fit() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.fit"]], "fit() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.fit"]], "fit() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.fit"]], "fit() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.fit"]], "fit() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.fit"]], "fit_transform() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.fit_transform"]], "fit_transform() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.fit_transform"]], "get_feature_names_out() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.get_feature_names_out"]], "get_feature_names_out() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.get_feature_names_out"]], "get_metadata_routing() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.get_metadata_routing"]], "get_metadata_routing() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.get_metadata_routing"]], "get_params() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.get_params"]], "get_params() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.get_params"]], "precompute_parameter_space() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.precompute_parameter_space"]], "precompute_parameter_space() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.precompute_parameter_space"]], "precomputed_properties (aim2dat.ml.transformers.structureacsftransformer property)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurechemordertransformer property)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurecompositiontransformer property)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurecoordinationtransformer property)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structuredensitytransformer property)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structureffprinttransformer property)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurembtrtransformer property)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structurematrixtransformer property)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structureprdftransformer property)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.precomputed_properties"]], "precomputed_properties (aim2dat.ml.transformers.structuresoaptransformer property)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.precomputed_properties"]], "set_output() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.set_output"]], "set_output() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.set_output"]], "set_params() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.set_params"]], "set_params() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.set_params"]], "transform() (aim2dat.ml.transformers.structureacsftransformer method)": [[82, "aim2dat.ml.transformers.StructureACSFTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurechemordertransformer method)": [[82, "aim2dat.ml.transformers.StructureChemOrderTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurecompositiontransformer method)": [[82, "aim2dat.ml.transformers.StructureCompositionTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurecoordinationtransformer method)": [[82, "aim2dat.ml.transformers.StructureCoordinationTransformer.transform"]], "transform() (aim2dat.ml.transformers.structuredensitytransformer method)": [[82, "aim2dat.ml.transformers.StructureDensityTransformer.transform"]], "transform() (aim2dat.ml.transformers.structureffprinttransformer method)": [[82, "aim2dat.ml.transformers.StructureFFPrintTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurembtrtransformer method)": [[82, "aim2dat.ml.transformers.StructureMBTRTransformer.transform"]], "transform() (aim2dat.ml.transformers.structurematrixtransformer method)": [[82, "aim2dat.ml.transformers.StructureMatrixTransformer.transform"]], "transform() (aim2dat.ml.transformers.structureprdftransformer method)": [[82, "aim2dat.ml.transformers.StructurePRDFTransformer.transform"]], "transform() (aim2dat.ml.transformers.structuresoaptransformer method)": [[82, "aim2dat.ml.transformers.StructureSOAPTransformer.transform"]], "aim2dat.ml.utils": [[83, "module-aim2dat.ml.utils"]], "train_test_split_crystals() (in module aim2dat.ml.utils)": [[83, "aim2dat.ml.utils.train_test_split_crystals"]], "bandstructure() (in module aim2dat.plots.band_structure_dos)": [[84, "aim2dat.plots.band_structure_dos.BandStructure"]], "bandstructuredosplot (class in aim2dat.plots.band_structure_dos)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot"]], "bandstructuredensityofstates() (in module aim2dat.plots.band_structure_dos)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDensityOfStates"]], "bandstructureplot (class in aim2dat.plots.band_structure_dos)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot"]], "dosplot (class in aim2dat.plots.band_structure_dos)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot"]], "densityofstates() (in module aim2dat.plots.band_structure_dos)": [[84, "aim2dat.plots.band_structure_dos.DensityOfStates"]], "add_hline() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.add_hline"]], "add_hline() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.add_hline"]], "add_vline() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.add_vline"]], "add_vline() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.add_vline"]], "add_vline() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.add_vline"]], "aim2dat.plots.band_structure_dos": [[84, "module-aim2dat.plots.band_structure_dos"]], "analyse_band() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.analyse_band"]], "analyse_band() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.analyse_band"]], "auto_set_axis_properties() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.backend"]], "backend (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.backend"]], "backend (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.backend"]], "calculate_band_gap() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_band_gap"]], "calculate_band_gap() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_band_gap"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_energy_diff_at_kpoint"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_energy_diff_at_kpoint"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.calculate_smallest_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.calculate_smallest_energy_diff"]], "create_default_gridspec() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_alpha"]], "custom_colors (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_colors"]], "custom_colors (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_colors"]], "custom_colors (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_markers"]], "custom_markers (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_markers"]], "custom_markers (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.custom_yticks"]], "data_labels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.data_labels"]], "data_labels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.data_labels"]], "data_labels (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.equal_aspect_ratio"]], "import_band_structure() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_band_structure"]], "import_band_structure() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.import_band_structure"]], "import_from_aiida_bandsdata() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_from_aiida_bandsdata"]], "import_from_aiida_bandsdata() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.import_from_aiida_bandsdata"]], "import_from_aiida_xydata() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_from_aiida_xydata"]], "import_from_aiida_xydata() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.import_from_aiida_xydata"]], "import_projected_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_projected_dos"]], "import_projected_dos() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.import_projected_dos"]], "import_total_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.import_total_dos"]], "import_total_dos() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.import_total_dos"]], "legend_bbox_to_anchor (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_loc"]], "legend_loc (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_loc"]], "legend_loc (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.legend_loc"]], "legend_ncol (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.legend_sort_entries"]], "pdos_plot_type (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.pdos_plot_type"]], "pdos_plot_type (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.pdos_plot_type"]], "plot() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.plot"]], "plot() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.plot"]], "plot() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.plot"]], "plot_grid (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.plot_grid"]], "plot_grid (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.plot_grid"]], "plot_grid (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.plot_grid"]], "ratio (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.ratio"]], "ratio (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.ratio"]], "ratio (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.return_data_labels"]], "set_reference_cell() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.set_reference_cell"]], "set_reference_cell() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.set_reference_cell"]], "shift_bands() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_bands"]], "shift_bands() (aim2dat.plots.band_structure_dos.bandstructureplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.shift_bands"]], "shift_bands_and_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_bands_and_dos"]], "shift_bands_and_dos_to_vbm() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_bands_and_dos_to_vbm"]], "shift_dos() (aim2dat.plots.band_structure_dos.bandstructuredosplot method)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.shift_dos"]], "shift_dos() (aim2dat.plots.band_structure_dos.dosplot method)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.shift_dos"]], "show_colorbar (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.show_colorbar"]], "show_grid (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_grid"]], "show_grid (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_grid"]], "show_grid (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.show_grid"]], "show_legend (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_legend"]], "show_legend (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_legend"]], "show_legend (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.show_legend"]], "show_plot (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.show_plot"]], "show_plot (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.show_plot"]], "show_plot (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.show_plot"]], "smearing_delta (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.smearing_delta"]], "smearing_delta (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.smearing_delta"]], "smearing_method (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.smearing_method"]], "smearing_method (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.smearing_method"]], "smearing_sigma (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.smearing_sigma"]], "smearing_sigma (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.smearing_sigma"]], "store_path (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.store_path"]], "store_path (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.store_path"]], "store_path (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.store_path"]], "store_plot (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.store_plot"]], "store_plot (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.store_plot"]], "store_plot (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.store_plot"]], "style_sheet (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.style_sheet"]], "style_sheet (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.style_sheet"]], "style_sheet (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.subplot_wspace"]], "tdos_plot_type (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.tdos_plot_type"]], "tdos_plot_type (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.tdos_plot_type"]], "x_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.x_label"]], "x_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.x_label"]], "x_label (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.x_label"]], "x_range (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.x_range"]], "x_range (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.x_range"]], "x_range (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.x_range"]], "y_label (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.y_label"]], "y_label (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.y_label"]], "y_label (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.y_label"]], "y_range (aim2dat.plots.band_structure_dos.bandstructuredosplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructureDOSPlot.y_range"]], "y_range (aim2dat.plots.band_structure_dos.bandstructureplot property)": [[84, "aim2dat.plots.band_structure_dos.BandStructurePlot.y_range"]], "y_range (aim2dat.plots.band_structure_dos.dosplot property)": [[84, "aim2dat.plots.band_structure_dos.DOSPlot.y_range"]], "bandstructure() (in module aim2dat.plots)": [[85, "aim2dat.plots.BandStructure"]], "bandstructuredosplot (class in aim2dat.plots)": [[85, "aim2dat.plots.BandStructureDOSPlot"]], "bandstructuredensityofstates() (in module aim2dat.plots)": [[85, "aim2dat.plots.BandStructureDensityOfStates"]], "bandstructureplot (class in aim2dat.plots)": [[85, "aim2dat.plots.BandStructurePlot"]], "dosplot (class in aim2dat.plots)": [[85, "aim2dat.plots.DOSPlot"]], "densityofstates() (in module aim2dat.plots)": [[85, "aim2dat.plots.DensityOfStates"]], "partialchargesplot (class in aim2dat.plots)": [[85, "aim2dat.plots.PartialChargesPlot"]], "partialrdfplot (class in aim2dat.plots)": [[85, "aim2dat.plots.PartialRDFPlot"]], "phasediagram() (in module aim2dat.plots)": [[85, "aim2dat.plots.PhaseDiagram"]], "phaseplot (class in aim2dat.plots)": [[85, "aim2dat.plots.PhasePlot"]], "planarfieldplot (class in aim2dat.plots)": [[85, "aim2dat.plots.PlanarFieldPlot"]], "simpleplot (class in aim2dat.plots)": [[85, "aim2dat.plots.SimplePlot"]], "spectrum() (in module aim2dat.plots)": [[85, "aim2dat.plots.Spectrum"]], "spectrumplot (class in aim2dat.plots)": [[85, "aim2dat.plots.SpectrumPlot"]], "surfaceplot (class in aim2dat.plots)": [[85, "aim2dat.plots.SurfacePlot"]], "add_data_point() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.add_data_point"]], "add_hline() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.add_hline"]], "add_hline() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.add_hline"]], "add_hline() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.add_hline"]], "add_surface_facet() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.add_surface_facet"]], "add_vline() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.add_vline"]], "add_vline() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.add_vline"]], "add_vline() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.add_vline"]], "add_vline() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.add_vline"]], "add_vline() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.add_vline"]], "aim2dat.plots": [[85, "module-aim2dat.plots"]], "analyse_band() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.analyse_band"]], "analyse_band() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.analyse_band"]], "area_unit (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.area_unit"]], "auto_set_axis_properties() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.partialrdfplot method)": [[85, "aim2dat.plots.PartialRDFPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.backend"]], "backend (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.backend"]], "backend (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.backend"]], "backend (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.backend"]], "backend (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.backend"]], "backend (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.backend"]], "backend (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.backend"]], "backend (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.backend"]], "backend (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.backend"]], "backend (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.backend"]], "bulk_phase (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.bulk_phase"]], "calculate_band_gap() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.calculate_band_gap"]], "calculate_band_gap() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.calculate_band_gap"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.calculate_energy_diff_at_kpoint"]], "calculate_energy_diff_at_kpoint() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.calculate_energy_diff_at_kpoint"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_direct_energy_diff() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.calculate_smallest_direct_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.calculate_smallest_energy_diff"]], "calculate_smallest_energy_diff() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.calculate_smallest_energy_diff"]], "coordinates_unit (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.coordinates_unit"]], "create_default_gridspec() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.partialrdfplot method)": [[85, "aim2dat.plots.PartialRDFPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_alpha"]], "custom_alpha (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_alpha"]], "custom_colors (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_colors"]], "custom_colors (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_colors"]], "custom_colors (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_colors"]], "custom_colors (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_colors"]], "custom_colors (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_colors"]], "custom_colors (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_colors"]], "custom_colors (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_colors"]], "custom_colors (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_colors"]], "custom_colors (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_colors"]], "custom_colors (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_markers"]], "custom_markers (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_markers"]], "custom_markers (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_markers"]], "custom_markers (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_markers"]], "custom_markers (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_markers"]], "custom_markers (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_markers"]], "custom_markers (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_markers"]], "custom_markers (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_markers"]], "custom_markers (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_markers"]], "custom_markers (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_xticks"]], "custom_xticks (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.custom_yticks"]], "custom_yticks (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.custom_yticks"]], "data_labels (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.data_labels"]], "data_labels (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.data_labels"]], "data_labels (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.data_labels"]], "data_labels (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.data_labels"]], "data_labels (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.data_labels"]], "data_labels (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.data_labels"]], "data_labels (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.data_labels"]], "data_labels (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.data_labels"]], "data_labels (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.data_labels"]], "data_labels (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.data_labels"]], "elemental_phases (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.elemental_phases"]], "elements (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.elements"]], "energy_unit (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.energy_unit"]], "equal_aspect_ratio (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.equal_aspect_ratio"]], "import_band_structure() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.import_band_structure"]], "import_band_structure() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.import_band_structure"]], "import_bar_data_set() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.import_bar_data_set"]], "import_ffingerprint() (aim2dat.plots.partialrdfplot method)": [[85, "aim2dat.plots.PartialRDFPlot.import_ffingerprint"]], "import_field() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.import_field"]], "import_from_aiida_arraydata() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.import_from_aiida_arraydata"]], "import_from_aiida_bandsdata() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.import_from_aiida_bandsdata"]], "import_from_aiida_bandsdata() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.import_from_aiida_bandsdata"]], "import_from_aiida_list() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.import_from_aiida_list"]], "import_from_aiida_xydata() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.import_from_aiida_xydata"]], "import_from_aiida_xydata() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.import_from_aiida_xydata"]], "import_from_pandas_df() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.import_from_pandas_df"]], "import_from_pandas_df() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.import_from_pandas_df"]], "import_from_structure_collection() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.import_from_structure_collection"]], "import_partial_charges() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.import_partial_charges"]], "import_projected_dos() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.import_projected_dos"]], "import_projected_dos() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.import_projected_dos"]], "import_scatter_data_set() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.import_scatter_data_set"]], "import_spectrum() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.import_spectrum"]], "import_total_dos() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.import_total_dos"]], "import_total_dos() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.import_total_dos"]], "legend_bbox_to_anchor (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.legend_loc"]], "legend_loc (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.legend_loc"]], "legend_loc (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.legend_loc"]], "legend_loc (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.legend_loc"]], "legend_loc (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.legend_loc"]], "legend_loc (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.legend_loc"]], "legend_loc (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.legend_loc"]], "legend_loc (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.legend_loc"]], "legend_loc (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.legend_loc"]], "legend_loc (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.legend_loc"]], "legend_ncol (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.legend_ncol"]], "legend_ncol (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.legend_sort_entries"]], "norm (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.norm"]], "pc_plot_order (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.pc_plot_order"]], "pc_plot_type (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.pc_plot_type"]], "pdos_plot_type (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.pdos_plot_type"]], "pdos_plot_type (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.pdos_plot_type"]], "peak_color (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_color"]], "peak_distance (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_distance"]], "peak_height (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_height"]], "peak_line_style (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_line_style"]], "peak_max_factor (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_max_factor"]], "peak_plateau_size (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_plateau_size"]], "peak_prominence (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_prominence"]], "peak_rel_height (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_rel_height"]], "peak_threshold (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_threshold"]], "peak_width (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_width"]], "peak_wlen (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_wlen"]], "peak_y_min (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peak_y_min"]], "peaks (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.peaks"]], "plot() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.plot"]], "plot() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.plot"]], "plot() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.plot"]], "plot() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.plot"]], "plot() (aim2dat.plots.partialrdfplot method)": [[85, "aim2dat.plots.PartialRDFPlot.plot"]], "plot() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.plot"]], "plot() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.plot"]], "plot() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.plot"]], "plot() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.plot"]], "plot() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.plot"]], "plot_grid (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.plot_grid"]], "plot_grid (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.plot_grid"]], "plot_grid (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.plot_grid"]], "plot_grid (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.plot_grid"]], "plot_grid (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.plot_grid"]], "plot_grid (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.plot_grid"]], "plot_grid (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.plot_grid"]], "plot_grid (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.plot_grid"]], "plot_grid (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.plot_grid"]], "plot_grid (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.plot_grid"]], "plot_properties (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.plot_properties"]], "plot_type (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.plot_type"]], "plot_type (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.plot_type"]], "plot_type (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.plot_type"]], "plot_unit_x (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.plot_unit_x"]], "ratio (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.ratio"]], "ratio (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.ratio"]], "ratio (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.ratio"]], "ratio (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.ratio"]], "ratio (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.ratio"]], "ratio (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.ratio"]], "ratio (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.ratio"]], "ratio (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.ratio"]], "ratio (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.ratio"]], "ratio (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.remove_additional_plot_elements"]], "remove_additional_plot_elements() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.partialrdfplot method)": [[85, "aim2dat.plots.PartialRDFPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.partialchargesplot method)": [[85, "aim2dat.plots.PartialChargesPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.partialrdfplot method)": [[85, "aim2dat.plots.PartialRDFPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.phaseplot method)": [[85, "aim2dat.plots.PhasePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.planarfieldplot method)": [[85, "aim2dat.plots.PlanarFieldPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.simpleplot method)": [[85, "aim2dat.plots.SimplePlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.spectrumplot method)": [[85, "aim2dat.plots.SpectrumPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.return_data_labels"]], "set_bulk_phase() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.set_bulk_phase"]], "set_elemental_phase() (aim2dat.plots.surfaceplot method)": [[85, "aim2dat.plots.SurfacePlot.set_elemental_phase"]], "set_reference_cell() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.set_reference_cell"]], "set_reference_cell() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.set_reference_cell"]], "shift_bands() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.shift_bands"]], "shift_bands() (aim2dat.plots.bandstructureplot method)": [[85, "aim2dat.plots.BandStructurePlot.shift_bands"]], "shift_bands_and_dos() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.shift_bands_and_dos"]], "shift_bands_and_dos_to_vbm() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.shift_bands_and_dos_to_vbm"]], "shift_dos() (aim2dat.plots.bandstructuredosplot method)": [[85, "aim2dat.plots.BandStructureDOSPlot.shift_dos"]], "shift_dos() (aim2dat.plots.dosplot method)": [[85, "aim2dat.plots.DOSPlot.shift_dos"]], "show_colorbar (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.show_colorbar"]], "show_colorbar (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.show_colorbar"]], "show_crystal_system (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.show_crystal_system"]], "show_grid (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.show_grid"]], "show_grid (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.show_grid"]], "show_grid (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.show_grid"]], "show_grid (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.show_grid"]], "show_grid (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.show_grid"]], "show_grid (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.show_grid"]], "show_grid (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.show_grid"]], "show_grid (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.show_grid"]], "show_grid (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.show_grid"]], "show_grid (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.show_grid"]], "show_legend (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.show_legend"]], "show_legend (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.show_legend"]], "show_legend (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.show_legend"]], "show_legend (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.show_legend"]], "show_legend (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.show_legend"]], "show_legend (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.show_legend"]], "show_legend (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.show_legend"]], "show_legend (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.show_legend"]], "show_legend (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.show_legend"]], "show_legend (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.show_legend"]], "show_plot (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.show_plot"]], "show_plot (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.show_plot"]], "show_plot (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.show_plot"]], "show_plot (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.show_plot"]], "show_plot (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.show_plot"]], "show_plot (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.show_plot"]], "show_plot (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.show_plot"]], "show_plot (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.show_plot"]], "show_plot (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.show_plot"]], "show_plot (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.show_plot"]], "smearing_delta (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.smearing_delta"]], "smearing_delta (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.smearing_delta"]], "smearing_delta (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.smearing_delta"]], "smearing_method (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.smearing_method"]], "smearing_method (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.smearing_method"]], "smearing_method (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.smearing_method"]], "smearing_sigma (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.smearing_sigma"]], "smearing_sigma (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.smearing_sigma"]], "smearing_sigma (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.smearing_sigma"]], "store_path (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.store_path"]], "store_path (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.store_path"]], "store_path (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.store_path"]], "store_path (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.store_path"]], "store_path (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.store_path"]], "store_path (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.store_path"]], "store_path (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.store_path"]], "store_path (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.store_path"]], "store_path (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.store_path"]], "store_path (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.store_path"]], "store_plot (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.store_plot"]], "store_plot (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.store_plot"]], "store_plot (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.store_plot"]], "store_plot (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.store_plot"]], "store_plot (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.store_plot"]], "store_plot (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.store_plot"]], "store_plot (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.store_plot"]], "store_plot (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.store_plot"]], "store_plot (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.store_plot"]], "store_plot (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.store_plot"]], "style_sheet (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.style_sheet"]], "style_sheet (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.style_sheet"]], "style_sheet (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.style_sheet"]], "style_sheet (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.style_sheet"]], "style_sheet (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.style_sheet"]], "style_sheet (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.style_sheet"]], "style_sheet (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.style_sheet"]], "style_sheet (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.style_sheet"]], "style_sheet (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.style_sheet"]], "style_sheet (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.subplot_wspace"]], "tdos_plot_type (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.tdos_plot_type"]], "tdos_plot_type (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.tdos_plot_type"]], "top_labels (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.top_labels"]], "values_unit (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.values_unit"]], "x_label (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.x_label"]], "x_label (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.x_label"]], "x_label (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.x_label"]], "x_label (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.x_label"]], "x_label (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.x_label"]], "x_label (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.x_label"]], "x_label (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.x_label"]], "x_label (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.x_label"]], "x_label (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.x_label"]], "x_label (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.x_label"]], "x_range (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.x_range"]], "x_range (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.x_range"]], "x_range (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.x_range"]], "x_range (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.x_range"]], "x_range (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.x_range"]], "x_range (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.x_range"]], "x_range (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.x_range"]], "x_range (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.x_range"]], "x_range (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.x_range"]], "x_range (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.x_range"]], "x_unit (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.x_unit"]], "y_label (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.y_label"]], "y_label (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.y_label"]], "y_label (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.y_label"]], "y_label (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.y_label"]], "y_label (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.y_label"]], "y_label (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.y_label"]], "y_label (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.y_label"]], "y_label (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.y_label"]], "y_label (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.y_label"]], "y_label (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.y_label"]], "y_range (aim2dat.plots.bandstructuredosplot property)": [[85, "aim2dat.plots.BandStructureDOSPlot.y_range"]], "y_range (aim2dat.plots.bandstructureplot property)": [[85, "aim2dat.plots.BandStructurePlot.y_range"]], "y_range (aim2dat.plots.dosplot property)": [[85, "aim2dat.plots.DOSPlot.y_range"]], "y_range (aim2dat.plots.partialchargesplot property)": [[85, "aim2dat.plots.PartialChargesPlot.y_range"]], "y_range (aim2dat.plots.partialrdfplot property)": [[85, "aim2dat.plots.PartialRDFPlot.y_range"]], "y_range (aim2dat.plots.phaseplot property)": [[85, "aim2dat.plots.PhasePlot.y_range"]], "y_range (aim2dat.plots.planarfieldplot property)": [[85, "aim2dat.plots.PlanarFieldPlot.y_range"]], "y_range (aim2dat.plots.simpleplot property)": [[85, "aim2dat.plots.SimplePlot.y_range"]], "y_range (aim2dat.plots.spectrumplot property)": [[85, "aim2dat.plots.SpectrumPlot.y_range"]], "y_range (aim2dat.plots.surfaceplot property)": [[85, "aim2dat.plots.SurfacePlot.y_range"]], "partialchargesplot (class in aim2dat.plots.partial_charges)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot"]], "aim2dat.plots.partial_charges": [[86, "module-aim2dat.plots.partial_charges"]], "auto_set_axis_properties() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.backend"]], "create_default_gridspec() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_alpha"]], "custom_colors (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.custom_yticks"]], "data_labels (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.equal_aspect_ratio"]], "import_from_aiida_list() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.import_from_aiida_list"]], "import_partial_charges() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.import_partial_charges"]], "legend_bbox_to_anchor (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_loc"]], "legend_ncol (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.legend_sort_entries"]], "pc_plot_order (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.pc_plot_order"]], "pc_plot_type (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.pc_plot_type"]], "plot() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.plot"]], "plot_grid (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.plot_grid"]], "ratio (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.ratio"]], "reset_gridspec() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.partial_charges.partialchargesplot method)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.show_colorbar"]], "show_grid (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.show_grid"]], "show_legend (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.show_legend"]], "show_plot (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.show_plot"]], "store_path (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.store_path"]], "store_plot (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.store_plot"]], "style_sheet (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.subplot_wspace"]], "x_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.x_label"]], "x_range (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.x_range"]], "y_label (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.y_label"]], "y_range (aim2dat.plots.partial_charges.partialchargesplot property)": [[86, "aim2dat.plots.partial_charges.PartialChargesPlot.y_range"]], "partialrdfplot (class in aim2dat.plots.partial_rdf)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot"]], "aim2dat.plots.partial_rdf": [[87, "module-aim2dat.plots.partial_rdf"]], "auto_set_axis_properties() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.backend"]], "create_default_gridspec() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_alpha"]], "custom_colors (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.custom_yticks"]], "data_labels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.equal_aspect_ratio"]], "import_ffingerprint() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.import_ffingerprint"]], "legend_bbox_to_anchor (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_loc"]], "legend_ncol (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.legend_sort_entries"]], "plot() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.plot"]], "plot_grid (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.plot_grid"]], "ratio (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.ratio"]], "reset_gridspec() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.partial_rdf.partialrdfplot method)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_colorbar"]], "show_grid (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_grid"]], "show_legend (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_legend"]], "show_plot (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.show_plot"]], "store_path (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.store_path"]], "store_plot (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.store_plot"]], "style_sheet (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.subplot_wspace"]], "x_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.x_label"]], "x_range (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.x_range"]], "x_unit (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.x_unit"]], "y_label (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.y_label"]], "y_range (aim2dat.plots.partial_rdf.partialrdfplot property)": [[87, "aim2dat.plots.partial_rdf.PartialRDFPlot.y_range"]], "phasediagram() (in module aim2dat.plots.phase)": [[88, "aim2dat.plots.phase.PhaseDiagram"]], "phaseplot (class in aim2dat.plots.phase)": [[88, "aim2dat.plots.phase.PhasePlot"]], "add_data_point() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.add_data_point"]], "aim2dat.plots.phase": [[88, "module-aim2dat.plots.phase"]], "auto_set_axis_properties() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.backend"]], "create_default_gridspec() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_alpha"]], "custom_colors (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.custom_yticks"]], "data_labels (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.data_labels"]], "elements (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.elements"]], "equal_aspect_ratio (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.equal_aspect_ratio"]], "import_from_pandas_df() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.import_from_pandas_df"]], "import_from_structure_collection() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.import_from_structure_collection"]], "legend_bbox_to_anchor (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.legend_loc"]], "legend_ncol (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.legend_sort_entries"]], "plot() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.plot"]], "plot_grid (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.plot_grid"]], "plot_type (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.plot_type"]], "ratio (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.ratio"]], "reset_gridspec() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.phase.phaseplot method)": [[88, "aim2dat.plots.phase.PhasePlot.return_data_labels"]], "show_colorbar (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.show_colorbar"]], "show_crystal_system (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.show_crystal_system"]], "show_grid (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.show_grid"]], "show_legend (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.show_legend"]], "show_plot (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.show_plot"]], "store_path (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.store_path"]], "store_plot (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.store_plot"]], "style_sheet (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.subplot_wspace"]], "top_labels (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.top_labels"]], "x_label (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.x_label"]], "x_range (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.x_range"]], "y_label (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.y_label"]], "y_range (aim2dat.plots.phase.phaseplot property)": [[88, "aim2dat.plots.phase.PhasePlot.y_range"]], "planarfieldplot (class in aim2dat.plots.planar_fields)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot"]], "aim2dat.plots.planar_fields": [[89, "module-aim2dat.plots.planar_fields"]], "auto_set_axis_properties() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.backend"]], "coordinates_unit (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.coordinates_unit"]], "create_default_gridspec() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_alpha"]], "custom_colors (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.custom_yticks"]], "data_labels (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.equal_aspect_ratio"]], "import_field() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.import_field"]], "import_from_aiida_arraydata() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.import_from_aiida_arraydata"]], "legend_bbox_to_anchor (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_loc"]], "legend_ncol (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.legend_sort_entries"]], "norm (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.norm"]], "plot() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.plot"]], "plot_grid (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.plot_grid"]], "plot_type (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.plot_type"]], "ratio (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.ratio"]], "reset_gridspec() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.planar_fields.planarfieldplot method)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_colorbar"]], "show_grid (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_grid"]], "show_legend (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_legend"]], "show_plot (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.show_plot"]], "store_path (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.store_path"]], "store_plot (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.store_plot"]], "style_sheet (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.subplot_wspace"]], "values_unit (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.values_unit"]], "x_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.x_label"]], "x_range (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.x_range"]], "y_label (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.y_label"]], "y_range (aim2dat.plots.planar_fields.planarfieldplot property)": [[89, "aim2dat.plots.planar_fields.PlanarFieldPlot.y_range"]], "simpleplot (class in aim2dat.plots.simple_plot)": [[90, "aim2dat.plots.simple_plot.SimplePlot"]], "add_hline() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.add_hline"]], "add_vline() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.add_vline"]], "aim2dat.plots.simple_plot": [[90, "module-aim2dat.plots.simple_plot"]], "auto_set_axis_properties() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.backend"]], "create_default_gridspec() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_alpha"]], "custom_colors (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.custom_yticks"]], "data_labels (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.equal_aspect_ratio"]], "import_bar_data_set() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.import_bar_data_set"]], "import_scatter_data_set() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.import_scatter_data_set"]], "legend_bbox_to_anchor (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.legend_loc"]], "legend_ncol (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.legend_sort_entries"]], "plot() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.plot"]], "plot_grid (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.plot_grid"]], "ratio (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.simple_plot.simpleplot method)": [[90, "aim2dat.plots.simple_plot.SimplePlot.return_data_labels"]], "show_colorbar (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.show_colorbar"]], "show_grid (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.show_grid"]], "show_legend (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.show_legend"]], "show_plot (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.show_plot"]], "store_path (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.store_path"]], "store_plot (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.store_plot"]], "style_sheet (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.subplot_wspace"]], "x_label (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.x_label"]], "x_range (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.x_range"]], "y_label (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.y_label"]], "y_range (aim2dat.plots.simple_plot.simpleplot property)": [[90, "aim2dat.plots.simple_plot.SimplePlot.y_range"]], "spectrum() (in module aim2dat.plots.spectroscopy)": [[91, "aim2dat.plots.spectroscopy.Spectrum"]], "spectrumplot (class in aim2dat.plots.spectroscopy)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot"]], "add_vline() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.add_vline"]], "aim2dat.plots.spectroscopy": [[91, "module-aim2dat.plots.spectroscopy"]], "auto_set_axis_properties() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.backend"]], "create_default_gridspec() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_alpha"]], "custom_colors (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.custom_yticks"]], "data_labels (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.equal_aspect_ratio"]], "import_spectrum() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.import_spectrum"]], "legend_bbox_to_anchor (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_loc"]], "legend_ncol (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.legend_sort_entries"]], "peak_color (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_color"]], "peak_distance (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_distance"]], "peak_height (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_height"]], "peak_line_style (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_line_style"]], "peak_max_factor (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_max_factor"]], "peak_plateau_size (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_plateau_size"]], "peak_prominence (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_prominence"]], "peak_rel_height (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_rel_height"]], "peak_threshold (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_threshold"]], "peak_width (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_width"]], "peak_wlen (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_wlen"]], "peak_y_min (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peak_y_min"]], "peaks (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.peaks"]], "plot() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.plot"]], "plot_grid (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.plot_grid"]], "plot_unit_x (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.plot_unit_x"]], "ratio (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.ratio"]], "remove_additional_plot_elements() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.remove_additional_plot_elements"]], "reset_gridspec() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.spectroscopy.spectrumplot method)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.show_colorbar"]], "show_grid (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.show_grid"]], "show_legend (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.show_legend"]], "show_plot (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.show_plot"]], "smearing_delta (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.smearing_delta"]], "smearing_method (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.smearing_method"]], "smearing_sigma (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.smearing_sigma"]], "store_path (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.store_path"]], "store_plot (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.store_plot"]], "style_sheet (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.subplot_wspace"]], "x_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.x_label"]], "x_range (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.x_range"]], "y_label (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.y_label"]], "y_range (aim2dat.plots.spectroscopy.spectrumplot property)": [[91, "aim2dat.plots.spectroscopy.SpectrumPlot.y_range"]], "surfaceplot (class in aim2dat.plots.surface)": [[92, "aim2dat.plots.surface.SurfacePlot"]], "add_surface_facet() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.add_surface_facet"]], "aim2dat.plots.surface": [[92, "module-aim2dat.plots.surface"]], "area_unit (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.area_unit"]], "auto_set_axis_properties() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.auto_set_axis_properties"]], "backend (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.backend"]], "bulk_phase (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.bulk_phase"]], "create_default_gridspec() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_alpha"]], "custom_colors (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_colors"]], "custom_linestyles (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_linewidths"]], "custom_markers (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.custom_yticks"]], "data_labels (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.data_labels"]], "elemental_phases (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.elemental_phases"]], "energy_unit (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.energy_unit"]], "equal_aspect_ratio (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.equal_aspect_ratio"]], "import_from_pandas_df() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.import_from_pandas_df"]], "legend_bbox_to_anchor (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.legend_loc"]], "legend_ncol (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.legend_sort_entries"]], "plot() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.plot"]], "plot_grid (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.plot_grid"]], "plot_properties (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.plot_properties"]], "plot_type (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.plot_type"]], "ratio (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.ratio"]], "reset_gridspec() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.return_data_labels"]], "set_bulk_phase() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.set_bulk_phase"]], "set_elemental_phase() (aim2dat.plots.surface.surfaceplot method)": [[92, "aim2dat.plots.surface.SurfacePlot.set_elemental_phase"]], "show_colorbar (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.show_colorbar"]], "show_grid (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.show_grid"]], "show_legend (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.show_legend"]], "show_plot (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.show_plot"]], "store_path (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.store_path"]], "store_plot (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.store_plot"]], "style_sheet (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.style_sheet"]], "subplot_adjust (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.subplot_wspace"]], "x_label (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.x_label"]], "x_range (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.x_range"]], "y_label (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.y_label"]], "y_range (aim2dat.plots.surface.surfaceplot property)": [[92, "aim2dat.plots.surface.SurfacePlot.y_range"]], "qhaplot (class in aim2dat.plots.thermal_properties)": [[93, "aim2dat.plots.thermal_properties.QHAPlot"]], "thermalpropertiesplot (class in aim2dat.plots.thermal_properties)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot"]], "aim2dat.plots.thermal_properties": [[93, "module-aim2dat.plots.thermal_properties"]], "auto_set_axis_properties() (aim2dat.plots.thermal_properties.qhaplot method)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.auto_set_axis_properties"]], "auto_set_axis_properties() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.auto_set_axis_properties"]], "backend (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.backend"]], "backend (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.backend"]], "create_default_gridspec() (aim2dat.plots.thermal_properties.qhaplot method)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.create_default_gridspec"]], "create_default_gridspec() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.create_default_gridspec"]], "custom_alpha (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_alpha"]], "custom_alpha (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_alpha"]], "custom_colors (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_colors"]], "custom_colors (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_colors"]], "custom_linestyles (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_linestyles"]], "custom_linestyles (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_linestyles"]], "custom_linewidths (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_linewidths"]], "custom_linewidths (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_linewidths"]], "custom_markers (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_markers"]], "custom_markers (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_markers"]], "custom_xticklabels (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_xticklabels"]], "custom_xticklabels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_xticklabels"]], "custom_xticks (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_xticks"]], "custom_xticks (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_xticks"]], "custom_yticklabels (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_yticklabels"]], "custom_yticklabels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_yticklabels"]], "custom_yticks (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.custom_yticks"]], "custom_yticks (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.custom_yticks"]], "data_labels (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.data_labels"]], "data_labels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.data_labels"]], "equal_aspect_ratio (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.equal_aspect_ratio"]], "equal_aspect_ratio (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.equal_aspect_ratio"]], "import_qha_properties() (aim2dat.plots.thermal_properties.qhaplot method)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.import_qha_properties"]], "import_thermal_properties() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.import_thermal_properties"]], "legend_bbox_to_anchor (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.legend_bbox_to_anchor"]], "legend_bbox_to_anchor (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_bbox_to_anchor"]], "legend_loc (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.legend_loc"]], "legend_loc (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_loc"]], "legend_ncol (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.legend_ncol"]], "legend_ncol (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_ncol"]], "legend_sort_entries (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.legend_sort_entries"]], "legend_sort_entries (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.legend_sort_entries"]], "plot() (aim2dat.plots.thermal_properties.qhaplot method)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.plot"]], "plot() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.plot"]], "plot_grid (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.plot_grid"]], "plot_grid (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.plot_grid"]], "plot_properties (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.plot_properties"]], "plot_properties (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.plot_properties"]], "ratio (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.ratio"]], "ratio (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.ratio"]], "reset_gridspec() (aim2dat.plots.thermal_properties.qhaplot method)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.reset_gridspec"]], "reset_gridspec() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.reset_gridspec"]], "return_data_labels() (aim2dat.plots.thermal_properties.qhaplot method)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.return_data_labels"]], "return_data_labels() (aim2dat.plots.thermal_properties.thermalpropertiesplot method)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.return_data_labels"]], "show_colorbar (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.show_colorbar"]], "show_colorbar (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_colorbar"]], "show_grid (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.show_grid"]], "show_grid (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_grid"]], "show_legend (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.show_legend"]], "show_legend (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_legend"]], "show_plot (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.show_plot"]], "show_plot (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.show_plot"]], "store_path (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.store_path"]], "store_path (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.store_path"]], "store_plot (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.store_plot"]], "store_plot (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.store_plot"]], "style_sheet (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.style_sheet"]], "style_sheet (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.style_sheet"]], "subplot_adjust (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_adjust"]], "subplot_adjust (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_adjust"]], "subplot_align_ylabels (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_align_ylabels"]], "subplot_align_ylabels (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_align_ylabels"]], "subplot_gridspec (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_gridspec"]], "subplot_gridspec (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_gridspec"]], "subplot_hspace (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_hspace"]], "subplot_hspace (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_hspace"]], "subplot_ncols (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_ncols"]], "subplot_ncols (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_ncols"]], "subplot_nrows (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_nrows"]], "subplot_nrows (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_nrows"]], "subplot_share_colorbar (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_share_colorbar"]], "subplot_share_colorbar (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_share_colorbar"]], "subplot_share_legend (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_share_legend"]], "subplot_share_legend (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_share_legend"]], "subplot_sharex (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sharex"]], "subplot_sharex (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sharex"]], "subplot_sharey (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sharey"]], "subplot_sharey (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sharey"]], "subplot_sup_title (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sup_title"]], "subplot_sup_title (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sup_title"]], "subplot_sup_x_label (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sup_x_label"]], "subplot_sup_x_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sup_x_label"]], "subplot_sup_y_label (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_sup_y_label"]], "subplot_sup_y_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_sup_y_label"]], "subplot_tight_layout (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_tight_layout"]], "subplot_tight_layout (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_tight_layout"]], "subplot_wspace (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.subplot_wspace"]], "subplot_wspace (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.subplot_wspace"]], "x_label (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.x_label"]], "x_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.x_label"]], "x_range (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.x_range"]], "x_range (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.x_range"]], "y_label (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.y_label"]], "y_label (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.y_label"]], "y_range (aim2dat.plots.thermal_properties.qhaplot property)": [[93, "aim2dat.plots.thermal_properties.QHAPlot.y_range"]], "y_range (aim2dat.plots.thermal_properties.thermalpropertiesplot property)": [[93, "aim2dat.plots.thermal_properties.ThermalPropertiesPlot.y_range"]], "c_rect_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[94, "aim2dat.strct.brillouin_zone_2d.C_RECT_LGS"]], "p_hex_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[94, "aim2dat.strct.brillouin_zone_2d.P_HEX_LGS"]], "p_obl_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[94, "aim2dat.strct.brillouin_zone_2d.P_OBL_LGS"]], "p_rect_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[94, "aim2dat.strct.brillouin_zone_2d.P_RECT_LGS"]], "p_squ_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[94, "aim2dat.strct.brillouin_zone_2d.P_SQU_LGS"]], "p_trig_lgs (in module aim2dat.strct.brillouin_zone_2d)": [[94, "aim2dat.strct.brillouin_zone_2d.P_TRIG_LGS"]], "aim2dat.strct.brillouin_zone_2d": [[94, "module-aim2dat.strct.brillouin_zone_2d"]], "aim2dat.strct.ext_analysis.decorator": [[95, "module-aim2dat.strct.ext_analysis.decorator"]], "external_analysis_method() (in module aim2dat.strct.ext_analysis.decorator)": [[95, "aim2dat.strct.ext_analysis.decorator.external_analysis_method"]], "aim2dat.strct.ext_analysis.dscribe_descriptors": [[96, "module-aim2dat.strct.ext_analysis.dscribe_descriptors"]], "calculate_acsf_descriptor() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[96, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_acsf_descriptor"]], "calculate_interaction_matrix() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[96, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_interaction_matrix"]], "calculate_mbtr_descriptor() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[96, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_mbtr_descriptor"]], "calculate_soap_descriptor() (in module aim2dat.strct.ext_analysis.dscribe_descriptors)": [[96, "aim2dat.strct.ext_analysis.dscribe_descriptors.calculate_soap_descriptor"]], "aim2dat.strct.ext_analysis.ffprint_order_p": [[97, "module-aim2dat.strct.ext_analysis.ffprint_order_p"]], "calculate_ffingerprint_order_p() (in module aim2dat.strct.ext_analysis.ffprint_order_p)": [[97, "aim2dat.strct.ext_analysis.ffprint_order_p.calculate_ffingerprint_order_p"]], "aim2dat.strct.ext_analysis.fragmentation": [[98, "module-aim2dat.strct.ext_analysis.fragmentation"]], "determine_molecular_fragments() (in module aim2dat.strct.ext_analysis.fragmentation)": [[98, "aim2dat.strct.ext_analysis.fragmentation.determine_molecular_fragments"]], "aim2dat.strct.ext_analysis.graphs": [[99, "module-aim2dat.strct.ext_analysis.graphs"]], "create_graph() (in module aim2dat.strct.ext_analysis.graphs)": [[99, "aim2dat.strct.ext_analysis.graphs.create_graph"]], "aim2dat.strct.ext_analysis": [[100, "module-aim2dat.strct.ext_analysis"]], "calculate_acsf_descriptor() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_acsf_descriptor"]], "calculate_ffingerprint_order_p() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_ffingerprint_order_p"]], "calculate_interaction_matrix() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_interaction_matrix"]], "calculate_mbtr_descriptor() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_mbtr_descriptor"]], "calculate_planes() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_planes"]], "calculate_prdf() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_prdf"]], "calculate_soap_descriptor() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_soap_descriptor"]], "calculate_warren_cowley_order_p() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.calculate_warren_cowley_order_p"]], "create_graph() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.create_graph"]], "determine_molecular_fragments() (in module aim2dat.strct.ext_analysis)": [[100, "aim2dat.strct.ext_analysis.determine_molecular_fragments"]], "aim2dat.strct.ext_analysis.planes": [[101, "module-aim2dat.strct.ext_analysis.planes"]], "calculate_planes() (in module aim2dat.strct.ext_analysis.planes)": [[101, "aim2dat.strct.ext_analysis.planes.calculate_planes"]], "aim2dat.strct.ext_analysis.prdf": [[102, "module-aim2dat.strct.ext_analysis.prdf"]], "calculate_prdf() (in module aim2dat.strct.ext_analysis.prdf)": [[102, "aim2dat.strct.ext_analysis.prdf.calculate_prdf"]], "aim2dat.strct.ext_analysis.warren_cowley_order_parameters": [[103, "module-aim2dat.strct.ext_analysis.warren_cowley_order_parameters"]], "calculate_warren_cowley_order_p() (in module aim2dat.strct.ext_analysis.warren_cowley_order_parameters)": [[103, "aim2dat.strct.ext_analysis.warren_cowley_order_parameters.calculate_warren_cowley_order_p"]], "add_functional_group() (in module aim2dat.strct.ext_manipulation.add_functional_group)": [[104, "aim2dat.strct.ext_manipulation.add_functional_group.add_functional_group"]], "aim2dat.strct.ext_manipulation.add_functional_group": [[104, "module-aim2dat.strct.ext_manipulation.add_functional_group"]], "add_structure_coord() (in module aim2dat.strct.ext_manipulation.add_structure)": [[105, "aim2dat.strct.ext_manipulation.add_structure.add_structure_coord"]], "add_structure_random() (in module aim2dat.strct.ext_manipulation.add_structure)": [[105, "aim2dat.strct.ext_manipulation.add_structure.add_structure_random"]], "aim2dat.strct.ext_manipulation.add_structure": [[105, "module-aim2dat.strct.ext_manipulation.add_structure"]], "cwd (in module aim2dat.strct.ext_manipulation.add_structure)": [[105, "aim2dat.strct.ext_manipulation.add_structure.cwd"]], "aim2dat.strct.ext_manipulation.decorator": [[106, "module-aim2dat.strct.ext_manipulation.decorator"]], "external_manipulation_method() (in module aim2dat.strct.ext_manipulation.decorator)": [[106, "aim2dat.strct.ext_manipulation.decorator.external_manipulation_method"]], "add_functional_group() (in module aim2dat.strct.ext_manipulation)": [[107, "aim2dat.strct.ext_manipulation.add_functional_group"]], "add_structure_coord() (in module aim2dat.strct.ext_manipulation)": [[107, "aim2dat.strct.ext_manipulation.add_structure_coord"]], "add_structure_random() (in module aim2dat.strct.ext_manipulation)": [[107, "aim2dat.strct.ext_manipulation.add_structure_random"]], "aim2dat.strct.ext_manipulation": [[107, "module-aim2dat.strct.ext_manipulation"]], "structure (class in aim2dat.strct)": [[108, "aim2dat.strct.Structure"]], "structurecollection (class in aim2dat.strct)": [[108, "aim2dat.strct.StructureCollection"]], "structureimporter (class in aim2dat.strct)": [[108, "aim2dat.strct.StructureImporter"]], "surfacegeneration (class in aim2dat.strct)": [[108, "aim2dat.strct.SurfaceGeneration"]], "add_chem_formula_constraint() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.add_chem_formula_constraint"]], "aim2dat.strct": [[108, "module-aim2dat.strct"]], "analysis_methods (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.analysis_methods"]], "append() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.append"]], "append_from_aiida_structuredata() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.append_from_aiida_structuredata"]], "append_from_ase_atoms() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.append_from_ase_atoms"]], "append_from_file() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.append_from_file"]], "append_from_mp_by_id() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.append_from_mp_by_id"]], "append_from_pymatgen_structure() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.append_from_pymatgen_structure"]], "append_structure() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.append_structure"]], "attribute_constraints (aim2dat.strct.structureimporter property)": [[108, "aim2dat.strct.StructureImporter.attribute_constraints"]], "attributes (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.attributes"]], "calculate_angle() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.calculate_angle"]], "calculate_coordination() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.calculate_ffingerprint"]], "calculate_voronoi_tessellation() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.calculate_voronoi_tessellation"]], "cell (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.cell"]], "cell_angles (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.cell_angles"]], "cell_lengths (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.cell_lengths"]], "cell_volume (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.cell_volume"]], "chem_formula (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.chem_formula"]], "chem_formula_constraints (aim2dat.strct.structureimporter property)": [[108, "aim2dat.strct.StructureImporter.chem_formula_constraints"]], "concentration_constraints (aim2dat.strct.structureimporter property)": [[108, "aim2dat.strct.StructureImporter.concentration_constraints"]], "copy() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.copy"]], "copy() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.copy"]], "create_pandas_df() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.create_pandas_df"]], "create_surface() (aim2dat.strct.surfacegeneration method)": [[108, "aim2dat.strct.SurfaceGeneration.create_surface"]], "delete_atoms() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.delete_atoms"]], "determine_point_group() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.determine_point_group"]], "determine_space_group() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.determine_space_group"]], "duplicate_structure() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.duplicate_structure"]], "elements (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.elements"]], "export_methods (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.export_methods"]], "extras (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.extras"]], "from_aiida_structuredata() (aim2dat.strct.structure class method)": [[108, "aim2dat.strct.Structure.from_aiida_structuredata"]], "from_ase_atoms() (aim2dat.strct.structure class method)": [[108, "aim2dat.strct.Structure.from_ase_atoms"]], "from_file() (aim2dat.strct.structure class method)": [[108, "aim2dat.strct.Structure.from_file"]], "from_pymatgen_structure() (aim2dat.strct.structure class method)": [[108, "aim2dat.strct.Structure.from_pymatgen_structure"]], "function_args (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.function_args"]], "generate_random_crystals() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.generate_random_crystals"]], "generate_surface_slabs() (aim2dat.strct.surfacegeneration method)": [[108, "aim2dat.strct.SurfaceGeneration.generate_surface_slabs"]], "get() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.get"]], "get_all_attribute_keys() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.get_all_attribute_keys"]], "get_all_elements() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.get_all_elements"]], "get_all_kinds() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.get_all_kinds"]], "get_all_structures() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.get_all_structures"]], "get_positions() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.get_positions"]], "get_structure() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.get_structure"]], "import_from_aiida_db() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.import_from_aiida_db"]], "import_from_hdf5_file() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.import_from_hdf5_file"]], "import_from_mp() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.import_from_mp"]], "import_from_optimade() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.import_from_optimade"]], "import_from_oqmd() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.import_from_oqmd"]], "import_from_pandas_df() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.import_from_pandas_df"]], "import_methods (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.import_methods"]], "index() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.index"]], "items() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.items"]], "iter_sites() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.iter_sites"]], "keys() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.keys"]], "kinds (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.kinds"]], "label (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.label"]], "labels (aim2dat.strct.structurecollection property)": [[108, "aim2dat.strct.StructureCollection.labels"]], "manipulation_methods (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.manipulation_methods"]], "neglect_elemental_structures (aim2dat.strct.structureimporter property)": [[108, "aim2dat.strct.StructureImporter.neglect_elemental_structures"]], "pbc (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.pbc"]], "perform_analysis() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.perform_analysis"]], "perform_manipulation() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.perform_manipulation"]], "pop() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.pop"]], "positions (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.positions"]], "remove_constraints() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.remove_constraints"]], "return_optimade_database_ids() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.return_optimade_database_ids"]], "scale_unit_cell() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.scale_unit_cell"]], "scaled_positions (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.scaled_positions"]], "set_attribute() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.set_attribute"]], "set_attribute_constraint() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.set_attribute_constraint"]], "set_concentration_constraint() (aim2dat.strct.structureimporter method)": [[108, "aim2dat.strct.StructureImporter.set_concentration_constraint"]], "set_positions() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.set_positions"]], "set_site_attribute() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.set_site_attribute"]], "site_attributes (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.site_attributes"]], "store_calculated_properties (aim2dat.strct.structure property)": [[108, "aim2dat.strct.Structure.store_calculated_properties"]], "store_in_aiida_db() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.store_in_aiida_db"]], "store_in_hdf5_file() (aim2dat.strct.structurecollection method)": [[108, "aim2dat.strct.StructureCollection.store_in_hdf5_file"]], "store_surfaces_in_aiida_db() (aim2dat.strct.surfacegeneration method)": [[108, "aim2dat.strct.SurfaceGeneration.store_surfaces_in_aiida_db"]], "structures (aim2dat.strct.structureimporter property)": [[108, "aim2dat.strct.StructureImporter.structures"]], "substitute_elements() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.substitute_elements"]], "to_aiida_structuredata() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.to_aiida_structuredata"]], "to_aiida_surfacedata() (aim2dat.strct.surfacegeneration method)": [[108, "aim2dat.strct.SurfaceGeneration.to_aiida_surfacedata"]], "to_ase_atoms() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.to_ase_atoms"]], "to_dict() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.to_dict"]], "to_file() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.to_file"]], "to_pymatgen_structure() (aim2dat.strct.structure method)": [[108, "aim2dat.strct.Structure.to_pymatgen_structure"]], "analysismixin (class in aim2dat.strct.mixin)": [[109, "aim2dat.strct.mixin.AnalysisMixin"]], "constrainterror": [[109, "aim2dat.strct.mixin.ConstraintError"]], "constrainterror.args (class in aim2dat.strct.mixin)": [[109, "aim2dat.strct.mixin.ConstraintError.args"]], "constraintsmixin (class in aim2dat.strct.mixin)": [[109, "aim2dat.strct.mixin.ConstraintsMixin"]], "manipulationmixin (class in aim2dat.strct.mixin)": [[109, "aim2dat.strct.mixin.ManipulationMixin"]], "add_chem_formula_constraint() (aim2dat.strct.mixin.constraintsmixin method)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.add_chem_formula_constraint"]], "aim2dat.strct.mixin": [[109, "module-aim2dat.strct.mixin"]], "analysis_method() (in module aim2dat.strct.mixin)": [[109, "aim2dat.strct.mixin.analysis_method"]], "analysis_methods (aim2dat.strct.mixin.analysismixin property)": [[109, "aim2dat.strct.mixin.AnalysisMixin.analysis_methods"]], "attribute_constraints (aim2dat.strct.mixin.constraintsmixin property)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.attribute_constraints"]], "calculate_angle() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.calculate_angle"]], "calculate_coordination() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.calculate_ffingerprint"]], "calculate_voronoi_tessellation() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.calculate_voronoi_tessellation"]], "chem_formula_constraints (aim2dat.strct.mixin.constraintsmixin property)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.chem_formula_constraints"]], "concentration_constraints (aim2dat.strct.mixin.constraintsmixin property)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.concentration_constraints"]], "delete_atoms() (aim2dat.strct.mixin.manipulationmixin method)": [[109, "aim2dat.strct.mixin.ManipulationMixin.delete_atoms"]], "determine_point_group() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.determine_point_group"]], "determine_space_group() (aim2dat.strct.mixin.analysismixin method)": [[109, "aim2dat.strct.mixin.AnalysisMixin.determine_space_group"]], "manipulates_structure() (in module aim2dat.strct.mixin)": [[109, "aim2dat.strct.mixin.manipulates_structure"]], "manipulation_methods (aim2dat.strct.mixin.manipulationmixin property)": [[109, "aim2dat.strct.mixin.ManipulationMixin.manipulation_methods"]], "neglect_elemental_structures (aim2dat.strct.mixin.constraintsmixin property)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.neglect_elemental_structures"]], "perform_manipulation() (aim2dat.strct.mixin.manipulationmixin method)": [[109, "aim2dat.strct.mixin.ManipulationMixin.perform_manipulation"]], "remove_constraints() (aim2dat.strct.mixin.constraintsmixin method)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.remove_constraints"]], "scale_unit_cell() (aim2dat.strct.mixin.manipulationmixin method)": [[109, "aim2dat.strct.mixin.ManipulationMixin.scale_unit_cell"]], "set_attribute_constraint() (aim2dat.strct.mixin.constraintsmixin method)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.set_attribute_constraint"]], "set_concentration_constraint() (aim2dat.strct.mixin.constraintsmixin method)": [[109, "aim2dat.strct.mixin.ConstraintsMixin.set_concentration_constraint"]], "substitute_elements() (aim2dat.strct.mixin.manipulationmixin method)": [[109, "aim2dat.strct.mixin.ManipulationMixin.substitute_elements"]], "with_traceback() (aim2dat.strct.mixin.constrainterror method)": [[109, "aim2dat.strct.mixin.ConstraintError.with_traceback"]], "aim2dat.strct.stability": [[110, "module-aim2dat.strct.stability"]], "structure (class in aim2dat.strct.strct)": [[111, "aim2dat.strct.strct.Structure"]], "aiida (in module aim2dat.strct.strct)": [[111, "aim2dat.strct.strct.aiida"]], "aim2dat.strct.strct": [[111, "module-aim2dat.strct.strct"]], "analysis_methods (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.analysis_methods"]], "attributes (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.attributes"]], "calculate_angle() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.calculate_angle"]], "calculate_coordination() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.calculate_ffingerprint"]], "calculate_voronoi_tessellation() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.calculate_voronoi_tessellation"]], "cell (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.cell"]], "cell_angles (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.cell_angles"]], "cell_lengths (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.cell_lengths"]], "cell_volume (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.cell_volume"]], "chem_formula (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.chem_formula"]], "copy() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.copy"]], "delete_atoms() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.delete_atoms"]], "determine_point_group() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.determine_point_group"]], "determine_space_group() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.determine_space_group"]], "elements (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.elements"]], "export_method() (in module aim2dat.strct.strct)": [[111, "aim2dat.strct.strct.export_method"]], "export_methods (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.export_methods"]], "extras (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.extras"]], "from_aiida_structuredata() (aim2dat.strct.strct.structure class method)": [[111, "aim2dat.strct.strct.Structure.from_aiida_structuredata"]], "from_ase_atoms() (aim2dat.strct.strct.structure class method)": [[111, "aim2dat.strct.strct.Structure.from_ase_atoms"]], "from_file() (aim2dat.strct.strct.structure class method)": [[111, "aim2dat.strct.strct.Structure.from_file"]], "from_pymatgen_structure() (aim2dat.strct.strct.structure class method)": [[111, "aim2dat.strct.strct.Structure.from_pymatgen_structure"]], "function_args (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.function_args"]], "get() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.get"]], "get_positions() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.get_positions"]], "import_method() (in module aim2dat.strct.strct)": [[111, "aim2dat.strct.strct.import_method"]], "import_methods (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.import_methods"]], "iter_sites() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.iter_sites"]], "keys() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.keys"]], "kinds (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.kinds"]], "label (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.label"]], "manipulation_methods (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.manipulation_methods"]], "pbc (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.pbc"]], "perform_analysis() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.perform_analysis"]], "perform_manipulation() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.perform_manipulation"]], "positions (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.positions"]], "pymatgen (in module aim2dat.strct.strct)": [[111, "aim2dat.strct.strct.pymatgen"]], "scale_unit_cell() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.scale_unit_cell"]], "scaled_positions (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.scaled_positions"]], "set_attribute() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.set_attribute"]], "set_positions() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.set_positions"]], "set_site_attribute() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.set_site_attribute"]], "site_attributes (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.site_attributes"]], "store_calculated_properties (aim2dat.strct.strct.structure property)": [[111, "aim2dat.strct.strct.Structure.store_calculated_properties"]], "substitute_elements() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.substitute_elements"]], "to_aiida_structuredata() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.to_aiida_structuredata"]], "to_ase_atoms() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.to_ase_atoms"]], "to_dict() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.to_dict"]], "to_file() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.to_file"]], "to_pymatgen_structure() (aim2dat.strct.strct.structure method)": [[111, "aim2dat.strct.strct.Structure.to_pymatgen_structure"]], "aim2dat.strct.strct_comparison": [[112, "module-aim2dat.strct.strct_comparison"]], "aim2dat.strct.strct_coordination": [[113, "module-aim2dat.strct.strct_coordination"]], "calculate_coordination() (in module aim2dat.strct.strct_coordination)": [[113, "aim2dat.strct.strct_coordination.calculate_coordination"]], "aim2dat.strct.strct_io": [[114, "module-aim2dat.strct.strct_io"]], "get_structure_from_file() (in module aim2dat.strct.strct_io)": [[114, "aim2dat.strct.strct_io.get_structure_from_file"]], "aim2dat.strct.strct_manipulation": [[115, "module-aim2dat.strct.strct_manipulation"]], "cwd (in module aim2dat.strct.strct_manipulation)": [[115, "aim2dat.strct.strct_manipulation.cwd"]], "delete_atoms() (in module aim2dat.strct.strct_manipulation)": [[115, "aim2dat.strct.strct_manipulation.delete_atoms"]], "scale_unit_cell() (in module aim2dat.strct.strct_manipulation)": [[115, "aim2dat.strct.strct_manipulation.scale_unit_cell"]], "substitute_elements() (in module aim2dat.strct.strct_manipulation)": [[115, "aim2dat.strct.strct_manipulation.substitute_elements"]], "aim2dat.strct.strct_misc": [[116, "module-aim2dat.strct.strct_misc"]], "calculate_angle() (in module aim2dat.strct.strct_misc)": [[116, "aim2dat.strct.strct_misc.calculate_angle"]], "calculate_dihedral_angle() (in module aim2dat.strct.strct_misc)": [[116, "aim2dat.strct.strct_misc.calculate_dihedral_angle"]], "calculate_distance() (in module aim2dat.strct.strct_misc)": [[116, "aim2dat.strct.strct_misc.calculate_distance"]], "aim2dat.strct.strct_point_groups": [[117, "module-aim2dat.strct.strct_point_groups"]], "determine_point_group() (in module aim2dat.strct.strct_point_groups)": [[117, "aim2dat.strct.strct_point_groups.determine_point_group"]], "aim2dat.strct.strct_prdf": [[118, "module-aim2dat.strct.strct_prdf"]], "calculate_ffingerprint() (in module aim2dat.strct.strct_prdf)": [[118, "aim2dat.strct.strct_prdf.calculate_ffingerprint"]], "aim2dat.strct.strct_space_groups": [[119, "module-aim2dat.strct.strct_space_groups"]], "determine_space_group() (in module aim2dat.strct.strct_space_groups)": [[119, "aim2dat.strct.strct_space_groups.determine_space_group"]], "aim2dat.strct.strct_super_cell": [[120, "module-aim2dat.strct.strct_super_cell"]], "calculate_voronoi_tessellation() (in module aim2dat.strct.strct_super_cell)": [[120, "aim2dat.strct.strct_super_cell.calculate_voronoi_tessellation"]], "aim2dat.strct.strct_validation": [[121, "module-aim2dat.strct.strct_validation"]], "structurecollection (class in aim2dat.strct.structure_collection)": [[122, "aim2dat.strct.structure_collection.StructureCollection"]], "aiida (in module aim2dat.strct.structure_collection)": [[122, "aim2dat.strct.structure_collection.aiida"]], "aim2dat.strct.structure_collection": [[122, "module-aim2dat.strct.structure_collection"]], "append() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.append"]], "append_from_aiida_structuredata() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.append_from_aiida_structuredata"]], "append_from_ase_atoms() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.append_from_ase_atoms"]], "append_from_file() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.append_from_file"]], "append_from_pymatgen_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.append_from_pymatgen_structure"]], "append_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.append_structure"]], "copy() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.copy"]], "create_pandas_df() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.create_pandas_df"]], "duplicate_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.duplicate_structure"]], "get_all_attribute_keys() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.get_all_attribute_keys"]], "get_all_elements() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.get_all_elements"]], "get_all_kinds() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.get_all_kinds"]], "get_all_structures() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.get_all_structures"]], "get_structure() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.get_structure"]], "import_from_aiida_db() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.import_from_aiida_db"]], "import_from_hdf5_file() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.import_from_hdf5_file"]], "import_from_pandas_df() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.import_from_pandas_df"]], "index() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.index"]], "items() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.items"]], "labels (aim2dat.strct.structure_collection.structurecollection property)": [[122, "aim2dat.strct.structure_collection.StructureCollection.labels"]], "pop() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.pop"]], "pymatgen (in module aim2dat.strct.structure_collection)": [[122, "aim2dat.strct.structure_collection.pymatgen"]], "store_in_aiida_db() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.store_in_aiida_db"]], "store_in_hdf5_file() (aim2dat.strct.structure_collection.structurecollection method)": [[122, "aim2dat.strct.structure_collection.StructureCollection.store_in_hdf5_file"]], "structureimporter (class in aim2dat.strct.structure_importer)": [[123, "aim2dat.strct.structure_importer.StructureImporter"]], "add_chem_formula_constraint() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.add_chem_formula_constraint"]], "aim2dat.strct.structure_importer": [[123, "module-aim2dat.strct.structure_importer"]], "append_from_mp_by_id() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.append_from_mp_by_id"]], "attribute_constraints (aim2dat.strct.structure_importer.structureimporter property)": [[123, "aim2dat.strct.structure_importer.StructureImporter.attribute_constraints"]], "chem_formula_constraints (aim2dat.strct.structure_importer.structureimporter property)": [[123, "aim2dat.strct.structure_importer.StructureImporter.chem_formula_constraints"]], "concentration_constraints (aim2dat.strct.structure_importer.structureimporter property)": [[123, "aim2dat.strct.structure_importer.StructureImporter.concentration_constraints"]], "generate_random_crystals() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.generate_random_crystals"]], "import_from_mp() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.import_from_mp"]], "import_from_optimade() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.import_from_optimade"]], "import_from_oqmd() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.import_from_oqmd"]], "neglect_elemental_structures (aim2dat.strct.structure_importer.structureimporter property)": [[123, "aim2dat.strct.structure_importer.StructureImporter.neglect_elemental_structures"]], "remove_constraints() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.remove_constraints"]], "return_optimade_database_ids() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.return_optimade_database_ids"]], "set_attribute_constraint() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.set_attribute_constraint"]], "set_concentration_constraint() (aim2dat.strct.structure_importer.structureimporter method)": [[123, "aim2dat.strct.structure_importer.StructureImporter.set_concentration_constraint"]], "structures (aim2dat.strct.structure_importer.structureimporter property)": [[123, "aim2dat.strct.structure_importer.StructureImporter.structures"]], "structureoperations (class in aim2dat.strct.structure_operations)": [[124, "aim2dat.strct.structure_operations.StructureOperations"]], "aim2dat.strct.structure_operations": [[124, "module-aim2dat.strct.structure_operations"]], "analysis_methods (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.analysis_methods"]], "calculate_angle() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_angle"]], "calculate_coordination() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_coordination"]], "calculate_dihedral_angle() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_dihedral_angle"]], "calculate_distance() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_distance"]], "calculate_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_ffingerprint"]], "calculate_stabilities() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_stabilities"]], "calculate_voronoi_tessellation() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.calculate_voronoi_tessellation"]], "chunksize (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.chunksize"]], "compare_sites_via_coordination() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.compare_sites_via_coordination"]], "compare_sites_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.compare_sites_via_ffingerprint"]], "compare_structures() (in module aim2dat.strct.structure_operations)": [[124, "aim2dat.strct.structure_operations.compare_structures"]], "compare_structures_via_comp_sym() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.compare_structures_via_comp_sym"]], "compare_structures_via_direct_comp() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.compare_structures_via_direct_comp"]], "compare_structures_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.compare_structures_via_ffingerprint"]], "copy() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.copy"]], "delete_atoms() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.delete_atoms"]], "determine_point_group() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.determine_point_group"]], "determine_space_group() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.determine_space_group"]], "find_duplicates_via_comp_sym() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.find_duplicates_via_comp_sym"]], "find_duplicates_via_direct_comp() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.find_duplicates_via_direct_comp"]], "find_duplicates_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.find_duplicates_via_ffingerprint"]], "find_eq_sites_via_coordination() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.find_eq_sites_via_coordination"]], "find_eq_sites_via_ffingerprint() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.find_eq_sites_via_ffingerprint"]], "manipulation_methods (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.manipulation_methods"]], "n_procs (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.n_procs"]], "output_format (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.output_format"]], "perform_analysis() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.perform_analysis"]], "perform_manipulation() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.perform_manipulation"]], "scale_unit_cell() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.scale_unit_cell"]], "structure_wrapper() (in module aim2dat.strct.structure_operations)": [[124, "aim2dat.strct.structure_operations.structure_wrapper"]], "structures (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.structures"]], "substitute_elements() (aim2dat.strct.structure_operations.structureoperations method)": [[124, "aim2dat.strct.structure_operations.StructureOperations.substitute_elements"]], "supported_output_formats (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.supported_output_formats"]], "verbose (aim2dat.strct.structure_operations.structureoperations property)": [[124, "aim2dat.strct.structure_operations.StructureOperations.verbose"]], "surfacegeneration (class in aim2dat.strct.surface)": [[125, "aim2dat.strct.surface.SurfaceGeneration"]], "aim2dat.strct.surface": [[125, "module-aim2dat.strct.surface"]], "create_surface() (aim2dat.strct.surface.surfacegeneration method)": [[125, "aim2dat.strct.surface.SurfaceGeneration.create_surface"]], "generate_surface_slabs() (aim2dat.strct.surface.surfacegeneration method)": [[125, "aim2dat.strct.surface.SurfaceGeneration.generate_surface_slabs"]], "store_surfaces_in_aiida_db() (aim2dat.strct.surface.surfacegeneration method)": [[125, "aim2dat.strct.surface.SurfaceGeneration.store_surfaces_in_aiida_db"]], "to_aiida_surfacedata() (aim2dat.strct.surface.surfacegeneration method)": [[125, "aim2dat.strct.surface.SurfaceGeneration.to_aiida_surfacedata"]], "space_group_hn_to_layer_group (in module aim2dat.strct.surface_utils)": [[126, "aim2dat.strct.surface_utils.SPACE_GROUP_HN_TO_LAYER_GROUP"]], "aim2dat.strct.surface_utils": [[126, "module-aim2dat.strct.surface_utils"]], "aim2dat.utils.chem_formula": [[127, "module-aim2dat.utils.chem_formula"]], "compare_formulas() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.compare_formulas"]], "reduce_formula() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.reduce_formula"]], "transform_dict_to_latexstr() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.transform_dict_to_latexstr"]], "transform_dict_to_str() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.transform_dict_to_str"]], "transform_list_to_dict() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.transform_list_to_dict"]], "transform_list_to_str() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.transform_list_to_str"]], "transform_str_to_dict() (in module aim2dat.utils.chem_formula)": [[127, "aim2dat.utils.chem_formula.transform_str_to_dict"]], "aim2dat.utils.dict_tools": [[128, "module-aim2dat.utils.dict_tools"]], "dict_create_tree() (in module aim2dat.utils.dict_tools)": [[128, "aim2dat.utils.dict_tools.dict_create_tree"]], "dict_merge() (in module aim2dat.utils.dict_tools)": [[128, "aim2dat.utils.dict_tools.dict_merge"]], "dict_retrieve_parameter() (in module aim2dat.utils.dict_tools)": [[128, "aim2dat.utils.dict_tools.dict_retrieve_parameter"]], "dict_set_parameter() (in module aim2dat.utils.dict_tools)": [[128, "aim2dat.utils.dict_tools.dict_set_parameter"]], "aim2dat.utils.element_properties": [[129, "module-aim2dat.utils.element_properties"]], "element_groups (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.element_groups"], [129, "id0"]], "get_atomic_mass() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_atomic_mass"]], "get_atomic_number() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_atomic_number"]], "get_atomic_radius() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_atomic_radius"]], "get_electronegativity() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_electronegativity"]], "get_element_groups() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_element_groups"]], "get_element_symbol() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_element_symbol"]], "get_group() (in module aim2dat.utils.element_properties)": [[129, "aim2dat.utils.element_properties.get_group"]], "aim2dat.utils": [[130, "module-aim2dat.utils"]], "aim2dat.utils.maths": [[131, "module-aim2dat.utils.maths"]], "calc_angle() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.calc_angle"]], "calc_circular_segment_area() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.calc_circular_segment_area"]], "calc_plane_equation() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.calc_plane_equation"]], "calc_polygon_area() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.calc_polygon_area"]], "calc_reflection_matrix() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.calc_reflection_matrix"]], "calc_solid_angle() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.calc_solid_angle"]], "gaussian_function() (in module aim2dat.utils.maths)": [[131, "aim2dat.utils.maths.gaussian_function"]], "max_str_length (in module aim2dat.utils.print)": [[132, "aim2dat.utils.print.MAX_STR_LENGTH"]], "aim2dat.utils.print": [[132, "module-aim2dat.utils.print"]], "aim2dat.utils.space_groups": [[133, "module-aim2dat.utils.space_groups"]], "get_crystal_system() (in module aim2dat.utils.space_groups)": [[133, "aim2dat.utils.space_groups.get_crystal_system"]], "get_lattice_type() (in module aim2dat.utils.space_groups)": [[133, "aim2dat.utils.space_groups.get_lattice_type"]], "get_space_group_details() (in module aim2dat.utils.space_groups)": [[133, "aim2dat.utils.space_groups.get_space_group_details"]], "transform_to_nr() (in module aim2dat.utils.space_groups)": [[133, "aim2dat.utils.space_groups.transform_to_nr"]], "transform_to_str() (in module aim2dat.utils.space_groups)": [[133, "aim2dat.utils.space_groups.transform_to_str"]], "energy (class in aim2dat.utils.units)": [[134, "aim2dat.utils.units.Energy"]], "frequency (class in aim2dat.utils.units)": [[134, "aim2dat.utils.units.Frequency"]], "length (class in aim2dat.utils.units)": [[134, "aim2dat.utils.units.Length"]], "unitconverter (class in aim2dat.utils.units)": [[134, "aim2dat.utils.units.UnitConverter"]], "wavevector (class in aim2dat.utils.units)": [[134, "aim2dat.utils.units.Wavevector"]], "aim2dat.utils.units": [[134, "module-aim2dat.utils.units"]], "available_units (aim2dat.utils.units.energy property)": [[134, "aim2dat.utils.units.Energy.available_units"]], "available_units (aim2dat.utils.units.frequency property)": [[134, "aim2dat.utils.units.Frequency.available_units"]], "available_units (aim2dat.utils.units.length property)": [[134, "aim2dat.utils.units.Length.available_units"]], "available_units (aim2dat.utils.units.unitconverter attribute)": [[134, "aim2dat.utils.units.UnitConverter.available_units"]], "available_units (aim2dat.utils.units.wavevector property)": [[134, "aim2dat.utils.units.Wavevector.available_units"]], "convert_units() (aim2dat.utils.units.unitconverter class method)": [[134, "aim2dat.utils.units.UnitConverter.convert_units"]], "energy (in module aim2dat.utils.units)": [[134, "aim2dat.utils.units.energy"]], "frequency (in module aim2dat.utils.units)": [[134, "aim2dat.utils.units.frequency"]], "get_unit() (aim2dat.utils.units.energy method)": [[134, "aim2dat.utils.units.Energy.get_unit"]], "get_unit() (aim2dat.utils.units.frequency method)": [[134, "aim2dat.utils.units.Frequency.get_unit"]], "get_unit() (aim2dat.utils.units.length method)": [[134, "aim2dat.utils.units.Length.get_unit"]], "get_unit() (aim2dat.utils.units.wavevector method)": [[134, "aim2dat.utils.units.Wavevector.get_unit"]], "length (in module aim2dat.utils.units)": [[134, "aim2dat.utils.units.length"]], "plot_labels (aim2dat.utils.units.unitconverter attribute)": [[134, "aim2dat.utils.units.UnitConverter.plot_labels"]], "wavevector (in module aim2dat.utils.units)": [[134, "aim2dat.utils.units.wavevector"]]}, "docurls": ["api-aiida_processes.html", "autoapi/aim2dat/aiida_data/gaussian_cube_data/index.html", "autoapi/aim2dat/aiida_data/index.html", "autoapi/aim2dat/aiida_data/surface_data/index.html", "autoapi/aim2dat/aiida_workflows/_workflow_builder_utils/index.html", "autoapi/aim2dat/aiida_workflows/chargemol/calcjobs/index.html", "autoapi/aim2dat/aiida_workflows/chargemol/index.html", "autoapi/aim2dat/aiida_workflows/chargemol/parsers/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/auxiliary_functions/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/band_structure_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/calcjobs/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/cell_opt_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/combined_work_chains/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_handlers/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_inputs/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_opt/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/core_work_chain_scf/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/cube_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/eigenvalues_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/el_properties_utils/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/find_scf_p_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/geo_opt_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/parsers/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/partial_charges_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/pdos_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/planar_fields_work_chain/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/surface_opt_utils/index.html", "autoapi/aim2dat/aiida_workflows/cp2k/work_chain_specs/index.html", "autoapi/aim2dat/aiida_workflows/critic2/calcjobs/index.html", "autoapi/aim2dat/aiida_workflows/critic2/index.html", "autoapi/aim2dat/aiida_workflows/critic2/parsers/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/enum_calcjob/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/enum_parsers/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/index.html", "autoapi/aim2dat/aiida_workflows/enumlib/utils/index.html", "autoapi/aim2dat/aiida_workflows/index.html", "autoapi/aim2dat/aiida_workflows/utils/index.html", "autoapi/aim2dat/aiida_workflows/workflow_builder/index.html", "autoapi/aim2dat/ext_interfaces/aiida/index.html", "autoapi/aim2dat/ext_interfaces/ase_atoms/index.html", "autoapi/aim2dat/ext_interfaces/ase_surface/index.html", "autoapi/aim2dat/ext_interfaces/dscribe/index.html", "autoapi/aim2dat/ext_interfaces/graphs/index.html", "autoapi/aim2dat/ext_interfaces/hdf5/index.html", "autoapi/aim2dat/ext_interfaces/import_opt_dependencies/index.html", "autoapi/aim2dat/ext_interfaces/index.html", "autoapi/aim2dat/ext_interfaces/mp/index.html", "autoapi/aim2dat/ext_interfaces/mp_openapi/index.html", "autoapi/aim2dat/ext_interfaces/optimade/index.html", "autoapi/aim2dat/ext_interfaces/oqmd/index.html", "autoapi/aim2dat/ext_interfaces/pandas/index.html", "autoapi/aim2dat/ext_interfaces/phonopy/index.html", "autoapi/aim2dat/ext_interfaces/pymatgen/index.html", "autoapi/aim2dat/ext_interfaces/pyxtal/index.html", "autoapi/aim2dat/ext_interfaces/seekpath/index.html", "autoapi/aim2dat/ext_interfaces/spglib/index.html", "autoapi/aim2dat/fct/discretization/index.html", "autoapi/aim2dat/fct/fingerprint/index.html", "autoapi/aim2dat/fct/function_comparison/index.html", "autoapi/aim2dat/fct/hull/index.html", "autoapi/aim2dat/fct/index.html", "autoapi/aim2dat/fct/smearing/index.html", "autoapi/aim2dat/index.html", "autoapi/aim2dat/io/cif/index.html", "autoapi/aim2dat/io/cp2k/bands_dos/index.html", "autoapi/aim2dat/io/cp2k/index.html", "autoapi/aim2dat/io/cp2k/restart/index.html", "autoapi/aim2dat/io/cp2k/stdout/index.html", "autoapi/aim2dat/io/critic2/index.html", "autoapi/aim2dat/io/fhi_aims/index.html", "autoapi/aim2dat/io/index.html", "autoapi/aim2dat/io/phonopy/index.html", "autoapi/aim2dat/io/qe/index.html", "autoapi/aim2dat/io/utils/index.html", "autoapi/aim2dat/io/xmgrace/index.html", "autoapi/aim2dat/io/yaml/index.html", "autoapi/aim2dat/io/zeo/index.html", "autoapi/aim2dat/ml/cell_grid_search/index.html", "autoapi/aim2dat/ml/index.html", "autoapi/aim2dat/ml/kernels/index.html", "autoapi/aim2dat/ml/metrics/index.html", "autoapi/aim2dat/ml/transformers/index.html", "autoapi/aim2dat/ml/utils/index.html", "autoapi/aim2dat/plots/band_structure_dos/index.html", "autoapi/aim2dat/plots/index.html", "autoapi/aim2dat/plots/partial_charges/index.html", "autoapi/aim2dat/plots/partial_rdf/index.html", "autoapi/aim2dat/plots/phase/index.html", "autoapi/aim2dat/plots/planar_fields/index.html", "autoapi/aim2dat/plots/simple_plot/index.html", "autoapi/aim2dat/plots/spectroscopy/index.html", "autoapi/aim2dat/plots/surface/index.html", "autoapi/aim2dat/plots/thermal_properties/index.html", "autoapi/aim2dat/strct/brillouin_zone_2d/index.html", "autoapi/aim2dat/strct/ext_analysis/decorator/index.html", "autoapi/aim2dat/strct/ext_analysis/dscribe_descriptors/index.html", "autoapi/aim2dat/strct/ext_analysis/ffprint_order_p/index.html", "autoapi/aim2dat/strct/ext_analysis/fragmentation/index.html", "autoapi/aim2dat/strct/ext_analysis/graphs/index.html", "autoapi/aim2dat/strct/ext_analysis/index.html", "autoapi/aim2dat/strct/ext_analysis/planes/index.html", "autoapi/aim2dat/strct/ext_analysis/prdf/index.html", "autoapi/aim2dat/strct/ext_analysis/warren_cowley_order_parameters/index.html", "autoapi/aim2dat/strct/ext_manipulation/add_functional_group/index.html", "autoapi/aim2dat/strct/ext_manipulation/add_structure/index.html", "autoapi/aim2dat/strct/ext_manipulation/decorator/index.html", "autoapi/aim2dat/strct/ext_manipulation/index.html", "autoapi/aim2dat/strct/index.html", "autoapi/aim2dat/strct/mixin/index.html", "autoapi/aim2dat/strct/stability/index.html", "autoapi/aim2dat/strct/strct/index.html", "autoapi/aim2dat/strct/strct_comparison/index.html", "autoapi/aim2dat/strct/strct_coordination/index.html", "autoapi/aim2dat/strct/strct_io/index.html", "autoapi/aim2dat/strct/strct_manipulation/index.html", "autoapi/aim2dat/strct/strct_misc/index.html", "autoapi/aim2dat/strct/strct_point_groups/index.html", "autoapi/aim2dat/strct/strct_prdf/index.html", "autoapi/aim2dat/strct/strct_space_groups/index.html", "autoapi/aim2dat/strct/strct_super_cell/index.html", "autoapi/aim2dat/strct/strct_validation/index.html", "autoapi/aim2dat/strct/structure_collection/index.html", "autoapi/aim2dat/strct/structure_importer/index.html", "autoapi/aim2dat/strct/structure_operations/index.html", "autoapi/aim2dat/strct/surface/index.html", "autoapi/aim2dat/strct/surface_utils/index.html", "autoapi/aim2dat/utils/chem_formula/index.html", "autoapi/aim2dat/utils/dict_tools/index.html", "autoapi/aim2dat/utils/element_properties/index.html", "autoapi/aim2dat/utils/index.html", "autoapi/aim2dat/utils/maths/index.html", "autoapi/aim2dat/utils/print/index.html", "autoapi/aim2dat/utils/space_groups/index.html", "autoapi/aim2dat/utils/units/index.html", "changelog.html", "examples.html", "examples/fct-discretization.html", "examples/fct-fingerprint_comparison.html", "examples/plots-band_structure_and_pdos_cp2k.html", "examples/plots-band_structure_and_pdos_fhi-aims.html", "examples/plots-band_structure_and_pdos_phonopy.html", "examples/plots-band_structure_and_pdos_qe.html", "examples/plots-band_structure_materials_project.html", "examples/plots-partial_charges_critic2.html", "examples/plots-planar_fields_critic2.html", "examples/plots-simple_plot.html", "examples/plots-spectroscopy.html", "examples/strct-coordination_number_analysis.html", "examples/strct-odb_interfaces.html", "examples/strct-partial_rdf.html", "fa-overview.html", "htw-cp2k_calculations.html", "htw-overview.html", "htw-workflow_builders.html", "index.html", "inst_linux.html", "inst_windows.html", "installation.html", "ml-overview.html", "ml-scikit_learn.html", "plots-overview.html", "plots-properties_and_functions.html", "plots-simple_plot.html", "plots-subplots.html", "stra-multiple_structures.html", "stra-overview.html", "stra-structure.html", "stra-structure_importer.html", "stra-surfaces.html", "user_guide.html"]})