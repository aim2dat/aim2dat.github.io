{
 "cells": [
  {
   "cell_type": "raw",
   "id": "7c649dc9",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "============================================================\n",
    "Interfaces to online databases and random crystal generation\n",
    "============================================================\n",
    "\n",
    "The :class:`StructureImporter <aim2dat.strct.StructureImporter>` class has the purpose to produce structure pools which can be further analysed or used as input for high-throughput workflows straightaway.\n",
    "As such the class offers interfaces to several online databases as well as to the |pyxtal_page| python package to randomly generate crystal structures."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bfb4f0a-e7e7-4959-aa7a-9241558d2f76",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aim2dat.strct import StructureImporter\n",
    "\n",
    "strct_imp = StructureImporter()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5c158bc0",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Interfaces to the following databases are currently supported:\n",
    "\n",
    "* :meth:`import_from_mp <aim2dat.strct.StructureImporter.import_from_mp>` and :meth:`append_from_mp_by_id <aim2dat.strct.StructureImporter.append_from_mp_by_id>` query structures from the |mp_page|.\n",
    "* :meth:`import_from_oqmd <aim2dat.strct.StructureImporter.import_from_oqmd>` queries structure from the  |oqmd_page|.\n",
    "* :meth:`import_from_optimade <aim2dat.strct.StructureImporter.import_from_optimade>` connects to several databases via the |optimade_page|.\n",
    "\n",
    "Crystals can be imported by using the implemented ``import_*`` or ``append_*`` functions and giving the chemical formula for a specific stoichiometry or an element set as input parameter:\n",
    "\n",
    ".. |mp_page| raw:: html\n",
    "\n",
    "   <a href=\"https://materialsproject.org/\" target=\"_blank\">materials project (MP)</a>\n",
    "   \n",
    ".. |oqmd_page| raw:: html\n",
    "\n",
    "   <a href=\"https://oqmd.org/\" target=\"_blank\">open quantum materials database (OQMD)</a>\n",
    "   \n",
    ".. |optimade_page| raw:: html\n",
    "\n",
    "   <a href=\"https://optimade.org/\" target=\"_blank\">optimade interface</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26009b87",
   "metadata": {},
   "outputs": [],
   "source": [
    "Cs2Te_structures = strct_imp.import_from_oqmd(\"Cs2Te\")\n",
    "NaSb_structures = strct_imp.import_from_oqmd(\"Cs-Sb\")"
   ]
  },
  {
   "cell_type": "raw",
   "id": "d352dbac",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The imported structures of the query are returned as a :class:`StructureCollection <aim2dat.strct.StructureCollection>` object but also added to an internal  :class:`StructureCollection <aim2dat.strct.StructureCollection>` object within the :class:`StructureImporter <aim2dat.strct.StructureImporter>` class that can accessed via the :attr:`structures <aim2dat.strct.StructureImporter.structures>` property:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d026fe71",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(strct_imp.structures)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bed09585",
   "metadata": {},
   "source": [
    "An overview of all imported structures is given by the string representation of the class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2afa43f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(strct_imp)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "0e2ba7b2",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Adding constraints\n",
    "==================\n",
    "\n",
    "As you may have noticed in the string representation of the object, one can apply constraintsto the structures that are imported.\n",
    "Before a new structure is imported all of the set constraints are checked and only structures that abide all constraints are added.\n",
    "\n",
    "New constraints can be set via the functions:\n",
    "\n",
    "* :meth:`add_chem_formula_constraint <aim2dat.strct.StructureImporter.add_chem_formula_constraint>`\n",
    "* :meth:`set_concentration_constraint <aim2dat.strct.StructureImporter.set_concentration_constraint>`\n",
    "* :meth:`set_attribute_constraint <aim2dat.strct.StructureImporter.set_attribute_constraint>`\n",
    "\n",
    "Additionally, the :attr:`neglect_elemental_structures <aim2dat.strct.StructureImporter.neglect_elemental_structures>` property can be set to prevent importing structures merely consisting of one element.\n",
    "\n",
    "As an example, we set a constraint on the chemical formula:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f44b0f0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "strct_imp.add_chem_formula_constraint(\"Na3Sb\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bef5ba38",
   "metadata": {},
   "source": [
    "Looking at the string representation, we find the new constraint listed with the additional information that the formula is 'reduced'. This means that also multiple of the formula, e.g. structures with the formula 'Na6Sb2' are allowed as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d27f4e72",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(strct_imp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ea80999",
   "metadata": {},
   "source": [
    "In order to only allow structures with a specific composition, we can set the keyword argument `reduced_formula` to `False`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b59c9951",
   "metadata": {},
   "outputs": [],
   "source": [
    "strct_imp.add_chem_formula_constraint(\"Na2Sb2\", reduced_formula=False)\n",
    "print(strct_imp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b67c21d2",
   "metadata": {},
   "source": [
    "If we now import the binary system 'Na-Sb' from the open quantum materials database, we will only receive crystals with the composition 'Na2Sb2' or with a Na:Sb ratio of 3:1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9592d88c",
   "metadata": {},
   "outputs": [],
   "source": [
    "structures_NaSb = strct_imp.import_from_oqmd(\"Na-Sb\")\n",
    "print(structures_NaSb)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "b95a47bf",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "All constraints can be removed via the function :attr:`remove_constraints <aim2dat.strct.StructureImporter.remove_constraints>`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b46a373f",
   "metadata": {},
   "outputs": [],
   "source": [
    "strct_imp.remove_constraints()\n",
    "print(strct_imp)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a445af97",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Generating random crystal structure interfacing the PyXtaL package\n",
    "==================================================================\n",
    "\n",
    "In addition to the interfaces to online databases the :class:`StructureImporter <aim2dat.strct.StructureImporter>` can also generate random crystal structures with a certain composition by making use of the |pyxtal_page| python package.\n",
    "\n",
    "To do so the function :meth:`generate_random_crystals <aim2dat.strct.StructureImporter.generate_random_crystals>` is used:\n",
    "\n",
    ".. |pyxtal_page| raw:: html\n",
    "\n",
    "   <a href=\"https://pyxtal.readthedocs.io/\" target=\"_blank\">PyXtaL</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ff8f678",
   "metadata": {},
   "outputs": [],
   "source": [
    "random_crystals = strct_imp.generate_random_crystals(\"Cs2Te\", max_structures=3)\n",
    "print(random_crystals)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "265b816a",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Related examples\n",
    "================\n",
    "\n",
    "* :doc:`Querying crystals from online databases <examples/strct-odb_interfaces>`\n",
    "\n",
    "Related API instances\n",
    "=====================\n",
    "\n",
    "* :class:`StructureImporter <aim2dat.strct.StructureImporter>`"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
