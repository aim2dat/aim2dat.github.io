{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "424125d2",
   "metadata": {},
   "source": [
    "# Running high-throughput calculations using CP2K\n",
    "\n",
    "The high-throughput work chains for CP2K can be divided in two different types both inheriting the AiiDA ``WorkChain`` or ``RestartWorkChain`` classes (further information is available on the <a href=\"https://aiida.readthedocs.io\" target=\"_blank\">AiiDA documentation page</a>):\n",
    "\n",
    "* The *core* work chains perform specific tasks, e.g. cell optimization, calculation of the electronic band structure, identifying parameters that converge the SCF-cycles, etc. As such the *core* work chains can be understood as wrappers for one or several calculations of the AiiDA class ``CalculationJob``. The input parameters of the work chains include most of the input parameters of the CP2K ``CalculationJob`` but add on-top some parameters to facilitate the usage.\n",
    "* The *combined* work chains combine and call one or several core work chains to calculate a set of properties. The input parameters of the *combined* work chain are completely custom and combine several _core_ work chains.\n",
    "\n",
    "## Supported CP2K versions\n",
    "\n",
    "The input/output parsers currently support CP2K versions between 8.1 and 2024.1. In order to have the correct formatting of the input file, the code version is extracted via the code label or description. If the extraction fails, the latest version of the code is assumed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "874859e2",
   "metadata": {},
   "source": [
    "## The *core* work chains\n",
    "\n",
    "The _core_ work chains are designed to perform specific tasks, the following work chains are implemented:\n",
    "\n",
    "* *find_scf_p* work chain: This work chain runs SCF-calculations using different pre-defined numerical parameters to find a set of parameters that can converge the Kohn-Sham equations.\n",
    "* *geo_opt* work chain: Optimization of the atomic positions minimizing the internal forces.\n",
    "* *cell_opt* work chain: Optimization of the atomic positions and the unit cell minimizing the internal pressure and forces.\n",
    "* *band_structure* work chain: Calculation of the band structure of a crystal.\n",
    "* *pdos* work chain: Calculation of the electronic projected density of states using a Gamma-point only super cell calculation.\n",
    "* *eigenvalues* work chain: Calculation of the electronic eigenvalues of the structure.\n",
    "* *partial_charges* work chain: Calculation of the partial charges. So far the Mulliken and Hirshfeld schemes are implemented using the internal routines of CP2K. The DDEC schemes can be used via the chargemol code and the Bader scheme can be used via the critic2 code.\n",
    "* *cube* work chain: Calculation and storage of cube files.\n",
    "* *planar_fields* work chain: Calculation of planar fields using CP2K and critic2.\n",
    "\n",
    "## The *combined* work chains\n",
    "\n",
    "* *electronic_properties* work chain: Calculation of the relaxed unit cell and different electronic properties.\n",
    "* *surface_opt* work chain: Calculation of the converged and relaxed surface slab."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cd265bc",
   "metadata": {},
   "source": [
    "## Exit-codes\n",
    "\n",
    "All error messages in AiiDA are defined by a positive integer number. In this library we obey the follwoing conventions:\n",
    "\n",
    "* 0-399: These numbers are reserved for AiiDA-internal error codes (see <a href=\"https://aiida.readthedocs.io/projects/aiida-core/en/latest/topics/processes/usage.html#exit-code-conventions\" target=\"_blank\">here</a>).\n",
    "* 400-599: Numbers used for the cp2k calculation jobs.\n",
    "* 600-699: Numbers used for core work chains.\n",
    "* 700-799: Numbers used for combined work chains.\n",
    "\n",
    "### List of all exit status messages:\n",
    "\n",
    "Calculation job:\n",
    "\n",
    "* 400 - ERROR_OUT_OF_WALLTIME: The calculation stopped prematurely because it ran out of walltime.\n",
    "* 401 - ERROR_INTERRUPTED: The calculation did not finish properly.\n",
    "* 402 - ERROR_ODD_NR_ELECTRONS: Odd number of electrons, UKS or ROKS has to be used.\n",
    "* 403 - ERROR_NEED_ADDED_MOS: Unoccupied orbitals have to be added.\n",
    "* 404 - ERROR_ILL_CONDITIONED_MATRIX: Cholesky decompose failed due to ill-conditioned matrix.\n",
    "* 405 - ERROR_BAD_CONDITION_NUMBER: Bad condition number R_COND (smaller than the machine working precision).\n",
    "* 500 - ERROR_GEOMETRY_CONVERGENCE_NOT_REACHED: The ionic minimization cycle did not converge for the given thresholds.\n",
    "\n",
    "_Core_ work chains:\n",
    "\n",
    "* 600 - ERROR_INPUT_WRONG_VALUE: Input parameter “{parameter}” contains an unsupported value.\n",
    "* 601 - ERROR_INPUT_DEPENDENCY: Input parameter “{parameter1}” needs “{parameter2}” to be set.\n",
    "* 602 - ERROR_INPUT_LOGICAL: Either input parameter “{parameter1}” or “{parameter2}” have to be set.\n",
    "* 610 - ERROR_SCF_PARAMETERS: No parameters found to converge the Kohn-Sham equations.\n",
    "* 611 - ERROR_CALCULATION_ABORTED: Calculation did not finish properly.\n",
    "* 612 - ERROR_OPTIMIZATION_NOT_CONVERGED: Could not optimize the structure below the set thresholds.\n",
    "\n",
    "_Combined_ work chains:\n",
    "\n",
    "* 700 - ERROR_SCF_PARAMETERS: SCF-parameters could not be retrieved.\n",
    "* 701 - ERROR_CELL_OPT: Crystal structure could not be converged.\n",
    "* 702 - ERROR_BAND_STRUCTURE: Band structure could not be calculated.\n",
    "* 703 - ERROR_EIGENVALUES: Eigenvalues could not be calculated.\n",
    "* 704 - ERROR_PDOS: PDOS could not be calculated."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
