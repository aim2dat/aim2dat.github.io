{
 "cells": [
  {
   "cell_type": "raw",
   "id": "c472f096",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "======================================================\n",
    "Handling complex workflows using the workflow builders\n",
    "======================================================\n",
    "\n",
    "The :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>` and :class:`MultipleWorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder>` classes are designed to manage extended workflows consisting of a conjunction of different AiiDA processes. Input-parameters and logical dependencies can be defined in a protocol which is given as a specifically formated python-dictionary or written in a yaml-file.\n",
    "The objects can determine the current state (accomplished tasks) of a workflow for a given AiiDA `parent-node` and generate the input-parameters for the next task of the workflow.\n",
    "While the :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>` class controls the workflow for a single `parent-node` the :class:`MultipleWorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder>` class consists of several :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>`'s instances and can handle multiple `parent-nodes` using the same workflow protocol for each.\n",
    "\n",
    "In the following we use the WorkflowBuilder class to examplify the user interface, however, setting the workflow protocol and input parameters works the same for both objects.\n",
    "First, the appropriate AiiDA profile is loaded and an instance of the class is created:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcd1a884-a5ba-4e08-937e-304d1ac3fc94",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aim2dat.aiida_workflows.workflow_builder import WorkflowBuilder\n",
    "import aiida\n",
    "\n",
    "aiida.load_profile(\"tests\")\n",
    "wf_builder = WorkflowBuilder()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "460eddeb",
   "metadata": {},
   "source": [
    "## The workflow protocol\n",
    "\n",
    "The workflow protocols consists of three different sections:\n",
    "\n",
    "* _tasks_: Is a dictionary containing the details and dependencies for the tasks that can be run with the current workflow.\n",
    "* _general_input_: defines the preset parameters shared by all work chains.\n",
    "* _user_input_: defines input parameters that are set by the user.\n",
    "\n",
    "All predefined protocols are found in the folder: \"aim2dat/aim2dat/aiida_workflows/protocols/\".\n",
    "The workflow protocols support versions, which the suffix `\"_v*.*\"` (* denotes an integer number) a specific protocol version can be chosen.\n",
    "If the suffix is omitted the latest protocol version is chosen.\n",
    "At the moment the following protocols are implemented:\n",
    "\n",
    "| Protocol                            | Latest version | Description                    |\n",
    "| ----------------------------------- | -------------- | ------------------------------ |\n",
    "| _arithmetic-testing_                | v1.1           | Protocol for testing purposes. |\n",
    "| _seekpath-standard_                 | v1.0           | Protocol for a seek-path analysis. |\n",
    "| _cp2k-crystal-mofs_                 | v2.0           | Protocol to run DFT calculations on MOFs using CP2K. |\n",
    "| _cp2k-crystal-preopt_               | v3.1           | Protocol to pre-optimize inorganic crystals with loose parameters using CP2K. |\n",
    "| _cp2k-crystal-standard_             | v3.2           | Standard protocol to run DFT calculations on inorganic crystals using CP2K (<a href=\"https://doi.org/10.1063/5.0082710\" target=\"_blank\">doi:10.1063/5.0082710</a>). |\n",
    "| _cp2k-crystal-standard-keep-angles_ | v1.1           | Standard protocol for inorganic crystals but constraining lattice parameters. |\n",
    "| _cp2k-surface-standard_             | v1.0           | Protocol to run the surface workflow using CP2K. |\n",
    "| _cp2k-crystal-testing_              | v2.0           | Protocol to test the workflow for inorganic crystals with loose parameters using CP2K. |\n",
    "| _cp2k-surface-testing_              | v1.0           | Protocol to test the surface workflow with loose parameters using CP2K. |"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f795d7ac",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The protocol can be loaded by using the property :attr:`protocol` <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.protocol>` (same property for both classes), in this case we use a test protocol that is merely based on the arithmetic `add_multiply` calcfunction. In general workflows can combine any kind of AiiDA processes defining input-parameters and dependencies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09261f43-ddc6-4fcf-b7ce-515fc54f0358",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.protocol = \"arithmetic-testing\""
   ]
  },
  {
   "cell_type": "raw",
   "id": "7d9e5286",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "All tasks of the workflow can be printed with the property :attr:`tasks` <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.tasks>`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "336c1c80-3ab9-48de-9d48-748643d425dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.tasks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb95710f-51ac-4b78-875f-0bc385321515",
   "metadata": {},
   "source": [
    "## Setting up the input parameters and parent node\n",
    "\n",
    "The provenance of the workflow is defined via the parent node, it is input for all initial tasks of the workflow.\n",
    "Here, we create a new aiida node without history and pass it to the builder-object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b2574e3-cb75-45a2-b4dd-63fb1b24e361",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiida.plugins import DataFactory\n",
    "\n",
    "Float = DataFactory(\"core.float\")\n",
    "parent_node = Float(4)\n",
    "\n",
    "wf_builder.parent_node = parent_node"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed2b4584-6c5f-40d2-9fc1-1fe46538661d",
   "metadata": {},
   "source": [
    "And we can set additional input-parameters (parameters can be given as python types or AiiDA nodes). A dash and subsequent greater than sign (_->_) highlight an individual input parameter defined for just one task of the workflow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f301b08-07a3-4e74-b772-9979e748e75b",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.set_user_input(\"y\", 5)\n",
    "wf_builder.set_user_input(\"y->task_4.1\", 11.0)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "462ea8b7",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Checking the workflow state\n",
    "===========================\n",
    "\n",
    "At any time we can check the status of the workflow via the method :meth:`determine_workflow_state <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.determine_workflow_state>`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36deb911-820e-4499-b2ec-87792bb13fad",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.determine_workflow_state()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1224f06c-8179-442e-9146-18d10fc89263",
   "metadata": {},
   "source": [
    "The builder checks whether any work chains with matching input parameters have been performed on the structure. In this case there are no processes run that conform the workflow protocol."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "adefd41e-3ec1-4164-adb3-4f00ceefb091",
   "metadata": {},
   "source": [
    "## Executing workflow tasks\n",
    "\n",
    "The input for the initial task can be created using the 'builder'-method of the AiiDA work chain or calculation or a dictionary of input-parameters for AiiDA calcfunctions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "982109f0-97c4-45f2-bc87-50f9bbf46230",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiida.engine import run\n",
    "\n",
    "wc_builder = wf_builder.generate_inputs(\"task_1.1\")\n",
    "result = run(**wc_builder)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab404971-213e-4ce2-b140-83d2b7eb1189",
   "metadata": {},
   "source": [
    "If we check the workflow again, we see that the task 'task_1.1' is accomplished and we can continue with the next task:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18885d58-70a6-4e39-881f-5d593dd7b49b",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.determine_workflow_state()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0865821d-0887-4ab3-9d48-a06486e6fa92",
   "metadata": {},
   "source": [
    "Alternatively, we can run or submit the task straightaway using the methods :meth:`run_task <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.run_task>` or :meth:`submit_task <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.submit_task>`.\n",
    "The difference between the two methods is that the first uses AiiDA's `run` method which starts the process in the foreground and blocks the interface while the latter uses AiiDA's `submit` method which passes the process to the daemon that is running in the background."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1594182e-5562-413a-8a62-f1aba0e3de6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.run_task(\"task_1.2\")\n",
    "wf_builder.run_task(\"task_1.3\")\n",
    "wf_builder.run_task(\"task_2.1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3507154-46a7-4a9d-9968-f2468c688667",
   "metadata": {},
   "source": [
    "## Visualizing the provenance graph of the workflow\n",
    "\n",
    "Using the AiiDA built-in features the provenance graph of the workflow can be plotted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4dceebd1-7cc9-426c-9933-2fe68fb7af69",
   "metadata": {},
   "outputs": [],
   "source": [
    "wf_builder.graph_attributes = {\"graph_attr\": {\"size\": \"6!,6\"}}\n",
    "graph = wf_builder.generate_provenance_graph()\n",
    "graph.graphviz"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a46b624f",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The ``MultipleWorkflowBuilder`` class\n",
    "=====================================\n",
    "\n",
    "The main difference between the :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>` and the :class:`MultipleWorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder>` class is that the latter hosts a list of `parent-nodes` and :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>` instances:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "21548f32-d45c-4304-9ee7-1cab6bd44869",
   "metadata": {},
   "outputs": [],
   "source": [
    "from aim2dat.aiida_workflows.workflow_builder import MultipleWorkflowBuilder\n",
    "\n",
    "mwf_builder = MultipleWorkflowBuilder()\n",
    "mwf_builder.protocol = \"arithmetic-testing\"\n",
    "\n",
    "for n in range(0, 5):\n",
    "    mwf_builder.add_parent_node(Float(n))"
   ]
  },
  {
   "cell_type": "raw",
   "id": "0a7b019d",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "The user input parameters can be set likewise to the :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>` class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e69f9cfd-e42f-4e18-b005-1f0146edcc6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.set_user_input(\"y\", 2.0)\n",
    "mwf_builder.set_user_input(\"y->task_4.1\", 3.0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "441da379-5512-499b-886b-b7a9e4905e09",
   "metadata": {},
   "source": [
    "The status information as well as process nodes and workflow results is therefore given as pandas dataframes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc472f43-479b-4f2a-9813-ab2a29002eb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.return_workflow_states()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4375befc-b12d-4c5e-9875-65788e4201e6",
   "metadata": {},
   "source": [
    "Different tasks can be started for all `parent-nodes` within one function call via the :meth:`run_task <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.run_task>` or :meth:`submit_task <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.submit_task>` functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7cbc330-81bc-466b-b09a-f1a10808364f",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.run_task(\"task_1.1\")\n",
    "mwf_builder.return_workflow_states()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "098dbcff-4c84-4a1f-bb42-109c034120a8",
   "metadata": {},
   "source": [
    "The tasks can be started for a subset of the _parent-nodes_ by using the ``interval`` parameter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d037f1a4-e6c9-4acd-b1ba-550e3a06a4c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.run_task(\"task_1.2\", interval=[0, 3])\n",
    "mwf_builder.return_workflow_states()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7f45a4a-3299-40d5-b8b8-c451b5b94e98",
   "metadata": {},
   "source": [
    "Several tasks can be started consecutively by setting a task queue:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0f6dff7-913b-48b3-9db5-5d4b575d3888",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.add_to_task_queue(\"task_1.2\", run_type=\"run\")\n",
    "mwf_builder.add_to_task_queue(\"task_1.3\", run_type=\"run\")\n",
    "mwf_builder.add_to_task_queue(\"task_2.1\", run_type=\"run\")\n",
    "mwf_builder.add_to_task_queue(\"task_2.2\", run_type=\"run\")\n",
    "mwf_builder.add_to_task_queue(\"task_3.1\", run_type=\"run\")\n",
    "mwf_builder.add_to_task_queue(\"task_4.1\", run_type=\"run\")\n",
    "mwf_builder.execute_task_queue()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3327db02-bd52-4fe4-a16d-11e504e16331",
   "metadata": {},
   "source": [
    "Additional information can be returned via the functions [``return_process_nodes``](aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_process_nodes) and [``return_results``](aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder.return_results):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b855349-3d47-4ccd-89bc-5e29b7cbdf04",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.return_process_nodes()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b828744-5958-44b8-8a35-c57d6b9ef8f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.return_results()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "c2077ea9",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Storing and loading workflows\n",
    "=============================\n",
    "\n",
    "Both, the :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>` and the :class:`MultipleWorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder>` have the methods :meth:`to_file <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.to_file>` and :meth:`from_file <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder.from_file>` implemented which allows to store the workflow protocol and process nodes in a yaml-file.\n",
    "This feature can be also used to share the workflow information by exporting/importing the process nodes as well (see the |aiida_doc| for more details).\n",
    "\n",
    ".. |aiida_doc| raw:: html\n",
    "\n",
    "   <a href=\"https://aiida.readthedocs.io/projects/aiida-core/en/latest/howto/share_data.html#sharing-aiida-archives\" target=\"_blank\">AiiDA documentation</a>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7502e5d1-c9d7-464e-9545-b481eb57d67a",
   "metadata": {},
   "outputs": [],
   "source": [
    "mwf_builder.to_file(\"test_workflow.yaml\")\n",
    "\n",
    "mwf_builder2 = MultipleWorkflowBuilder.from_file(\"test_workflow.yaml\")\n",
    "mwf_builder2.return_workflow_states()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "7ee9ae0a",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "Related API instances\n",
    "=====================\n",
    "\n",
    "* :class:`WorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.WorkflowBuilder>`\n",
    "* :class:`MultipleWorkflowBuilder <aim2dat.aiida_workflows.workflow_builder.MultipleWorkflowBuilder>`"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
