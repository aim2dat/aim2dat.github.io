:py:mod:`aim2dat.aiida_data.surface_data`
=========================================

.. py:module:: aim2dat.aiida_data.surface_data

.. autoapi-nested-parse::

   AiiDA data classes for surfaces.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   aim2dat.aiida_data.surface_data.SurfaceData





.. py:class:: SurfaceData(aperiodic_dir=2, miller_indices=(1, 0, 0), termination=1, **kwargs)


   Bases: :py:obj:`aiida.orm.Data`

   AiiDA data object to store surface data.


   .. rubric:: Overview

   .. list-table:: Properties
      :header-rows: 0
      :widths: auto

      * - :py:obj:`aperiodic_dir <aim2dat.aiida_data.surface_data.SurfaceData.aperiodic_dir>`
        - Non-periodic direction of the slab.
      * - :py:obj:`backend <aim2dat.aiida_data.surface_data.SurfaceData.backend>`
        - Get the backend for this entity
      * - :py:obj:`backend_entity <aim2dat.aiida_data.surface_data.SurfaceData.backend_entity>`
        - Get the implementing class for this object
      * - :py:obj:`bottom_terminating_structure <aim2dat.aiida_data.surface_data.SurfaceData.bottom_terminating_structure>`
        - Bottom terminating structure of the surface.
      * - :py:obj:`computer <aim2dat.aiida_data.surface_data.SurfaceData.computer>`
        - Return the computer of this node.
      * - :py:obj:`creator <aim2dat.aiida_data.surface_data.SurfaceData.creator>`
        - Return the creator of this node or None if it does not exist.
      * - :py:obj:`ctime <aim2dat.aiida_data.surface_data.SurfaceData.ctime>`
        - Return the node ctime.
      * - :py:obj:`description <aim2dat.aiida_data.surface_data.SurfaceData.description>`
        - Return the node description.
      * - :py:obj:`id <aim2dat.aiida_data.surface_data.SurfaceData.id>`
        - Return the id for this entity.
      * - :py:obj:`is_stored <aim2dat.aiida_data.surface_data.SurfaceData.is_stored>`
        - Return whether the entity is stored.
      * - :py:obj:`is_valid_cache <aim2dat.aiida_data.surface_data.SurfaceData.is_valid_cache>`
        - Hook to exclude certain ``Node`` classes from being considered a valid cache.
      * - :py:obj:`label <aim2dat.aiida_data.surface_data.SurfaceData.label>`
        - Return the node label.
      * - :py:obj:`logger <aim2dat.aiida_data.surface_data.SurfaceData.logger>`
        - Return the logger configured for this Node.
      * - :py:obj:`miller_indices <aim2dat.aiida_data.surface_data.SurfaceData.miller_indices>`
        - Miller indices of the surface facet.
      * - :py:obj:`mtime <aim2dat.aiida_data.surface_data.SurfaceData.mtime>`
        - Return the node mtime.
      * - :py:obj:`node_type <aim2dat.aiida_data.surface_data.SurfaceData.node_type>`
        - Return the node type.
      * - :py:obj:`pk <aim2dat.aiida_data.surface_data.SurfaceData.pk>`
        - Return the primary key for this entity.
      * - :py:obj:`process_type <aim2dat.aiida_data.surface_data.SurfaceData.process_type>`
        - Return the node process type.
      * - :py:obj:`repeating_structure <aim2dat.aiida_data.surface_data.SurfaceData.repeating_structure>`
        - Repeating structure of the surface.
      * - :py:obj:`source <aim2dat.aiida_data.surface_data.SurfaceData.source>`
        - Gets the dictionary describing the source of Data object. Possible fields:
      * - :py:obj:`surface_area <aim2dat.aiida_data.surface_data.SurfaceData.surface_area>`
        - Surface area.
      * - :py:obj:`termination <aim2dat.aiida_data.surface_data.SurfaceData.termination>`
        - Termination of the surface facet.
      * - :py:obj:`top_terminating_structure <aim2dat.aiida_data.surface_data.SurfaceData.top_terminating_structure>`
        - Top terminating structure of the surface.
      * - :py:obj:`top_terminating_structure_nsym <aim2dat.aiida_data.surface_data.SurfaceData.top_terminating_structure_nsym>`
        - Top terminating non-symmetric structure of the surface.
      * - :py:obj:`user <aim2dat.aiida_data.surface_data.SurfaceData.user>`
        - Return the user of this node.
      * - :py:obj:`uuid <aim2dat.aiida_data.surface_data.SurfaceData.uuid>`
        - Return the node UUID.


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto

      * - :py:obj:`Collection <aim2dat.aiida_data.surface_data.SurfaceData.Collection>`\ ()
        - Return the collection type for this class.
      * - :py:obj:`base <aim2dat.aiida_data.surface_data.SurfaceData.base>`\ ()
        - Return the node base namespace.
      * - :py:obj:`class_node_type <aim2dat.aiida_data.surface_data.SurfaceData.class_node_type>`\ ()
        - Returns the node type of this node (sub) class.
      * - :py:obj:`clone <aim2dat.aiida_data.surface_data.SurfaceData.clone>`\ ()
        - Create a clone of the Data node.
      * - :py:obj:`collection <aim2dat.aiida_data.surface_data.SurfaceData.collection>`\ ()
        - Get a collection for objects of this type, with the default backend.
      * - :py:obj:`convert <aim2dat.aiida_data.surface_data.SurfaceData.convert>`\ (object_format, \*args)
        - Convert the AiiDA StructureData into another python object
      * - :py:obj:`entry_point <aim2dat.aiida_data.surface_data.SurfaceData.entry_point>`\ ()
        - Return the entry point associated this node class.
      * - :py:obj:`export <aim2dat.aiida_data.surface_data.SurfaceData.export>`\ (path, fileformat, overwrite, \*\*kwargs)
        - Save a Data object to a file.
      * - :py:obj:`get <aim2dat.aiida_data.surface_data.SurfaceData.get>`\ (\*\*kwargs)
        - `class` Get an entity of the collection matching the given filters.
      * - :py:obj:`get_collection <aim2dat.aiida_data.surface_data.SurfaceData.get_collection>`\ (backend)
        - `class` Get a collection for objects of this type for a given backend.
      * - :py:obj:`get_description <aim2dat.aiida_data.surface_data.SurfaceData.get_description>`\ ()
        - Return a string with a description of the node.
      * - :py:obj:`get_export_formats <aim2dat.aiida_data.surface_data.SurfaceData.get_export_formats>`\ ()
        - `class` Get the list of valid export format strings
      * - :py:obj:`importfile <aim2dat.aiida_data.surface_data.SurfaceData.importfile>`\ (fname, fileformat)
        - Populate a Data object from a file.
      * - :py:obj:`importstring <aim2dat.aiida_data.surface_data.SurfaceData.importstring>`\ (inputstring, fileformat, \*\*kwargs)
        - Converts a Data object to other text format.
      * - :py:obj:`initialize <aim2dat.aiida_data.surface_data.SurfaceData.initialize>`\ ()
        - Initialize instance attributes.
      * - :py:obj:`objects <aim2dat.aiida_data.surface_data.SurfaceData.objects>`\ ()
        - Get a collection for objects of this type, with the default backend.
      * - :py:obj:`set_bottom_terminating_structure <aim2dat.aiida_data.surface_data.SurfaceData.set_bottom_terminating_structure>`\ (elements, positions, cell, is_cartesian, kinds)
        - Set bottom-terminating non-symmetric structure.
      * - :py:obj:`set_repeating_structure <aim2dat.aiida_data.surface_data.SurfaceData.set_repeating_structure>`\ (elements, positions, cell, is_cartesian, translational_vector, kinds)
        - Set repeating structure.
      * - :py:obj:`set_source <aim2dat.aiida_data.surface_data.SurfaceData.set_source>`\ (source)
        - Sets the dictionary describing the source of Data object.
      * - :py:obj:`set_top_terminating_structure <aim2dat.aiida_data.surface_data.SurfaceData.set_top_terminating_structure>`\ (elements, positions, cell, is_cartesian, kinds)
        - Set top-terminating structure.
      * - :py:obj:`set_top_terminating_structure_nsym <aim2dat.aiida_data.surface_data.SurfaceData.set_top_terminating_structure_nsym>`\ (elements, positions, cell, is_cartesian)
        - Set top-terminating non-symmetric structure.
      * - :py:obj:`store <aim2dat.aiida_data.surface_data.SurfaceData.store>`\ ()
        - Store the node in the database while saving its attributes and repository directory.
      * - :py:obj:`store_all <aim2dat.aiida_data.surface_data.SurfaceData.store_all>`\ ()
        - Store the node, together with all input links.



   .. py:property:: aperiodic_dir

      Non-periodic direction of the slab.

   .. py:property:: backend
      :type: aiida.orm.implementation.StorageBackend

      Get the backend for this entity

   .. py:property:: backend_entity
      :type: BackendEntityType

      Get the implementing class for this object

   .. py:property:: bottom_terminating_structure

      Bottom terminating structure of the surface.

   .. py:property:: computer
      :type: Optional[aiida.orm.computers.Computer]

      Return the computer of this node.

   .. py:property:: creator

      Return the creator of this node or None if it does not exist.

      :return: the creating node or None

   .. py:property:: ctime
      :type: datetime.datetime

      Return the node ctime.

      :return: the ctime

   .. py:property:: description
      :type: str

      Return the node description.

      :return: the description

   .. py:property:: id
      :type: int | None

      Return the id for this entity.

      This identifier is guaranteed to be unique amongst entities of the same type for a single backend instance.

      .. deprecated: Will be removed in v3, use `pk` instead.

      :return: the entity's id

   .. py:property:: is_stored
      :type: bool

      Return whether the entity is stored.

   .. py:property:: is_valid_cache
      :type: bool

      Hook to exclude certain ``Node`` classes from being considered a valid cache.

      The base class assumes that all node instances are valid to cache from, unless the ``_VALID_CACHE_KEY`` extra
      has been set to ``False`` explicitly. Subclasses can override this property with more specific logic, but should
      probably also consider the value returned by this base class.

   .. py:property:: label
      :type: str

      Return the node label.

      :return: the label

   .. py:property:: logger
      :type: Optional[logging.Logger]

      Return the logger configured for this Node.

      :return: Logger object

   .. py:property:: miller_indices

      Miller indices of the surface facet.

   .. py:property:: mtime
      :type: datetime.datetime

      Return the node mtime.

      :return: the mtime

   .. py:property:: node_type
      :type: str

      Return the node type.

      :return: the node type

   .. py:property:: pk
      :type: int | None

      Return the primary key for this entity.

      This identifier is guaranteed to be unique amongst entities of the same type for a single backend instance.

      :return: the entity's principal key

   .. py:property:: process_type
      :type: Optional[str]

      Return the node process type.

      :return: the process type

   .. py:property:: repeating_structure

      Repeating structure of the surface.

   .. py:property:: source

      Gets the dictionary describing the source of Data object. Possible fields:

      * **db_name**: name of the source database.
      * **db_uri**: URI of the source database.
      * **uri**: URI of the object's source. Should be a permanent link.
      * **id**: object's source identifier in the source database.
      * **version**: version of the object's source.
      * **extras**: a dictionary with other fields for source description.
      * **source_md5**: MD5 checksum of object's source.
      * **description**: human-readable free form description of the object's source.
      * **license**: a string with a type of license.

      .. note:: some limitations for setting the data source exist, see ``_validate`` method.

      :return: dictionary describing the source of Data object.

   .. py:property:: surface_area

      Surface area.

   .. py:property:: termination

      Termination of the surface facet.

   .. py:property:: top_terminating_structure

      Top terminating structure of the surface.

   .. py:property:: top_terminating_structure_nsym

      Top terminating non-symmetric structure of the surface.

   .. py:property:: user
      :type: aiida.orm.users.User

      Return the user of this node.

   .. py:property:: uuid
      :type: str

      Return the node UUID.

      :return: the string representation of the UUID


   .. py:method:: Collection()

      Return the collection type for this class.

      This used to be a class argument with the value ``NodeCollection``. The argument is deprecated and this property
      is here for backwards compatibility to print the deprecation warning.


   .. py:method:: base() -> NodeBase

      Return the node base namespace.


   .. py:method:: class_node_type() -> str

      Returns the node type of this node (sub) class.


   .. py:method:: clone()

      Create a clone of the Data node.

      :returns: an unstored clone of this Data node


   .. py:method:: collection() -> CollectionType

      Get a collection for objects of this type, with the default backend.

      :return: an object that can be used to access entities of this type


   .. py:method:: convert(object_format=None, *args)

      Convert the AiiDA StructureData into another python object

      :param object_format: Specify the output format


   .. py:method:: entry_point() -> Optional[importlib_metadata.EntryPoint]

      Return the entry point associated this node class.

      :return: the associated entry point or ``None`` if it isn't known.


   .. py:method:: export(path, fileformat=None, overwrite=False, **kwargs)

      Save a Data object to a file.

      :param fname: string with file name. Can be an absolute or relative path.
      :param fileformat: kind of format to use for the export. If not present,
          it will try to use the extension of the file name.
      :param overwrite: if set to True, overwrites file found at path. Default=False
      :param kwargs: additional parameters to be passed to the
          _exportcontent method
      :return: the list of files created


   .. py:method:: get(**kwargs)
      :classmethod:

      Get an entity of the collection matching the given filters.

      .. deprecated: Will be removed in v3, use `Entity.collection.get` instead.



   .. py:method:: get_collection(backend: aiida.orm.implementation.StorageBackend)
      :classmethod:

      Get a collection for objects of this type for a given backend.

      .. note:: Use the ``collection`` class property instead if the currently loaded backend or backend of the
          default profile should be used.

      :param backend: The backend of the collection to use.
      :return: A collection object that can be used to access entities of this type.


   .. py:method:: get_description() -> str

      Return a string with a description of the node.

      :return: a description string


   .. py:method:: get_export_formats()
      :classmethod:

      Get the list of valid export format strings

      :return: a list of valid formats


   .. py:method:: importfile(fname, fileformat=None)

      Populate a Data object from a file.

      :param fname: string with file name. Can be an absolute or relative path.
      :param fileformat: kind of format to use for the export. If not present,
          it will try to use the extension of the file name.


   .. py:method:: importstring(inputstring, fileformat, **kwargs)

      Converts a Data object to other text format.

      :param fileformat: a string (the extension) to describe the file format.
      :returns: a string with the structure description.


   .. py:method:: initialize() -> None

      Initialize instance attributes.

      This will be called after the constructor is called or an entity is created from an existing backend entity.


   .. py:method:: objects() -> CollectionType

      Get a collection for objects of this type, with the default backend.

      .. deprecated:: This will be removed in v3, use ``collection`` instead.

      :return: an object that can be used to access entities of this type


   .. py:method:: set_bottom_terminating_structure(elements, positions, cell, is_cartesian, kinds=None)

      Set bottom-terminating non-symmetric structure.

      :Parameters: * **elements** (*list*) -- List of elements or atomic numbers.
                   * **positions** (*list*) -- Nested list of the coordinates, either in cartesian or scaled coordinates.
                   * **cell** (*list or np.array*) -- Nested 3x3 list of the cell vectors in angstrom.
                   * **is_cartesian** (*bool*) -- Whether the coordinates are cartesian or scaled.


   .. py:method:: set_repeating_structure(elements, positions, cell, is_cartesian, translational_vector, kinds=None)

      Set repeating structure.

      :Parameters: * **elements** (*list*) -- List of elements or atomic numbers.
                   * **positions** (*list*) -- Nested list of the coordinates, either in cartesian or scaled coordinates.
                   * **cell** (*list or np.array*) -- Nested 3x3 list of the cell vectors in angstrom.
                   * **is_cartesian** (*bool*) -- Whether the coordinates are cartesian or scaled.
                   * **translational_vector** (*list or np.array*) -- Translational shift between two layers of repeating units.


   .. py:method:: set_source(source)

      Sets the dictionary describing the source of Data object.


   .. py:method:: set_top_terminating_structure(elements, positions, cell, is_cartesian, kinds=None)

      Set top-terminating structure.

      :Parameters: * **elements** (*list*) -- List of elements or atomic numbers.
                   * **positions** (*list*) -- Nested list of the coordinates, either in cartesian or scaled coordinates.
                   * **cell** (*list or np.array*) -- Nested 3x3 list of the cell vectors in angstrom.
                   * **is_cartesian** (*bool*) -- Whether the coordinates are cartesian or scaled.


   .. py:method:: set_top_terminating_structure_nsym(elements, positions, cell, is_cartesian)

      Set top-terminating non-symmetric structure.

      :Parameters: * **elements** (*list*) -- List of elements or atomic numbers.
                   * **positions** (*list*) -- Nested list of the coordinates, either in cartesian or scaled coordinates.
                   * **cell** (*list or np.array*) -- Nested 3x3 list of the cell vectors in angstrom.
                   * **is_cartesian** (*bool*) -- Whether the coordinates are cartesian or scaled.


   .. py:method:: store() -> Node

      Store the node in the database while saving its attributes and repository directory.

      After being called attributes cannot be changed anymore! Instead, extras can be changed only AFTER calling
      this store() function.

      :note: After successful storage, those links that are in the cache, and for which also the parent node is
          already stored, will be automatically stored. The others will remain unstored.


   .. py:method:: store_all() -> Node

      Store the node, together with all input links.

      Unstored nodes from cached incoming linkswill also be stored.



