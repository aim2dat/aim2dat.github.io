:py:mod:`aim2dat.aiida_workflows.cp2k.parsers`
==============================================

.. py:module:: aim2dat.aiida_workflows.cp2k.parsers

.. autoapi-nested-parse::

   Module containing custom parsers for AiiDA.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser
   aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser
   aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser




Attributes
~~~~~~~~~~

.. autoapisummary::

   aim2dat.aiida_workflows.cp2k.parsers.BandsData
   aim2dat.aiida_workflows.cp2k.parsers.GCubeData
   aim2dat.aiida_workflows.cp2k.parsers.StructureData
   aim2dat.aiida_workflows.cp2k.parsers.XyData



.. py:class:: Cp2kPartialChargesParser(node: aiida.orm.CalcJobNode)


   Bases: :py:obj:`_Cp2kBaseParser`

   Parser specifically designed to parse partial charges from CP2K output.


   .. rubric:: Overview

   .. list-table:: Properties
      :header-rows: 0
      :widths: auto

      * - :py:obj:`exit_codes <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.exit_codes>`
        - Return the exit codes defined for the process class of the node being parsed.
      * - :py:obj:`logger <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.logger>`
        - Return the logger preconfigured for the calculation node associated with this parser instance.
      * - :py:obj:`node <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.node>`
        - Return the node instance
      * - :py:obj:`outputs <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.outputs>`
        - Return the dictionary of outputs that have been registered.
      * - :py:obj:`retrieved <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.retrieved>`
        - \-


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto

      * - :py:obj:`get_outputs_for_parsing <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.get_outputs_for_parsing>`\ ()
        - Return the dictionary of nodes that should be passed to the `Parser.parse` call.
      * - :py:obj:`out <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.out>`\ (link_label, node)
        - Register a node as an output with the given link label.
      * - :py:obj:`parse <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse>`\ (\*\*kwargs)
        - Receives in input a dictionary of retrieved nodes. Does all the logic here.
      * - :py:obj:`parse_from_node <aim2dat.aiida_workflows.cp2k.parsers.Cp2kPartialChargesParser.parse_from_node>`\ (node, store_provenance, retrieved_temporary_folder)
        - `class` Parse the outputs directly from the `CalcJobNode`.


   .. py:attribute:: extra_output_functions
      :value: ['_parse_gaussian_cubes']

      

   .. py:attribute:: parser_type
      :value: 'partial_charges'

      


   .. py:property:: exit_codes
      :type: aiida.engine.ExitCodesNamespace

      Return the exit codes defined for the process class of the node being parsed.

      :returns: ExitCodesNamespace of ExitCode named tuples

   .. py:property:: logger

      Return the logger preconfigured for the calculation node associated with this parser instance.

      :return: `logging.Logger`

   .. py:property:: node
      :type: aiida.orm.CalcJobNode

      Return the node instance

      :return: the `CalcJobNode` instance

   .. py:property:: outputs

      Return the dictionary of outputs that have been registered.

      :return: an AttributeDict instance with the registered output nodes

   .. py:property:: retrieved
      :type: aiida.orm.FolderData



   .. py:method:: get_outputs_for_parsing()

      Return the dictionary of nodes that should be passed to the `Parser.parse` call.

      Output nodes can be marked as being required by the `parse` method, by setting the `pass_to_parser` attribute,
      in the `spec.output` call in the process spec of the `CalcJob`, to True.

      :return: dictionary of nodes that are required by the `parse` method


   .. py:method:: out(link_label: str, node: aiida.orm.Data) -> None

      Register a node as an output with the given link label.

      :param link_label: the name of the link label
      :param node: the node to register as an output
      :raises aiida.common.ModificationNotAllowed: if an output node was already registered with the same link label


   .. py:method:: parse(**kwargs)

      Receives in input a dictionary of retrieved nodes. Does all the logic here.


   .. py:method:: parse_from_node(node: aiida.orm.CalcJobNode, store_provenance=True, retrieved_temporary_folder=None) -> Tuple[Optional[Dict[str, Any]], aiida.orm.CalcFunctionNode]
      :classmethod:

      Parse the outputs directly from the `CalcJobNode`.

      If `store_provenance` is set to False, a `CalcFunctionNode` will still be generated, but it will not be stored.
      It's storing method will also be disabled, making it impossible to store, because storing it afterwards would
      not have the expected effect, as the outputs it produced will not be stored with it.

      This method is useful to test parsing in unit tests where a `CalcJobNode` can be mocked without actually having
      to run a `CalcJob`. It can also be useful to actually re-perform the parsing of a completed `CalcJob` with a
      different parser.

      :param node: a `CalcJobNode` instance
      :param store_provenance: bool, if True will store the parsing as a `CalcFunctionNode` in the provenance
      :param retrieved_temporary_folder: absolute path to folder with contents of `retrieved_temporary_list`
      :return: a tuple of the parsed results and the `CalcFunctionNode` representing the process of parsing




.. py:class:: Cp2kStandardParser(node: aiida.orm.CalcJobNode)


   Bases: :py:obj:`_Cp2kBaseParser`

   Standard parser for CP2K.


   .. rubric:: Overview

   .. list-table:: Properties
      :header-rows: 0
      :widths: auto

      * - :py:obj:`exit_codes <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.exit_codes>`
        - Return the exit codes defined for the process class of the node being parsed.
      * - :py:obj:`logger <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.logger>`
        - Return the logger preconfigured for the calculation node associated with this parser instance.
      * - :py:obj:`node <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.node>`
        - Return the node instance
      * - :py:obj:`outputs <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.outputs>`
        - Return the dictionary of outputs that have been registered.
      * - :py:obj:`retrieved <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.retrieved>`
        - \-


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto

      * - :py:obj:`get_outputs_for_parsing <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.get_outputs_for_parsing>`\ ()
        - Return the dictionary of nodes that should be passed to the `Parser.parse` call.
      * - :py:obj:`out <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.out>`\ (link_label, node)
        - Register a node as an output with the given link label.
      * - :py:obj:`parse <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse>`\ (\*\*kwargs)
        - Receives in input a dictionary of retrieved nodes. Does all the logic here.
      * - :py:obj:`parse_from_node <aim2dat.aiida_workflows.cp2k.parsers.Cp2kStandardParser.parse_from_node>`\ (node, store_provenance, retrieved_temporary_folder)
        - `class` Parse the outputs directly from the `CalcJobNode`.


   .. py:attribute:: extra_output_functions
      :value: ['_parse_pdos', '_parse_gaussian_cubes']

      

   .. py:attribute:: parser_type
      :value: 'standard'

      


   .. py:property:: exit_codes
      :type: aiida.engine.ExitCodesNamespace

      Return the exit codes defined for the process class of the node being parsed.

      :returns: ExitCodesNamespace of ExitCode named tuples

   .. py:property:: logger

      Return the logger preconfigured for the calculation node associated with this parser instance.

      :return: `logging.Logger`

   .. py:property:: node
      :type: aiida.orm.CalcJobNode

      Return the node instance

      :return: the `CalcJobNode` instance

   .. py:property:: outputs

      Return the dictionary of outputs that have been registered.

      :return: an AttributeDict instance with the registered output nodes

   .. py:property:: retrieved
      :type: aiida.orm.FolderData



   .. py:method:: get_outputs_for_parsing()

      Return the dictionary of nodes that should be passed to the `Parser.parse` call.

      Output nodes can be marked as being required by the `parse` method, by setting the `pass_to_parser` attribute,
      in the `spec.output` call in the process spec of the `CalcJob`, to True.

      :return: dictionary of nodes that are required by the `parse` method


   .. py:method:: out(link_label: str, node: aiida.orm.Data) -> None

      Register a node as an output with the given link label.

      :param link_label: the name of the link label
      :param node: the node to register as an output
      :raises aiida.common.ModificationNotAllowed: if an output node was already registered with the same link label


   .. py:method:: parse(**kwargs)

      Receives in input a dictionary of retrieved nodes. Does all the logic here.


   .. py:method:: parse_from_node(node: aiida.orm.CalcJobNode, store_provenance=True, retrieved_temporary_folder=None) -> Tuple[Optional[Dict[str, Any]], aiida.orm.CalcFunctionNode]
      :classmethod:

      Parse the outputs directly from the `CalcJobNode`.

      If `store_provenance` is set to False, a `CalcFunctionNode` will still be generated, but it will not be stored.
      It's storing method will also be disabled, making it impossible to store, because storing it afterwards would
      not have the expected effect, as the outputs it produced will not be stored with it.

      This method is useful to test parsing in unit tests where a `CalcJobNode` can be mocked without actually having
      to run a `CalcJob`. It can also be useful to actually re-perform the parsing of a completed `CalcJob` with a
      different parser.

      :param node: a `CalcJobNode` instance
      :param store_provenance: bool, if True will store the parsing as a `CalcFunctionNode` in the provenance
      :param retrieved_temporary_folder: absolute path to folder with contents of `retrieved_temporary_list`
      :return: a tuple of the parsed results and the `CalcFunctionNode` representing the process of parsing




.. py:class:: Cp2kTrajectoryParser(node: aiida.orm.CalcJobNode)


   Bases: :py:obj:`_Cp2kBaseParser`

   Parser which includes information on each motion step and (to-do) the trajectory.


   .. rubric:: Overview

   .. list-table:: Properties
      :header-rows: 0
      :widths: auto

      * - :py:obj:`exit_codes <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.exit_codes>`
        - Return the exit codes defined for the process class of the node being parsed.
      * - :py:obj:`logger <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.logger>`
        - Return the logger preconfigured for the calculation node associated with this parser instance.
      * - :py:obj:`node <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.node>`
        - Return the node instance
      * - :py:obj:`outputs <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.outputs>`
        - Return the dictionary of outputs that have been registered.
      * - :py:obj:`retrieved <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.retrieved>`
        - \-


   .. list-table:: Methods
      :header-rows: 0
      :widths: auto

      * - :py:obj:`get_outputs_for_parsing <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.get_outputs_for_parsing>`\ ()
        - Return the dictionary of nodes that should be passed to the `Parser.parse` call.
      * - :py:obj:`out <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.out>`\ (link_label, node)
        - Register a node as an output with the given link label.
      * - :py:obj:`parse <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse>`\ (\*\*kwargs)
        - Receives in input a dictionary of retrieved nodes. Does all the logic here.
      * - :py:obj:`parse_from_node <aim2dat.aiida_workflows.cp2k.parsers.Cp2kTrajectoryParser.parse_from_node>`\ (node, store_provenance, retrieved_temporary_folder)
        - `class` Parse the outputs directly from the `CalcJobNode`.


   .. py:attribute:: extra_output_functions
      :value: []

      

   .. py:attribute:: parser_type
      :value: 'trajectory'

      


   .. py:property:: exit_codes
      :type: aiida.engine.ExitCodesNamespace

      Return the exit codes defined for the process class of the node being parsed.

      :returns: ExitCodesNamespace of ExitCode named tuples

   .. py:property:: logger

      Return the logger preconfigured for the calculation node associated with this parser instance.

      :return: `logging.Logger`

   .. py:property:: node
      :type: aiida.orm.CalcJobNode

      Return the node instance

      :return: the `CalcJobNode` instance

   .. py:property:: outputs

      Return the dictionary of outputs that have been registered.

      :return: an AttributeDict instance with the registered output nodes

   .. py:property:: retrieved
      :type: aiida.orm.FolderData



   .. py:method:: get_outputs_for_parsing()

      Return the dictionary of nodes that should be passed to the `Parser.parse` call.

      Output nodes can be marked as being required by the `parse` method, by setting the `pass_to_parser` attribute,
      in the `spec.output` call in the process spec of the `CalcJob`, to True.

      :return: dictionary of nodes that are required by the `parse` method


   .. py:method:: out(link_label: str, node: aiida.orm.Data) -> None

      Register a node as an output with the given link label.

      :param link_label: the name of the link label
      :param node: the node to register as an output
      :raises aiida.common.ModificationNotAllowed: if an output node was already registered with the same link label


   .. py:method:: parse(**kwargs)

      Receives in input a dictionary of retrieved nodes. Does all the logic here.


   .. py:method:: parse_from_node(node: aiida.orm.CalcJobNode, store_provenance=True, retrieved_temporary_folder=None) -> Tuple[Optional[Dict[str, Any]], aiida.orm.CalcFunctionNode]
      :classmethod:

      Parse the outputs directly from the `CalcJobNode`.

      If `store_provenance` is set to False, a `CalcFunctionNode` will still be generated, but it will not be stored.
      It's storing method will also be disabled, making it impossible to store, because storing it afterwards would
      not have the expected effect, as the outputs it produced will not be stored with it.

      This method is useful to test parsing in unit tests where a `CalcJobNode` can be mocked without actually having
      to run a `CalcJob`. It can also be useful to actually re-perform the parsing of a completed `CalcJob` with a
      different parser.

      :param node: a `CalcJobNode` instance
      :param store_provenance: bool, if True will store the parsing as a `CalcFunctionNode` in the provenance
      :param retrieved_temporary_folder: absolute path to folder with contents of `retrieved_temporary_list`
      :return: a tuple of the parsed results and the `CalcFunctionNode` representing the process of parsing



.. py:data:: BandsData

   

.. py:data:: GCubeData

   

.. py:data:: StructureData

   

.. py:data:: XyData

   

