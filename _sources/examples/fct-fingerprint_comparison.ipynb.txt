{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "# Comparing two functions on a discretized grid\n",
    "\n",
    "The fingerprint introduced in [doi:10.1038/s41597-022-01754-z](https://doi.org/10.1038/s41597-022-01754-z) can be used to compare two functions in a flexible and efficient way.\n",
    "\n",
    "## How to create a grid\n",
    "\n",
    "The generation of grids is described in more detail [here](fct-discretization.ipynb).\n",
    "As an example we create two discretized axis and combine them into a ``DiscretizedGrid`` object:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aim2dat.fct import DiscretizedAxis\n",
    "from aim2dat.fct.fingerprint import FunctionDiscretizationFingerprint\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import yaml\n",
    "\n",
    "axis = DiscretizedAxis(axis_type=\"x\", max=20, min=0, min_step=0.2, max_num_steps=1)\n",
    "axis.discretization_method = \"uniform\"\n",
    "axis.discretize_axis()\n",
    "\n",
    "axis2 = DiscretizedAxis(axis_type=\"y\", max=0.3, min=0, min_step=0.003, max_num_steps=1)\n",
    "axis2.discretization_method = \"uniform\"\n",
    "axis2.discretize_axis()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid = axis + axis2\n",
    "grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid.create_grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "grid.plot_grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply the fringerprint\n",
    "First, show the example data. This DOS plot will be transferred to a discrete representation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "path = \"files/function_analysis/\"\n",
    "with open(path + \"example_energy_dos.yaml\") as file:\n",
    "    example_dos_energy, example_dos = np.array(yaml.safe_load(file))\n",
    "\n",
    "\n",
    "plt.plot(example_dos_energy, example_dos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create an instance of the `FunctionDiscretizationFingerprint` class\n",
    "The class expects the grid as an input."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectra_fp = FunctionDiscretizationFingerprint(grid=grid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate the fingerprint. The fingerprint will be stored in an internal dictionary in case a label is provided. The label is needed for the comparison of fingerprints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fp = spectra_fp.calculate_fingerprint(example_dos_energy, example_dos, label=\"test\")\n",
    "fp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fingerprint and grid can be visualized using the following method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectra_fp.plot_fingerprint(example_dos_energy, example_dos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Shift the DOS as an example for a comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectra_fp.plot_fingerprint(example_dos_energy, example_dos + 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fp_shifted = spectra_fp.calculate_fingerprint(\n",
    "    example_dos_energy, example_dos + 0.5, label=\"test_shifted\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare the two fingerprints. The return value measures the similarity. A value of 1 indicates the highest similarity, 0 the lowest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectra_fp.compare_fingerprints(\"test\", \"test_shifted\")"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
