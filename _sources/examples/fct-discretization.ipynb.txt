{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "# Creating a discretized grid to analyse functions\n",
    "\n",
    "## Create a discretized axis\n",
    "\n",
    "The ``DiscretizedAxis`` object allows to discretize a given range e.g. an energy or DOS range. At the moment, uniformly and normally distributed discretizations are implemented. The method can be chosen via ``discretization_method``. Either a string specifying the implemented methods or a custom function are allowed.\n",
    "\n",
    "The ``DiscretizedAxis`` expects the ``axis_type`` argument, this can be either \"x\" or \"y\". The other attributes can be set afterwards. The ``axis_type`` specifies the shape of the internal ``numpy array`` that stores the values of the axis.\n",
    "\n",
    "Create Two axis, both of ``axis_type`` ``x`` but with different ranges and discretization types. The ``normal`` discretization expects a ``mean`` and ``standard deviation``.\n",
    "In case of the uniform distribution, no further keywords are needed and the step size is specified via ``min_step``.\n",
    "\n",
    "Further arguments of the class are:\n",
    "\n",
    "* ``min``, ``max``: Specify the minimum and maximum value of the axis\n",
    "* ``max_num_steps``: Specifies the maximum step size for the gaussian distributed discretization which is ``max_num_steps`` multiplied with ``min_step``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aim2dat.fct import DiscretizedAxis\n",
    "\n",
    "axis = DiscretizedAxis(axis_type=\"x\", max=0.49, min=0, min_step=0.01)\n",
    "axis.discretization_method = \"gaussian\"\n",
    "axis.discretize_axis(mu=1, sigma=2)\n",
    "\n",
    "axis2 = DiscretizedAxis(axis_type=\"x\", max=1, min=0, min_step=0.02)\n",
    "axis2.discretization_method = \"uniform\"\n",
    "axis2.discretize_axis()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can now check that the axis is uniformly distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis.axis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normally distributed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis2.axis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "raw_mimetype": "text/restructuredtext"
   },
   "source": [
    "## Merge two objects with the same ``axis_type``\n",
    "\n",
    "\n",
    "The addition of two ``DiscretizedAxis`` objects leads to a merge of the two axis ranges. The axis of the first summand is kept. In case the second summand covers a range that is not covered by the first one, the part will be merged. Before the ranges are merged, the last point of the first summand and the first point of the merged range are aligned."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis3 = axis + axis2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The merge is performed at 0.49. The values of the `axis2` are shifted as mentioned before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis3.axis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Axis can be transposed\n",
    "\n",
    "Transposing an axis converts the `axis_type` from `x` to `y` and vice versa.\n",
    "\n",
    "The following cells show the functionality. The `axis_type` is not changed by the transpose method but the method returns a copy with the converted `axis_type`, as known for `numpy`.\n",
    "\n",
    "The `T` attribute is also supported and does the same as `transpose`. Moreover, the methods return the `instance` wherefore chained method calls are possible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis.axis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis_t = axis.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initial type is not changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis.axis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis_t.axis_type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The corresponding array shape. \"y\" corresponds to a column vector."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis_t.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Chained calls."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis.T.axis_type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis.T.T.axis_type"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combine two objects with different `axis_type` to a grid\n",
    "\n",
    "It was shown above that the addition of two axis objects leads to a merge of the corresponding ranges. In case the two objects do not have the same `axis_type`, the addition will create a grid. The `axis_type` \"x\" discretizes the \"x\" range and the `axis_type` \"y\" the \"y\" range."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis4 = axis + axis_t\n",
    "axis4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The returned object contains only the parameters for the grid. The grid needs to be created via the following method call. It will generate the internal representation of the grid which is a list of lists. The first argument of each sublist contains the x-value and the second argument contains a list with the discretized y-values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis4.create_grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The grid can be visualized via the following method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis4.plot_grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Weighted grid\n",
    "\n",
    "The multiplication of two axis objects expect two objects with different `axis_type` attributes. It also cerates a grid. In contrast to the addition, the multiplication weights the y-values by the x-values. The weights are currently related to the width of a bin in x-direction.\n",
    "\n",
    "The following cell uses the merged `axis3` from above and the transposed uniformly distributed `axis2`. It can be seen, that the discretization in z-direction changes with the x-width."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis5 = axis3 * axis2.T\n",
    "axis5.create_grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "axis5.plot_grid()"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
